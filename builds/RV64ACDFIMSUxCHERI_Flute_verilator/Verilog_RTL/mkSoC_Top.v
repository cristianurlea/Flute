//
// Generated by Bluespec Compiler, version untagged-g034050db (build 034050db)
//
//
// Ports:
// Name                         I/O  size props
// to_raw_mem_request_get         O   353
// RDY_to_raw_mem_request_get     O     1
// RDY_to_raw_mem_response_put    O     1
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// status                         O     8 const
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// cms_ifc_pc                     O    64
// cms_ifc_instr                  O    32 reg
// cms_ifc_performance_events     O    39
// cms_ifc_registers              O  4096
// core_dmem_pre_fabric_awid      O     6
// core_dmem_pre_fabric_awaddr    O    64
// core_dmem_pre_fabric_awlen     O     8
// core_dmem_pre_fabric_awsize    O     3
// core_dmem_pre_fabric_awburst   O     2
// core_dmem_pre_fabric_awlock    O     1
// core_dmem_pre_fabric_awcache   O     4
// core_dmem_pre_fabric_awprot    O     3
// core_dmem_pre_fabric_awqos     O     4
// core_dmem_pre_fabric_awregion  O     4
// core_dmem_pre_fabric_awvalid   O     1
// core_dmem_pre_fabric_wdata     O    64
// core_dmem_pre_fabric_wstrb     O     8
// core_dmem_pre_fabric_wlast     O     1
// core_dmem_pre_fabric_wvalid    O     1
// core_dmem_pre_fabric_bready    O     1
// core_dmem_pre_fabric_arid      O     6
// core_dmem_pre_fabric_araddr    O    64
// core_dmem_pre_fabric_arlen     O     8
// core_dmem_pre_fabric_arsize    O     3
// core_dmem_pre_fabric_arburst   O     2
// core_dmem_pre_fabric_arlock    O     1
// core_dmem_pre_fabric_arcache   O     4
// core_dmem_pre_fabric_arprot    O     3
// core_dmem_pre_fabric_arqos     O     4
// core_dmem_pre_fabric_arregion  O     4
// core_dmem_pre_fabric_arvalid   O     1
// core_dmem_pre_fabric_rready    O     1
// core_dmem_post_fabric_awid     O     7 reg
// core_dmem_post_fabric_awaddr   O    64 reg
// core_dmem_post_fabric_awlen    O     8 reg
// core_dmem_post_fabric_awsize   O     3 reg
// core_dmem_post_fabric_awburst  O     2 reg
// core_dmem_post_fabric_awlock   O     1 reg
// core_dmem_post_fabric_awcache  O     4 reg
// core_dmem_post_fabric_awprot   O     3 reg
// core_dmem_post_fabric_awqos    O     4 reg
// core_dmem_post_fabric_awregion  O     4 reg
// core_dmem_post_fabric_awvalid  O     1 reg
// core_dmem_post_fabric_wdata    O    64 reg
// core_dmem_post_fabric_wstrb    O     8 reg
// core_dmem_post_fabric_wlast    O     1 reg
// core_dmem_post_fabric_wvalid   O     1 reg
// core_dmem_post_fabric_bready   O     1 reg
// core_dmem_post_fabric_arid     O     7 reg
// core_dmem_post_fabric_araddr   O    64 reg
// core_dmem_post_fabric_arlen    O     8 reg
// core_dmem_post_fabric_arsize   O     3 reg
// core_dmem_post_fabric_arburst  O     2 reg
// core_dmem_post_fabric_arlock   O     1 reg
// core_dmem_post_fabric_arcache  O     4 reg
// core_dmem_post_fabric_arprot   O     3 reg
// core_dmem_post_fabric_arqos    O     4 reg
// core_dmem_post_fabric_arregion  O     4 reg
// core_dmem_post_fabric_arvalid  O     1 reg
// core_dmem_post_fabric_rready   O     1 reg
// other_peripherals_aw_canPut    O     1 reg
// RDY_other_peripherals_aw_put   O     1 reg
// other_peripherals_w_canPut     O     1 reg
// RDY_other_peripherals_w_put    O     1 reg
// other_peripherals_b_canPeek    O     1 reg
// other_peripherals_b_peek       O     9 reg
// RDY_other_peripherals_b_peek   O     1 reg
// RDY_other_peripherals_b_drop   O     1 reg
// other_peripherals_ar_canPut    O     1 reg
// RDY_other_peripherals_ar_put   O     1 reg
// other_peripherals_r_canPeek    O     1 reg
// other_peripherals_r_peek       O    74 reg
// RDY_other_peripherals_r_peek   O     1 reg
// RDY_other_peripherals_r_drop   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// to_raw_mem_response_put        I   256
// put_from_console_put           I     8 reg
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// cms_ifc_halt_cpu_state         I     1 reg
// core_dmem_pre_fabric_awready   I     1
// core_dmem_pre_fabric_wready    I     1
// core_dmem_pre_fabric_bvalid    I     1
// core_dmem_pre_fabric_bid       I     6
// core_dmem_pre_fabric_bresp     I     2
// core_dmem_pre_fabric_arready   I     1
// core_dmem_pre_fabric_rvalid    I     1
// core_dmem_pre_fabric_rid       I     6
// core_dmem_pre_fabric_rdata     I    64
// core_dmem_pre_fabric_rresp     I     2
// core_dmem_pre_fabric_rlast     I     1
// core_dmem_post_fabric_awready  I     1
// core_dmem_post_fabric_wready   I     1
// core_dmem_post_fabric_bvalid   I     1
// core_dmem_post_fabric_bid      I     7
// core_dmem_post_fabric_bresp    I     2
// core_dmem_post_fabric_arready  I     1
// core_dmem_post_fabric_rvalid   I     1
// core_dmem_post_fabric_rid      I     7
// core_dmem_post_fabric_rdata    I    64
// core_dmem_post_fabric_rresp    I     2
// core_dmem_post_fabric_rlast    I     1
// other_peripherals_aw_put_val   I   100
// other_peripherals_w_put_val    I    73
// other_peripherals_ar_put_val   I   100
// EN_to_raw_mem_response_put     I     1
// EN_put_from_console_put        I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
// EN_cms_ifc_halt_cpu            I     1
// EN_other_peripherals_aw_put    I     1
// EN_other_peripherals_w_put     I     1
// EN_other_peripherals_b_drop    I     1
// EN_other_peripherals_ar_put    I     1
// EN_other_peripherals_r_drop    I     1
// EN_to_raw_mem_request_get      I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Top(CLK,
		 RST_N,

		 EN_to_raw_mem_request_get,
		 to_raw_mem_request_get,
		 RDY_to_raw_mem_request_get,

		 to_raw_mem_response_put,
		 EN_to_raw_mem_response_put,
		 RDY_to_raw_mem_response_put,

		 EN_get_to_console_get,
		 get_to_console_get,
		 RDY_get_to_console_get,

		 put_from_console_put,
		 EN_put_from_console_put,
		 RDY_put_from_console_put,

		 status,

		 set_verbosity_verbosity,
		 set_verbosity_logdelay,
		 EN_set_verbosity,
		 RDY_set_verbosity,

		 set_watch_tohost_watch_tohost,
		 set_watch_tohost_tohost_addr,
		 EN_set_watch_tohost,
		 RDY_set_watch_tohost,

		 mv_tohost_value,
		 RDY_mv_tohost_value,

		 EN_ma_ddr4_ready,
		 RDY_ma_ddr4_ready,

		 mv_status,

		 cms_ifc_pc,

		 cms_ifc_instr,

		 cms_ifc_performance_events,

		 cms_ifc_registers,

		 cms_ifc_halt_cpu_state,
		 EN_cms_ifc_halt_cpu,

		 core_dmem_pre_fabric_awid,

		 core_dmem_pre_fabric_awaddr,

		 core_dmem_pre_fabric_awlen,

		 core_dmem_pre_fabric_awsize,

		 core_dmem_pre_fabric_awburst,

		 core_dmem_pre_fabric_awlock,

		 core_dmem_pre_fabric_awcache,

		 core_dmem_pre_fabric_awprot,

		 core_dmem_pre_fabric_awqos,

		 core_dmem_pre_fabric_awregion,

		 core_dmem_pre_fabric_awvalid,

		 core_dmem_pre_fabric_awready,

		 core_dmem_pre_fabric_wdata,

		 core_dmem_pre_fabric_wstrb,

		 core_dmem_pre_fabric_wlast,

		 core_dmem_pre_fabric_wvalid,

		 core_dmem_pre_fabric_wready,

		 core_dmem_pre_fabric_bvalid,
		 core_dmem_pre_fabric_bid,
		 core_dmem_pre_fabric_bresp,

		 core_dmem_pre_fabric_bready,

		 core_dmem_pre_fabric_arid,

		 core_dmem_pre_fabric_araddr,

		 core_dmem_pre_fabric_arlen,

		 core_dmem_pre_fabric_arsize,

		 core_dmem_pre_fabric_arburst,

		 core_dmem_pre_fabric_arlock,

		 core_dmem_pre_fabric_arcache,

		 core_dmem_pre_fabric_arprot,

		 core_dmem_pre_fabric_arqos,

		 core_dmem_pre_fabric_arregion,

		 core_dmem_pre_fabric_arvalid,

		 core_dmem_pre_fabric_arready,

		 core_dmem_pre_fabric_rvalid,
		 core_dmem_pre_fabric_rid,
		 core_dmem_pre_fabric_rdata,
		 core_dmem_pre_fabric_rresp,
		 core_dmem_pre_fabric_rlast,

		 core_dmem_pre_fabric_rready,

		 core_dmem_post_fabric_awid,

		 core_dmem_post_fabric_awaddr,

		 core_dmem_post_fabric_awlen,

		 core_dmem_post_fabric_awsize,

		 core_dmem_post_fabric_awburst,

		 core_dmem_post_fabric_awlock,

		 core_dmem_post_fabric_awcache,

		 core_dmem_post_fabric_awprot,

		 core_dmem_post_fabric_awqos,

		 core_dmem_post_fabric_awregion,

		 core_dmem_post_fabric_awvalid,

		 core_dmem_post_fabric_awready,

		 core_dmem_post_fabric_wdata,

		 core_dmem_post_fabric_wstrb,

		 core_dmem_post_fabric_wlast,

		 core_dmem_post_fabric_wvalid,

		 core_dmem_post_fabric_wready,

		 core_dmem_post_fabric_bvalid,
		 core_dmem_post_fabric_bid,
		 core_dmem_post_fabric_bresp,

		 core_dmem_post_fabric_bready,

		 core_dmem_post_fabric_arid,

		 core_dmem_post_fabric_araddr,

		 core_dmem_post_fabric_arlen,

		 core_dmem_post_fabric_arsize,

		 core_dmem_post_fabric_arburst,

		 core_dmem_post_fabric_arlock,

		 core_dmem_post_fabric_arcache,

		 core_dmem_post_fabric_arprot,

		 core_dmem_post_fabric_arqos,

		 core_dmem_post_fabric_arregion,

		 core_dmem_post_fabric_arvalid,

		 core_dmem_post_fabric_arready,

		 core_dmem_post_fabric_rvalid,
		 core_dmem_post_fabric_rid,
		 core_dmem_post_fabric_rdata,
		 core_dmem_post_fabric_rresp,
		 core_dmem_post_fabric_rlast,

		 core_dmem_post_fabric_rready,

		 other_peripherals_aw_canPut,

		 other_peripherals_aw_put_val,
		 EN_other_peripherals_aw_put,
		 RDY_other_peripherals_aw_put,

		 other_peripherals_w_canPut,

		 other_peripherals_w_put_val,
		 EN_other_peripherals_w_put,
		 RDY_other_peripherals_w_put,

		 other_peripherals_b_canPeek,

		 other_peripherals_b_peek,
		 RDY_other_peripherals_b_peek,

		 EN_other_peripherals_b_drop,
		 RDY_other_peripherals_b_drop,

		 other_peripherals_ar_canPut,

		 other_peripherals_ar_put_val,
		 EN_other_peripherals_ar_put,
		 RDY_other_peripherals_ar_put,

		 other_peripherals_r_canPeek,

		 other_peripherals_r_peek,
		 RDY_other_peripherals_r_peek,

		 EN_other_peripherals_r_drop,
		 RDY_other_peripherals_r_drop);
  input  CLK;
  input  RST_N;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [352 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // value method status
  output [7 : 0] status;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // value method cms_ifc_pc
  output [63 : 0] cms_ifc_pc;

  // value method cms_ifc_instr
  output [31 : 0] cms_ifc_instr;

  // value method cms_ifc_performance_events
  output [38 : 0] cms_ifc_performance_events;

  // value method cms_ifc_registers
  output [4095 : 0] cms_ifc_registers;

  // action method cms_ifc_halt_cpu
  input  cms_ifc_halt_cpu_state;
  input  EN_cms_ifc_halt_cpu;

  // value method core_dmem_pre_fabric_aw_awid
  output [5 : 0] core_dmem_pre_fabric_awid;

  // value method core_dmem_pre_fabric_aw_awaddr
  output [63 : 0] core_dmem_pre_fabric_awaddr;

  // value method core_dmem_pre_fabric_aw_awlen
  output [7 : 0] core_dmem_pre_fabric_awlen;

  // value method core_dmem_pre_fabric_aw_awsize
  output [2 : 0] core_dmem_pre_fabric_awsize;

  // value method core_dmem_pre_fabric_aw_awburst
  output [1 : 0] core_dmem_pre_fabric_awburst;

  // value method core_dmem_pre_fabric_aw_awlock
  output core_dmem_pre_fabric_awlock;

  // value method core_dmem_pre_fabric_aw_awcache
  output [3 : 0] core_dmem_pre_fabric_awcache;

  // value method core_dmem_pre_fabric_aw_awprot
  output [2 : 0] core_dmem_pre_fabric_awprot;

  // value method core_dmem_pre_fabric_aw_awqos
  output [3 : 0] core_dmem_pre_fabric_awqos;

  // value method core_dmem_pre_fabric_aw_awregion
  output [3 : 0] core_dmem_pre_fabric_awregion;

  // value method core_dmem_pre_fabric_aw_awuser

  // value method core_dmem_pre_fabric_aw_awvalid
  output core_dmem_pre_fabric_awvalid;

  // action method core_dmem_pre_fabric_aw_awready
  input  core_dmem_pre_fabric_awready;

  // value method core_dmem_pre_fabric_w_wdata
  output [63 : 0] core_dmem_pre_fabric_wdata;

  // value method core_dmem_pre_fabric_w_wstrb
  output [7 : 0] core_dmem_pre_fabric_wstrb;

  // value method core_dmem_pre_fabric_w_wlast
  output core_dmem_pre_fabric_wlast;

  // value method core_dmem_pre_fabric_w_wuser

  // value method core_dmem_pre_fabric_w_wvalid
  output core_dmem_pre_fabric_wvalid;

  // action method core_dmem_pre_fabric_w_wready
  input  core_dmem_pre_fabric_wready;

  // action method core_dmem_pre_fabric_b_bflit
  input  core_dmem_pre_fabric_bvalid;
  input  [5 : 0] core_dmem_pre_fabric_bid;
  input  [1 : 0] core_dmem_pre_fabric_bresp;

  // value method core_dmem_pre_fabric_b_bready
  output core_dmem_pre_fabric_bready;

  // value method core_dmem_pre_fabric_ar_arid
  output [5 : 0] core_dmem_pre_fabric_arid;

  // value method core_dmem_pre_fabric_ar_araddr
  output [63 : 0] core_dmem_pre_fabric_araddr;

  // value method core_dmem_pre_fabric_ar_arlen
  output [7 : 0] core_dmem_pre_fabric_arlen;

  // value method core_dmem_pre_fabric_ar_arsize
  output [2 : 0] core_dmem_pre_fabric_arsize;

  // value method core_dmem_pre_fabric_ar_arburst
  output [1 : 0] core_dmem_pre_fabric_arburst;

  // value method core_dmem_pre_fabric_ar_arlock
  output core_dmem_pre_fabric_arlock;

  // value method core_dmem_pre_fabric_ar_arcache
  output [3 : 0] core_dmem_pre_fabric_arcache;

  // value method core_dmem_pre_fabric_ar_arprot
  output [2 : 0] core_dmem_pre_fabric_arprot;

  // value method core_dmem_pre_fabric_ar_arqos
  output [3 : 0] core_dmem_pre_fabric_arqos;

  // value method core_dmem_pre_fabric_ar_arregion
  output [3 : 0] core_dmem_pre_fabric_arregion;

  // value method core_dmem_pre_fabric_ar_aruser

  // value method core_dmem_pre_fabric_ar_arvalid
  output core_dmem_pre_fabric_arvalid;

  // action method core_dmem_pre_fabric_ar_arready
  input  core_dmem_pre_fabric_arready;

  // action method core_dmem_pre_fabric_r_rflit
  input  core_dmem_pre_fabric_rvalid;
  input  [5 : 0] core_dmem_pre_fabric_rid;
  input  [63 : 0] core_dmem_pre_fabric_rdata;
  input  [1 : 0] core_dmem_pre_fabric_rresp;
  input  core_dmem_pre_fabric_rlast;

  // value method core_dmem_pre_fabric_r_rready
  output core_dmem_pre_fabric_rready;

  // value method core_dmem_post_fabric_aw_awid
  output [6 : 0] core_dmem_post_fabric_awid;

  // value method core_dmem_post_fabric_aw_awaddr
  output [63 : 0] core_dmem_post_fabric_awaddr;

  // value method core_dmem_post_fabric_aw_awlen
  output [7 : 0] core_dmem_post_fabric_awlen;

  // value method core_dmem_post_fabric_aw_awsize
  output [2 : 0] core_dmem_post_fabric_awsize;

  // value method core_dmem_post_fabric_aw_awburst
  output [1 : 0] core_dmem_post_fabric_awburst;

  // value method core_dmem_post_fabric_aw_awlock
  output core_dmem_post_fabric_awlock;

  // value method core_dmem_post_fabric_aw_awcache
  output [3 : 0] core_dmem_post_fabric_awcache;

  // value method core_dmem_post_fabric_aw_awprot
  output [2 : 0] core_dmem_post_fabric_awprot;

  // value method core_dmem_post_fabric_aw_awqos
  output [3 : 0] core_dmem_post_fabric_awqos;

  // value method core_dmem_post_fabric_aw_awregion
  output [3 : 0] core_dmem_post_fabric_awregion;

  // value method core_dmem_post_fabric_aw_awuser

  // value method core_dmem_post_fabric_aw_awvalid
  output core_dmem_post_fabric_awvalid;

  // action method core_dmem_post_fabric_aw_awready
  input  core_dmem_post_fabric_awready;

  // value method core_dmem_post_fabric_w_wdata
  output [63 : 0] core_dmem_post_fabric_wdata;

  // value method core_dmem_post_fabric_w_wstrb
  output [7 : 0] core_dmem_post_fabric_wstrb;

  // value method core_dmem_post_fabric_w_wlast
  output core_dmem_post_fabric_wlast;

  // value method core_dmem_post_fabric_w_wuser

  // value method core_dmem_post_fabric_w_wvalid
  output core_dmem_post_fabric_wvalid;

  // action method core_dmem_post_fabric_w_wready
  input  core_dmem_post_fabric_wready;

  // action method core_dmem_post_fabric_b_bflit
  input  core_dmem_post_fabric_bvalid;
  input  [6 : 0] core_dmem_post_fabric_bid;
  input  [1 : 0] core_dmem_post_fabric_bresp;

  // value method core_dmem_post_fabric_b_bready
  output core_dmem_post_fabric_bready;

  // value method core_dmem_post_fabric_ar_arid
  output [6 : 0] core_dmem_post_fabric_arid;

  // value method core_dmem_post_fabric_ar_araddr
  output [63 : 0] core_dmem_post_fabric_araddr;

  // value method core_dmem_post_fabric_ar_arlen
  output [7 : 0] core_dmem_post_fabric_arlen;

  // value method core_dmem_post_fabric_ar_arsize
  output [2 : 0] core_dmem_post_fabric_arsize;

  // value method core_dmem_post_fabric_ar_arburst
  output [1 : 0] core_dmem_post_fabric_arburst;

  // value method core_dmem_post_fabric_ar_arlock
  output core_dmem_post_fabric_arlock;

  // value method core_dmem_post_fabric_ar_arcache
  output [3 : 0] core_dmem_post_fabric_arcache;

  // value method core_dmem_post_fabric_ar_arprot
  output [2 : 0] core_dmem_post_fabric_arprot;

  // value method core_dmem_post_fabric_ar_arqos
  output [3 : 0] core_dmem_post_fabric_arqos;

  // value method core_dmem_post_fabric_ar_arregion
  output [3 : 0] core_dmem_post_fabric_arregion;

  // value method core_dmem_post_fabric_ar_aruser

  // value method core_dmem_post_fabric_ar_arvalid
  output core_dmem_post_fabric_arvalid;

  // action method core_dmem_post_fabric_ar_arready
  input  core_dmem_post_fabric_arready;

  // action method core_dmem_post_fabric_r_rflit
  input  core_dmem_post_fabric_rvalid;
  input  [6 : 0] core_dmem_post_fabric_rid;
  input  [63 : 0] core_dmem_post_fabric_rdata;
  input  [1 : 0] core_dmem_post_fabric_rresp;
  input  core_dmem_post_fabric_rlast;

  // value method core_dmem_post_fabric_r_rready
  output core_dmem_post_fabric_rready;

  // value method other_peripherals_aw_canPut
  output other_peripherals_aw_canPut;

  // action method other_peripherals_aw_put
  input  [99 : 0] other_peripherals_aw_put_val;
  input  EN_other_peripherals_aw_put;
  output RDY_other_peripherals_aw_put;

  // value method other_peripherals_w_canPut
  output other_peripherals_w_canPut;

  // action method other_peripherals_w_put
  input  [72 : 0] other_peripherals_w_put_val;
  input  EN_other_peripherals_w_put;
  output RDY_other_peripherals_w_put;

  // value method other_peripherals_b_canPeek
  output other_peripherals_b_canPeek;

  // value method other_peripherals_b_peek
  output [8 : 0] other_peripherals_b_peek;
  output RDY_other_peripherals_b_peek;

  // action method other_peripherals_b_drop
  input  EN_other_peripherals_b_drop;
  output RDY_other_peripherals_b_drop;

  // value method other_peripherals_ar_canPut
  output other_peripherals_ar_canPut;

  // action method other_peripherals_ar_put
  input  [99 : 0] other_peripherals_ar_put_val;
  input  EN_other_peripherals_ar_put;
  output RDY_other_peripherals_ar_put;

  // value method other_peripherals_r_canPeek
  output other_peripherals_r_canPeek;

  // value method other_peripherals_r_peek
  output [73 : 0] other_peripherals_r_peek;
  output RDY_other_peripherals_r_peek;

  // action method other_peripherals_r_drop
  input  EN_other_peripherals_r_drop;
  output RDY_other_peripherals_r_drop;

  // signals for module outputs
  wire [4095 : 0] cms_ifc_registers;
  wire [352 : 0] to_raw_mem_request_get;
  wire [73 : 0] other_peripherals_r_peek;
  wire [63 : 0] cms_ifc_pc,
		core_dmem_post_fabric_araddr,
		core_dmem_post_fabric_awaddr,
		core_dmem_post_fabric_wdata,
		core_dmem_pre_fabric_araddr,
		core_dmem_pre_fabric_awaddr,
		core_dmem_pre_fabric_wdata,
		mv_tohost_value;
  wire [38 : 0] cms_ifc_performance_events;
  wire [31 : 0] cms_ifc_instr;
  wire [8 : 0] other_peripherals_b_peek;
  wire [7 : 0] core_dmem_post_fabric_arlen,
	       core_dmem_post_fabric_awlen,
	       core_dmem_post_fabric_wstrb,
	       core_dmem_pre_fabric_arlen,
	       core_dmem_pre_fabric_awlen,
	       core_dmem_pre_fabric_wstrb,
	       get_to_console_get,
	       mv_status,
	       status;
  wire [6 : 0] core_dmem_post_fabric_arid, core_dmem_post_fabric_awid;
  wire [5 : 0] core_dmem_pre_fabric_arid, core_dmem_pre_fabric_awid;
  wire [3 : 0] core_dmem_post_fabric_arcache,
	       core_dmem_post_fabric_arqos,
	       core_dmem_post_fabric_arregion,
	       core_dmem_post_fabric_awcache,
	       core_dmem_post_fabric_awqos,
	       core_dmem_post_fabric_awregion,
	       core_dmem_pre_fabric_arcache,
	       core_dmem_pre_fabric_arqos,
	       core_dmem_pre_fabric_arregion,
	       core_dmem_pre_fabric_awcache,
	       core_dmem_pre_fabric_awqos,
	       core_dmem_pre_fabric_awregion;
  wire [2 : 0] core_dmem_post_fabric_arprot,
	       core_dmem_post_fabric_arsize,
	       core_dmem_post_fabric_awprot,
	       core_dmem_post_fabric_awsize,
	       core_dmem_pre_fabric_arprot,
	       core_dmem_pre_fabric_arsize,
	       core_dmem_pre_fabric_awprot,
	       core_dmem_pre_fabric_awsize;
  wire [1 : 0] core_dmem_post_fabric_arburst,
	       core_dmem_post_fabric_awburst,
	       core_dmem_pre_fabric_arburst,
	       core_dmem_pre_fabric_awburst;
  wire RDY_get_to_console_get,
       RDY_ma_ddr4_ready,
       RDY_mv_tohost_value,
       RDY_other_peripherals_ar_put,
       RDY_other_peripherals_aw_put,
       RDY_other_peripherals_b_drop,
       RDY_other_peripherals_b_peek,
       RDY_other_peripherals_r_drop,
       RDY_other_peripherals_r_peek,
       RDY_other_peripherals_w_put,
       RDY_put_from_console_put,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put,
       core_dmem_post_fabric_arlock,
       core_dmem_post_fabric_arvalid,
       core_dmem_post_fabric_awlock,
       core_dmem_post_fabric_awvalid,
       core_dmem_post_fabric_bready,
       core_dmem_post_fabric_rready,
       core_dmem_post_fabric_wlast,
       core_dmem_post_fabric_wvalid,
       core_dmem_pre_fabric_arlock,
       core_dmem_pre_fabric_arvalid,
       core_dmem_pre_fabric_awlock,
       core_dmem_pre_fabric_awvalid,
       core_dmem_pre_fabric_bready,
       core_dmem_pre_fabric_rready,
       core_dmem_pre_fabric_wlast,
       core_dmem_pre_fabric_wvalid,
       other_peripherals_ar_canPut,
       other_peripherals_aw_canPut,
       other_peripherals_b_canPeek,
       other_peripherals_r_canPeek,
       other_peripherals_w_canPut;

  // inlined wires
  reg [173 : 0] bus_toDfltOutput$wget,
		bus_toOutput_0$wget,
		bus_toOutput_1$wget,
		bus_toOutput_2$wget,
		bus_toOutput_3$wget;
  reg [99 : 0] bus_1_toDfltOutput$wget,
	       bus_1_toOutput_0$wget,
	       bus_1_toOutput_1$wget,
	       bus_1_toOutput_2$wget,
	       bus_1_toOutput_3$wget;
  reg [73 : 0] bus_1_toOutput_0_1$wget, bus_1_toOutput_1_1$wget;
  reg [8 : 0] bus_toOutput_0_1$wget, bus_toOutput_1_1$wget;
  wire [173 : 0] bus_split_0_doPut$wget,
		 bus_split_1_doPut$wget,
		 bus_split_2_doPut$wget,
		 bus_split_3_doPut$wget;
  wire [172 : 0] bus_merged_0_outflit$wget, bus_merged_1_outflit$wget;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read;
  wire [98 : 0] bus_merged_0_awug_peekWire$wget;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read;
  wire [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read;
  wire [72 : 0] core_mem_master_sig_rSig_snk_putWire$wget;
  wire [17 : 0] boot_rom_axi4_deburster_flitReceived$port0__write_1,
		boot_rom_axi4_deburster_flitReceived$port1__read,
		boot_rom_axi4_deburster_flitReceived$port2__read,
		boot_rom_axi4_deburster_flitReceived$port3__read,
		mem0_controller_axi4_deburster_flitReceived$port0__write_1,
		mem0_controller_axi4_deburster_flitReceived$port1__read,
		mem0_controller_axi4_deburster_flitReceived$port2__read,
		mem0_controller_axi4_deburster_flitReceived$port3__read;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read;
  wire [7 : 0] boot_rom_axi4_deburster_readsSent$port0__write_1,
	       boot_rom_axi4_deburster_readsSent$port1__read,
	       boot_rom_axi4_deburster_readsSent$port2__read,
	       boot_rom_axi4_deburster_writesSent$port0__write_1,
	       boot_rom_axi4_deburster_writesSent$port1__read,
	       boot_rom_axi4_deburster_writesSent$port2__read,
	       core_mem_master_sig_bSig_snk_putWire$wget,
	       mem0_controller_axi4_deburster_readsSent$port0__write_1,
	       mem0_controller_axi4_deburster_readsSent$port1__read,
	       mem0_controller_axi4_deburster_readsSent$port2__read,
	       mem0_controller_axi4_deburster_writesSent$port0__write_1,
	       mem0_controller_axi4_deburster_writesSent$port1__read,
	       mem0_controller_axi4_deburster_writesSent$port2__read;
  wire [3 : 0] bus_1_inputDest_0$wget,
	       bus_1_inputDest_1$wget,
	       bus_inputDest_0$wget,
	       bus_inputDest_1$wget;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port1__read,
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port2__read,
	       bus_1_inputDest_0_1$wget,
	       bus_1_inputDest_1_1$wget,
	       bus_1_inputDest_2$wget,
	       bus_1_inputDest_3$wget,
	       bus_1_inputDest_4$wget,
	       bus_inputDest_0_1$wget,
	       bus_inputDest_1_1$wget,
	       bus_inputDest_2$wget,
	       bus_inputDest_3$wget,
	       bus_inputDest_4$wget,
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port1__read,
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port2__read;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port0__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port1__write,
       bus_1_selectInput_0$wget,
       bus_1_selectInput_0_1$wget,
       bus_1_selectInput_1$wget,
       bus_1_selectInput_1_1$wget,
       bus_1_selectInput_2$wget,
       bus_1_selectInput_3$wget,
       bus_1_selectInput_4$wget,
       bus_1_toDfltOutput$whas,
       bus_1_toOutput_0$whas,
       bus_1_toOutput_0_1$whas,
       bus_1_toOutput_1$whas,
       bus_1_toOutput_1_1$whas,
       bus_1_toOutput_2$whas,
       bus_1_toOutput_3$whas,
       bus_merged_0_doDrop$whas,
       bus_merged_1_doDrop$whas,
       bus_selectInput_0$wget,
       bus_selectInput_0_1$wget,
       bus_selectInput_1$wget,
       bus_selectInput_1_1$wget,
       bus_selectInput_2$wget,
       bus_selectInput_3$wget,
       bus_selectInput_4$wget,
       bus_split_0_wug_putWire$whas,
       bus_split_1_wug_putWire$whas,
       bus_split_2_wug_putWire$whas,
       bus_split_3_wug_putWire$whas,
       bus_toDfltOutput$whas,
       bus_toOutput_0$whas,
       bus_toOutput_0_1$whas,
       bus_toOutput_1$whas,
       bus_toOutput_1_1$whas,
       bus_toOutput_2$whas,
       bus_toOutput_3$whas,
       core_mem_master_sig_arSig_src_dropWire$whas,
       core_mem_master_sig_awSig_src_dropWire$whas,
       core_mem_master_sig_bSig_snk_putWire$whas,
       core_mem_master_sig_rSig_snk_putWire$whas,
       core_mem_master_sig_wSig_src_dropWire$whas,
       m_otherPeripheralsPortShim_sig_arSig_src_dropWire$whas,
       m_otherPeripheralsPortShim_sig_awSig_src_dropWire$whas,
       m_otherPeripheralsPortShim_sig_bSig_snk_putWire$whas,
       m_otherPeripheralsPortShim_sig_rSig_snk_putWire$whas,
       m_otherPeripheralsPortShim_sig_wSig_src_dropWire$whas,
       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port0__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port1__write;

  // register boot_rom_axi4_deburster_flitReceived
  reg [17 : 0] boot_rom_axi4_deburster_flitReceived;
  wire [17 : 0] boot_rom_axi4_deburster_flitReceived$D_IN;
  wire boot_rom_axi4_deburster_flitReceived$EN;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  reg boot_rom_axi4_deburster_inSerial_lastWasRead;
  wire boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN,
       boot_rom_axi4_deburster_inSerial_lastWasRead$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  reg [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  reg [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv;
  wire [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_state
  reg [1 : 0] boot_rom_axi4_deburster_inSerial_state;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$D_IN;
  wire boot_rom_axi4_deburster_inSerial_state$EN;

  // register boot_rom_axi4_deburster_readsSent
  reg [7 : 0] boot_rom_axi4_deburster_readsSent;
  wire [7 : 0] boot_rom_axi4_deburster_readsSent$D_IN;
  wire boot_rom_axi4_deburster_readsSent$EN;

  // register boot_rom_axi4_deburster_writesSent
  reg [7 : 0] boot_rom_axi4_deburster_writesSent;
  wire [7 : 0] boot_rom_axi4_deburster_writesSent$D_IN;
  wire boot_rom_axi4_deburster_writesSent$EN;

  // register bus_1_arbiter_firstHot
  reg bus_1_arbiter_firstHot;
  wire bus_1_arbiter_firstHot$D_IN, bus_1_arbiter_firstHot$EN;

  // register bus_1_arbiter_firstHot_1
  reg bus_1_arbiter_firstHot_1;
  wire bus_1_arbiter_firstHot_1$D_IN, bus_1_arbiter_firstHot_1$EN;

  // register bus_1_arbiter_lastSelect
  reg bus_1_arbiter_lastSelect;
  wire bus_1_arbiter_lastSelect$D_IN, bus_1_arbiter_lastSelect$EN;

  // register bus_1_arbiter_lastSelect_1
  reg bus_1_arbiter_lastSelect_1;
  wire bus_1_arbiter_lastSelect_1$D_IN, bus_1_arbiter_lastSelect_1$EN;

  // register bus_1_arbiter_lastSelect_1_1
  reg bus_1_arbiter_lastSelect_1_1;
  wire bus_1_arbiter_lastSelect_1_1$D_IN, bus_1_arbiter_lastSelect_1_1$EN;

  // register bus_1_arbiter_lastSelect_2
  reg bus_1_arbiter_lastSelect_2;
  wire bus_1_arbiter_lastSelect_2$D_IN, bus_1_arbiter_lastSelect_2$EN;

  // register bus_1_arbiter_lastSelect_3
  reg bus_1_arbiter_lastSelect_3;
  wire bus_1_arbiter_lastSelect_3$D_IN, bus_1_arbiter_lastSelect_3$EN;

  // register bus_1_moreFlits
  reg [6 : 0] bus_1_moreFlits;
  wire [6 : 0] bus_1_moreFlits$D_IN;
  wire bus_1_moreFlits$EN;

  // register bus_1_moreFlits_1
  reg [7 : 0] bus_1_moreFlits_1;
  reg [7 : 0] bus_1_moreFlits_1$D_IN;
  wire bus_1_moreFlits_1$EN;

  // register bus_1_noRouteSlv_currentReq
  reg [99 : 0] bus_1_noRouteSlv_currentReq;
  wire [99 : 0] bus_1_noRouteSlv_currentReq$D_IN;
  wire bus_1_noRouteSlv_currentReq$EN;

  // register bus_1_noRouteSlv_flitCount
  reg [8 : 0] bus_1_noRouteSlv_flitCount;
  wire [8 : 0] bus_1_noRouteSlv_flitCount$D_IN;
  wire bus_1_noRouteSlv_flitCount$EN;

  // register bus_arbiter_firstHot
  reg bus_arbiter_firstHot;
  wire bus_arbiter_firstHot$D_IN, bus_arbiter_firstHot$EN;

  // register bus_arbiter_firstHot_1
  reg bus_arbiter_firstHot_1;
  wire bus_arbiter_firstHot_1$D_IN, bus_arbiter_firstHot_1$EN;

  // register bus_arbiter_lastSelect
  reg bus_arbiter_lastSelect;
  wire bus_arbiter_lastSelect$D_IN, bus_arbiter_lastSelect$EN;

  // register bus_arbiter_lastSelect_1
  reg bus_arbiter_lastSelect_1;
  wire bus_arbiter_lastSelect_1$D_IN, bus_arbiter_lastSelect_1$EN;

  // register bus_arbiter_lastSelect_1_1
  reg bus_arbiter_lastSelect_1_1;
  wire bus_arbiter_lastSelect_1_1$D_IN, bus_arbiter_lastSelect_1_1$EN;

  // register bus_arbiter_lastSelect_2
  reg bus_arbiter_lastSelect_2;
  wire bus_arbiter_lastSelect_2$D_IN, bus_arbiter_lastSelect_2$EN;

  // register bus_arbiter_lastSelect_3
  reg bus_arbiter_lastSelect_3;
  wire bus_arbiter_lastSelect_3$D_IN, bus_arbiter_lastSelect_3$EN;

  // register bus_merged_0_flitLeft
  reg [7 : 0] bus_merged_0_flitLeft;
  wire [7 : 0] bus_merged_0_flitLeft$D_IN;
  wire bus_merged_0_flitLeft$EN;

  // register bus_merged_1_flitLeft
  reg [7 : 0] bus_merged_1_flitLeft;
  wire [7 : 0] bus_merged_1_flitLeft$D_IN;
  wire bus_merged_1_flitLeft$EN;

  // register bus_moreFlits
  reg [6 : 0] bus_moreFlits;
  reg [6 : 0] bus_moreFlits$D_IN;
  wire bus_moreFlits$EN;

  // register bus_moreFlits_1
  reg [7 : 0] bus_moreFlits_1;
  wire [7 : 0] bus_moreFlits_1$D_IN;
  wire bus_moreFlits_1$EN;

  // register bus_noRouteSlv_awidReg
  reg [6 : 0] bus_noRouteSlv_awidReg;
  wire [6 : 0] bus_noRouteSlv_awidReg$D_IN;
  wire bus_noRouteSlv_awidReg$EN;

  // register bus_split_0_flitLeft
  reg [7 : 0] bus_split_0_flitLeft;
  wire [7 : 0] bus_split_0_flitLeft$D_IN;
  wire bus_split_0_flitLeft$EN;

  // register bus_split_1_flitLeft
  reg [7 : 0] bus_split_1_flitLeft;
  wire [7 : 0] bus_split_1_flitLeft$D_IN;
  wire bus_split_1_flitLeft$EN;

  // register bus_split_2_flitLeft
  reg [7 : 0] bus_split_2_flitLeft;
  wire [7 : 0] bus_split_2_flitLeft$D_IN;
  wire bus_split_2_flitLeft$EN;

  // register bus_split_3_flitLeft
  reg [7 : 0] bus_split_3_flitLeft;
  wire [7 : 0] bus_split_3_flitLeft$D_IN;
  wire bus_split_3_flitLeft$EN;

  // register mem0_controller_axi4_deburster_flitReceived
  reg [17 : 0] mem0_controller_axi4_deburster_flitReceived;
  wire [17 : 0] mem0_controller_axi4_deburster_flitReceived$D_IN;
  wire mem0_controller_axi4_deburster_flitReceived$EN;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  reg mem0_controller_axi4_deburster_inSerial_lastWasRead;
  wire mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN,
       mem0_controller_axi4_deburster_inSerial_lastWasRead$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  reg [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv;
  wire [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  reg [73 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv;
  wire [73 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_state
  reg [1 : 0] mem0_controller_axi4_deburster_inSerial_state;
  wire [1 : 0] mem0_controller_axi4_deburster_inSerial_state$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_state$EN;

  // register mem0_controller_axi4_deburster_readsSent
  reg [7 : 0] mem0_controller_axi4_deburster_readsSent;
  wire [7 : 0] mem0_controller_axi4_deburster_readsSent$D_IN;
  wire mem0_controller_axi4_deburster_readsSent$EN;

  // register mem0_controller_axi4_deburster_writesSent
  reg [7 : 0] mem0_controller_axi4_deburster_writesSent;
  wire [7 : 0] mem0_controller_axi4_deburster_writesSent$D_IN;
  wire mem0_controller_axi4_deburster_writesSent$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule boot_rom
  wire [99 : 0] boot_rom$slave_ar_put_val, boot_rom$slave_aw_put_val;
  wire [73 : 0] boot_rom$slave_r_peek;
  wire [72 : 0] boot_rom$slave_w_put_val;
  wire [63 : 0] boot_rom$set_addr_map_addr_base,
		boot_rom$set_addr_map_addr_lim;
  wire [8 : 0] boot_rom$slave_b_peek;
  wire boot_rom$EN_set_addr_map,
       boot_rom$EN_slave_ar_put,
       boot_rom$EN_slave_aw_put,
       boot_rom$EN_slave_b_drop,
       boot_rom$EN_slave_r_drop,
       boot_rom$EN_slave_w_put,
       boot_rom$RDY_slave_ar_put,
       boot_rom$RDY_slave_aw_put,
       boot_rom$RDY_slave_b_drop,
       boot_rom$RDY_slave_b_peek,
       boot_rom$RDY_slave_r_drop,
       boot_rom$RDY_slave_r_peek,
       boot_rom$RDY_slave_w_put,
       boot_rom$slave_ar_canPut,
       boot_rom$slave_aw_canPut,
       boot_rom$slave_b_canPeek,
       boot_rom$slave_r_canPeek,
       boot_rom$slave_w_canPut;

  // ports of submodule boot_rom_axi4_deburster_countWriteRspFF
  wire [7 : 0] boot_rom_axi4_deburster_countWriteRspFF$D_IN,
	       boot_rom_axi4_deburster_countWriteRspFF$D_OUT;
  wire boot_rom_axi4_deburster_countWriteRspFF$CLR,
       boot_rom_axi4_deburster_countWriteRspFF$DEQ,
       boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N,
       boot_rom_axi4_deburster_countWriteRspFF$ENQ,
       boot_rom_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_arff$D_IN,
		boot_rom_axi4_deburster_inShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_arff$CLR,
       boot_rom_axi4_deburster_inShim_arff$DEQ,
       boot_rom_axi4_deburster_inShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_arff$ENQ,
       boot_rom_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_awff$D_IN,
		boot_rom_axi4_deburster_inShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_awff$CLR,
       boot_rom_axi4_deburster_inShim_awff$DEQ,
       boot_rom_axi4_deburster_inShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_awff$ENQ,
       boot_rom_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_inShim_bff$D_IN,
	       boot_rom_axi4_deburster_inShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_bff$CLR,
       boot_rom_axi4_deburster_inShim_bff$DEQ,
       boot_rom_axi4_deburster_inShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_bff$ENQ,
       boot_rom_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_rff
  wire [73 : 0] boot_rom_axi4_deburster_inShim_rff$D_IN,
		boot_rom_axi4_deburster_inShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_rff$CLR,
       boot_rom_axi4_deburster_inShim_rff$DEQ,
       boot_rom_axi4_deburster_inShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_rff$ENQ,
       boot_rom_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_wff
  wire [72 : 0] boot_rom_axi4_deburster_inShim_wff$D_IN,
		boot_rom_axi4_deburster_inShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_wff$CLR,
       boot_rom_axi4_deburster_inShim_wff$DEQ,
       boot_rom_axi4_deburster_inShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_wff$ENQ,
       boot_rom_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_lastReadRspFF
  wire boot_rom_axi4_deburster_lastReadRspFF$CLR,
       boot_rom_axi4_deburster_lastReadRspFF$DEQ,
       boot_rom_axi4_deburster_lastReadRspFF$D_IN,
       boot_rom_axi4_deburster_lastReadRspFF$D_OUT,
       boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N,
       boot_rom_axi4_deburster_lastReadRspFF$ENQ,
       boot_rom_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_arff$D_IN,
		boot_rom_axi4_deburster_outShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_arff$CLR,
       boot_rom_axi4_deburster_outShim_arff$DEQ,
       boot_rom_axi4_deburster_outShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_arff$ENQ,
       boot_rom_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_awff$D_IN,
		boot_rom_axi4_deburster_outShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_awff$CLR,
       boot_rom_axi4_deburster_outShim_awff$DEQ,
       boot_rom_axi4_deburster_outShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_awff$ENQ,
       boot_rom_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_outShim_bff$D_IN,
	       boot_rom_axi4_deburster_outShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_bff$CLR,
       boot_rom_axi4_deburster_outShim_bff$DEQ,
       boot_rom_axi4_deburster_outShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_bff$ENQ,
       boot_rom_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_rff
  wire [73 : 0] boot_rom_axi4_deburster_outShim_rff$D_IN,
		boot_rom_axi4_deburster_outShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_rff$CLR,
       boot_rom_axi4_deburster_outShim_rff$DEQ,
       boot_rom_axi4_deburster_outShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_rff$ENQ,
       boot_rom_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_wff
  wire [72 : 0] boot_rom_axi4_deburster_outShim_wff$D_IN,
		boot_rom_axi4_deburster_outShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_wff$CLR,
       boot_rom_axi4_deburster_outShim_wff$DEQ,
       boot_rom_axi4_deburster_outShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_wff$ENQ,
       boot_rom_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule bus_merged_0_awff
  wire [98 : 0] bus_merged_0_awff$D_IN, bus_merged_0_awff$D_OUT;
  wire bus_merged_0_awff$CLR,
       bus_merged_0_awff$DEQ,
       bus_merged_0_awff$EMPTY_N,
       bus_merged_0_awff$ENQ,
       bus_merged_0_awff$FULL_N;

  // ports of submodule bus_merged_0_wff
  wire [72 : 0] bus_merged_0_wff$D_IN, bus_merged_0_wff$D_OUT;
  wire bus_merged_0_wff$CLR,
       bus_merged_0_wff$DEQ,
       bus_merged_0_wff$EMPTY_N,
       bus_merged_0_wff$ENQ,
       bus_merged_0_wff$FULL_N;

  // ports of submodule bus_merged_1_awff
  wire [98 : 0] bus_merged_1_awff$D_IN, bus_merged_1_awff$D_OUT;
  wire bus_merged_1_awff$CLR,
       bus_merged_1_awff$DEQ,
       bus_merged_1_awff$EMPTY_N,
       bus_merged_1_awff$ENQ,
       bus_merged_1_awff$FULL_N;

  // ports of submodule bus_merged_1_wff
  wire [72 : 0] bus_merged_1_wff$D_IN, bus_merged_1_wff$D_OUT;
  wire bus_merged_1_wff$CLR,
       bus_merged_1_wff$DEQ,
       bus_merged_1_wff$EMPTY_N,
       bus_merged_1_wff$ENQ,
       bus_merged_1_wff$FULL_N;

  // ports of submodule bus_noRouteSlv_rspFF
  wire [8 : 0] bus_noRouteSlv_rspFF$D_IN, bus_noRouteSlv_rspFF$D_OUT;
  wire bus_noRouteSlv_rspFF$CLR,
       bus_noRouteSlv_rspFF$DEQ,
       bus_noRouteSlv_rspFF$EMPTY_N,
       bus_noRouteSlv_rspFF$ENQ,
       bus_noRouteSlv_rspFF$FULL_N;

  // ports of submodule core
  wire [4095 : 0] core$cms_ifc_registers;
  wire [576 : 0] core$dma_server_w_put_val;
  wire [98 : 0] core$core_mem_master_ar_peek,
		core$core_mem_master_aw_peek,
		core$dma_server_ar_put_val,
		core$dma_server_aw_put_val;
  wire [97 : 0] core$cpu_imem_master_ar_peek, core$cpu_imem_master_aw_peek;
  wire [72 : 0] core$core_mem_master_r_put_val,
		core$core_mem_master_w_peek,
		core$cpu_imem_master_w_peek;
  wire [71 : 0] core$cpu_imem_master_r_put_val;
  wire [63 : 0] core$cms_ifc_pc,
		core$mv_tohost_value,
		core$set_verbosity_logdelay,
		core$set_watch_tohost_tohost_addr;
  wire [38 : 0] core$cms_ifc_performance_events;
  wire [31 : 0] core$cms_ifc_instr;
  wire [7 : 0] core$core_mem_master_b_put_val, core$mv_status;
  wire [6 : 0] core$cpu_imem_master_b_put_val;
  wire [3 : 0] core$set_verbosity_verbosity;
  wire core$EN_cms_ifc_halt_cpu,
       core$EN_core_mem_master_ar_drop,
       core$EN_core_mem_master_aw_drop,
       core$EN_core_mem_master_b_put,
       core$EN_core_mem_master_r_put,
       core$EN_core_mem_master_w_drop,
       core$EN_cpu_imem_master_ar_drop,
       core$EN_cpu_imem_master_aw_drop,
       core$EN_cpu_imem_master_b_put,
       core$EN_cpu_imem_master_r_put,
       core$EN_cpu_imem_master_w_drop,
       core$EN_cpu_reset_server_request_put,
       core$EN_cpu_reset_server_response_get,
       core$EN_dma_server_ar_put,
       core$EN_dma_server_aw_put,
       core$EN_dma_server_b_drop,
       core$EN_dma_server_r_drop,
       core$EN_dma_server_w_put,
       core$EN_ma_ddr4_ready,
       core$EN_set_verbosity,
       core$EN_set_watch_tohost,
       core$RDY_core_mem_master_ar_drop,
       core$RDY_core_mem_master_ar_peek,
       core$RDY_core_mem_master_aw_drop,
       core$RDY_core_mem_master_aw_peek,
       core$RDY_core_mem_master_b_put,
       core$RDY_core_mem_master_r_put,
       core$RDY_core_mem_master_w_drop,
       core$RDY_core_mem_master_w_peek,
       core$RDY_cpu_imem_master_ar_drop,
       core$RDY_cpu_imem_master_ar_peek,
       core$RDY_cpu_imem_master_aw_drop,
       core$RDY_cpu_imem_master_aw_peek,
       core$RDY_cpu_imem_master_b_put,
       core$RDY_cpu_imem_master_r_put,
       core$RDY_cpu_imem_master_w_drop,
       core$RDY_cpu_imem_master_w_peek,
       core$RDY_cpu_reset_server_request_put,
       core$RDY_cpu_reset_server_response_get,
       core$RDY_dma_server_b_drop,
       core$RDY_dma_server_b_peek,
       core$RDY_dma_server_r_drop,
       core$RDY_dma_server_r_peek,
       core$cms_ifc_halt_cpu_state,
       core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,
       core$core_mem_master_ar_canPeek,
       core$core_mem_master_aw_canPeek,
       core$core_mem_master_b_canPut,
       core$core_mem_master_r_canPut,
       core$core_mem_master_w_canPeek,
       core$cpu_imem_master_ar_canPeek,
       core$cpu_imem_master_aw_canPeek,
       core$cpu_imem_master_b_canPut,
       core$cpu_imem_master_r_canPut,
       core$cpu_imem_master_w_canPeek,
       core$cpu_reset_server_request_put,
       core$dma_server_b_canPeek,
       core$dma_server_r_canPeek,
       core$nmi_req_set_not_clear,
       core$set_watch_tohost_watch_tohost;

  // ports of submodule m_otherPeripheralsPortShim_arff
  wire [99 : 0] m_otherPeripheralsPortShim_arff$D_IN,
		m_otherPeripheralsPortShim_arff$D_OUT;
  wire m_otherPeripheralsPortShim_arff$CLR,
       m_otherPeripheralsPortShim_arff$DEQ,
       m_otherPeripheralsPortShim_arff$EMPTY_N,
       m_otherPeripheralsPortShim_arff$ENQ;

  // ports of submodule m_otherPeripheralsPortShim_awff
  wire [99 : 0] m_otherPeripheralsPortShim_awff$D_IN,
		m_otherPeripheralsPortShim_awff$D_OUT;
  wire m_otherPeripheralsPortShim_awff$CLR,
       m_otherPeripheralsPortShim_awff$DEQ,
       m_otherPeripheralsPortShim_awff$EMPTY_N,
       m_otherPeripheralsPortShim_awff$ENQ;

  // ports of submodule m_otherPeripheralsPortShim_bff
  wire [8 : 0] m_otherPeripheralsPortShim_bff$D_IN;
  wire m_otherPeripheralsPortShim_bff$CLR,
       m_otherPeripheralsPortShim_bff$DEQ,
       m_otherPeripheralsPortShim_bff$ENQ,
       m_otherPeripheralsPortShim_bff$FULL_N;

  // ports of submodule m_otherPeripheralsPortShim_rff
  wire [73 : 0] m_otherPeripheralsPortShim_rff$D_IN;
  wire m_otherPeripheralsPortShim_rff$CLR,
       m_otherPeripheralsPortShim_rff$DEQ,
       m_otherPeripheralsPortShim_rff$ENQ,
       m_otherPeripheralsPortShim_rff$FULL_N;

  // ports of submodule m_otherPeripheralsPortShim_wff
  wire [72 : 0] m_otherPeripheralsPortShim_wff$D_IN,
		m_otherPeripheralsPortShim_wff$D_OUT;
  wire m_otherPeripheralsPortShim_wff$CLR,
       m_otherPeripheralsPortShim_wff$DEQ,
       m_otherPeripheralsPortShim_wff$EMPTY_N,
       m_otherPeripheralsPortShim_wff$ENQ;

  // ports of submodule mem0_controller
  wire [352 : 0] mem0_controller$to_raw_mem_request_get;
  wire [255 : 0] mem0_controller$to_raw_mem_response_put;
  wire [99 : 0] mem0_controller$slave_ar_put_val,
		mem0_controller$slave_aw_put_val;
  wire [73 : 0] mem0_controller$slave_r_peek;
  wire [72 : 0] mem0_controller$slave_w_put_val;
  wire [63 : 0] mem0_controller$set_addr_map_addr_base,
		mem0_controller$set_addr_map_addr_lim,
		mem0_controller$set_watch_tohost_tohost_addr;
  wire [8 : 0] mem0_controller$slave_b_peek;
  wire mem0_controller$EN_server_reset_request_put,
       mem0_controller$EN_server_reset_response_get,
       mem0_controller$EN_set_addr_map,
       mem0_controller$EN_set_watch_tohost,
       mem0_controller$EN_slave_ar_put,
       mem0_controller$EN_slave_aw_put,
       mem0_controller$EN_slave_b_drop,
       mem0_controller$EN_slave_r_drop,
       mem0_controller$EN_slave_w_put,
       mem0_controller$EN_to_raw_mem_request_get,
       mem0_controller$EN_to_raw_mem_response_put,
       mem0_controller$RDY_server_reset_request_put,
       mem0_controller$RDY_server_reset_response_get,
       mem0_controller$RDY_set_addr_map,
       mem0_controller$RDY_slave_ar_put,
       mem0_controller$RDY_slave_aw_put,
       mem0_controller$RDY_slave_b_drop,
       mem0_controller$RDY_slave_b_peek,
       mem0_controller$RDY_slave_r_drop,
       mem0_controller$RDY_slave_r_peek,
       mem0_controller$RDY_slave_w_put,
       mem0_controller$RDY_to_raw_mem_request_get,
       mem0_controller$RDY_to_raw_mem_response_put,
       mem0_controller$set_watch_tohost_watch_tohost,
       mem0_controller$slave_ar_canPut,
       mem0_controller$slave_aw_canPut,
       mem0_controller$slave_b_canPeek,
       mem0_controller$slave_r_canPeek,
       mem0_controller$slave_w_canPut;

  // ports of submodule mem0_controller_axi4_deburster_countWriteRspFF
  wire [7 : 0] mem0_controller_axi4_deburster_countWriteRspFF$D_IN,
	       mem0_controller_axi4_deburster_countWriteRspFF$D_OUT;
  wire mem0_controller_axi4_deburster_countWriteRspFF$CLR,
       mem0_controller_axi4_deburster_countWriteRspFF$DEQ,
       mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_countWriteRspFF$ENQ,
       mem0_controller_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_arff$D_IN,
		mem0_controller_axi4_deburster_inShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_arff$CLR,
       mem0_controller_axi4_deburster_inShim_arff$DEQ,
       mem0_controller_axi4_deburster_inShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_arff$ENQ,
       mem0_controller_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_awff$D_IN,
		mem0_controller_axi4_deburster_inShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_awff$CLR,
       mem0_controller_axi4_deburster_inShim_awff$DEQ,
       mem0_controller_axi4_deburster_inShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_awff$ENQ,
       mem0_controller_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_inShim_bff$D_IN,
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_bff$CLR,
       mem0_controller_axi4_deburster_inShim_bff$DEQ,
       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_bff$ENQ,
       mem0_controller_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_rff
  wire [73 : 0] mem0_controller_axi4_deburster_inShim_rff$D_IN,
		mem0_controller_axi4_deburster_inShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_rff$CLR,
       mem0_controller_axi4_deburster_inShim_rff$DEQ,
       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_rff$ENQ,
       mem0_controller_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_wff
  wire [72 : 0] mem0_controller_axi4_deburster_inShim_wff$D_IN,
		mem0_controller_axi4_deburster_inShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_wff$CLR,
       mem0_controller_axi4_deburster_inShim_wff$DEQ,
       mem0_controller_axi4_deburster_inShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_wff$ENQ,
       mem0_controller_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_lastReadRspFF
  wire mem0_controller_axi4_deburster_lastReadRspFF$CLR,
       mem0_controller_axi4_deburster_lastReadRspFF$DEQ,
       mem0_controller_axi4_deburster_lastReadRspFF$D_IN,
       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT,
       mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_lastReadRspFF$ENQ,
       mem0_controller_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_arff$D_IN,
		mem0_controller_axi4_deburster_outShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_arff$CLR,
       mem0_controller_axi4_deburster_outShim_arff$DEQ,
       mem0_controller_axi4_deburster_outShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_arff$ENQ,
       mem0_controller_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_awff$D_IN,
		mem0_controller_axi4_deburster_outShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_awff$CLR,
       mem0_controller_axi4_deburster_outShim_awff$DEQ,
       mem0_controller_axi4_deburster_outShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_awff$ENQ,
       mem0_controller_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_outShim_bff$D_IN,
	       mem0_controller_axi4_deburster_outShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_bff$CLR,
       mem0_controller_axi4_deburster_outShim_bff$DEQ,
       mem0_controller_axi4_deburster_outShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_bff$ENQ,
       mem0_controller_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_rff
  wire [73 : 0] mem0_controller_axi4_deburster_outShim_rff$D_IN,
		mem0_controller_axi4_deburster_outShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_rff$CLR,
       mem0_controller_axi4_deburster_outShim_rff$DEQ,
       mem0_controller_axi4_deburster_outShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_rff$ENQ,
       mem0_controller_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_wff
  wire [72 : 0] mem0_controller_axi4_deburster_outShim_wff$D_IN,
		mem0_controller_axi4_deburster_outShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_wff$CLR,
       mem0_controller_axi4_deburster_outShim_wff$DEQ,
       mem0_controller_axi4_deburster_outShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_wff$ENQ,
       mem0_controller_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_arff
  reg [99 : 0] s_otherPeripheralsPortShim_arff$D_IN;
  wire s_otherPeripheralsPortShim_arff$CLR,
       s_otherPeripheralsPortShim_arff$DEQ,
       s_otherPeripheralsPortShim_arff$ENQ,
       s_otherPeripheralsPortShim_arff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_awff
  reg [99 : 0] s_otherPeripheralsPortShim_awff$D_IN;
  wire s_otherPeripheralsPortShim_awff$CLR,
       s_otherPeripheralsPortShim_awff$DEQ,
       s_otherPeripheralsPortShim_awff$ENQ,
       s_otherPeripheralsPortShim_awff$FULL_N;

  // ports of submodule s_otherPeripheralsPortShim_bff
  wire [8 : 0] s_otherPeripheralsPortShim_bff$D_IN,
	       s_otherPeripheralsPortShim_bff$D_OUT;
  wire s_otherPeripheralsPortShim_bff$CLR,
       s_otherPeripheralsPortShim_bff$DEQ,
       s_otherPeripheralsPortShim_bff$EMPTY_N,
       s_otherPeripheralsPortShim_bff$ENQ;

  // ports of submodule s_otherPeripheralsPortShim_rff
  wire [73 : 0] s_otherPeripheralsPortShim_rff$D_IN,
		s_otherPeripheralsPortShim_rff$D_OUT;
  wire s_otherPeripheralsPortShim_rff$CLR,
       s_otherPeripheralsPortShim_rff$DEQ,
       s_otherPeripheralsPortShim_rff$EMPTY_N,
       s_otherPeripheralsPortShim_rff$ENQ;

  // ports of submodule s_otherPeripheralsPortShim_wff
  reg [72 : 0] s_otherPeripheralsPortShim_wff$D_IN;
  wire s_otherPeripheralsPortShim_wff$CLR,
       s_otherPeripheralsPortShim_wff$DEQ,
       s_otherPeripheralsPortShim_wff$ENQ,
       s_otherPeripheralsPortShim_wff$FULL_N;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_boot_rom_addr_range,
		 soc_map$m_mem0_controller_addr_range,
		 soc_map$m_other_peripherals_addr_range,
		 soc_map$m_uart0_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule uart0
  wire [99 : 0] uart0$slave_ar_put_val, uart0$slave_aw_put_val;
  wire [73 : 0] uart0$slave_r_peek;
  wire [72 : 0] uart0$slave_w_put_val;
  wire [63 : 0] uart0$set_addr_map_addr_base, uart0$set_addr_map_addr_lim;
  wire [8 : 0] uart0$slave_b_peek;
  wire [7 : 0] uart0$get_to_console_get, uart0$put_from_console_put;
  wire uart0$EN_get_to_console_get,
       uart0$EN_put_from_console_put,
       uart0$EN_server_reset_request_put,
       uart0$EN_server_reset_response_get,
       uart0$EN_set_addr_map,
       uart0$EN_slave_ar_put,
       uart0$EN_slave_aw_put,
       uart0$EN_slave_b_drop,
       uart0$EN_slave_r_drop,
       uart0$EN_slave_w_put,
       uart0$RDY_get_to_console_get,
       uart0$RDY_put_from_console_put,
       uart0$RDY_server_reset_request_put,
       uart0$RDY_server_reset_response_get,
       uart0$RDY_slave_ar_put,
       uart0$RDY_slave_aw_put,
       uart0$RDY_slave_b_drop,
       uart0$RDY_slave_b_peek,
       uart0$RDY_slave_r_drop,
       uart0$RDY_slave_r_peek,
       uart0$RDY_slave_w_put,
       uart0$intr,
       uart0$slave_ar_canPut,
       uart0$slave_aw_canPut,
       uart0$slave_b_canPeek,
       uart0$slave_r_canPeek,
       uart0$slave_w_canPut;

  // rule scheduling signals
  wire CAN_FIRE_RL_boot_rom_axi4_deburster_consume_bresp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp,
       CAN_FIRE_RL_bus_1_arbitrate,
       CAN_FIRE_RL_bus_1_arbitrate_1,
       CAN_FIRE_RL_bus_1_arbitration_fail,
       CAN_FIRE_RL_bus_1_arbitration_fail_1,
       CAN_FIRE_RL_bus_1_arbitration_fail_2,
       CAN_FIRE_RL_bus_1_arbitration_fail_3,
       CAN_FIRE_RL_bus_1_arbitration_fail_4,
       CAN_FIRE_RL_bus_1_arbitration_fail_5,
       CAN_FIRE_RL_bus_1_arbitration_fail_6,
       CAN_FIRE_RL_bus_1_dflt_output_selected,
       CAN_FIRE_RL_bus_1_input_first_flit,
       CAN_FIRE_RL_bus_1_input_first_flit_1,
       CAN_FIRE_RL_bus_1_input_first_flit_2,
       CAN_FIRE_RL_bus_1_input_first_flit_3,
       CAN_FIRE_RL_bus_1_input_first_flit_4,
       CAN_FIRE_RL_bus_1_input_first_flit_5,
       CAN_FIRE_RL_bus_1_input_first_flit_6,
       CAN_FIRE_RL_bus_1_input_follow_flit,
       CAN_FIRE_RL_bus_1_input_follow_flit_1,
       CAN_FIRE_RL_bus_1_input_follow_flit_2,
       CAN_FIRE_RL_bus_1_input_follow_flit_3,
       CAN_FIRE_RL_bus_1_input_follow_flit_4,
       CAN_FIRE_RL_bus_1_input_follow_flit_5,
       CAN_FIRE_RL_bus_1_input_follow_flit_6,
       CAN_FIRE_RL_bus_1_legal_destination_fail_2,
       CAN_FIRE_RL_bus_1_legal_destination_fail_3,
       CAN_FIRE_RL_bus_1_legal_destination_fail_4,
       CAN_FIRE_RL_bus_1_legal_destination_fail_5,
       CAN_FIRE_RL_bus_1_legal_destination_fail_6,
       CAN_FIRE_RL_bus_1_output_selected,
       CAN_FIRE_RL_bus_1_output_selected_1,
       CAN_FIRE_RL_bus_1_output_selected_2,
       CAN_FIRE_RL_bus_1_output_selected_3,
       CAN_FIRE_RL_bus_1_output_selected_4,
       CAN_FIRE_RL_bus_1_output_selected_5,
       CAN_FIRE_RL_bus_1_set_dflt_output_canPut_wire,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_1,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_2,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_3,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_4,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_5,
       CAN_FIRE_RL_bus_1_set_input_canPeek_wire_6,
       CAN_FIRE_RL_bus_1_set_input_peek_wires,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_1,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_2,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_3,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_4,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_5,
       CAN_FIRE_RL_bus_1_set_input_peek_wires_6,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_1,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_2,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_3,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_4,
       CAN_FIRE_RL_bus_1_set_output_canPut_wire_5,
       CAN_FIRE_RL_bus_arbitrate,
       CAN_FIRE_RL_bus_arbitrate_1,
       CAN_FIRE_RL_bus_arbitration_fail,
       CAN_FIRE_RL_bus_arbitration_fail_1,
       CAN_FIRE_RL_bus_arbitration_fail_2,
       CAN_FIRE_RL_bus_arbitration_fail_3,
       CAN_FIRE_RL_bus_arbitration_fail_4,
       CAN_FIRE_RL_bus_arbitration_fail_5,
       CAN_FIRE_RL_bus_arbitration_fail_6,
       CAN_FIRE_RL_bus_dflt_output_selected,
       CAN_FIRE_RL_bus_input_first_flit,
       CAN_FIRE_RL_bus_input_first_flit_1,
       CAN_FIRE_RL_bus_input_first_flit_2,
       CAN_FIRE_RL_bus_input_first_flit_3,
       CAN_FIRE_RL_bus_input_first_flit_4,
       CAN_FIRE_RL_bus_input_first_flit_5,
       CAN_FIRE_RL_bus_input_first_flit_6,
       CAN_FIRE_RL_bus_input_follow_flit,
       CAN_FIRE_RL_bus_input_follow_flit_1,
       CAN_FIRE_RL_bus_input_follow_flit_2,
       CAN_FIRE_RL_bus_input_follow_flit_3,
       CAN_FIRE_RL_bus_input_follow_flit_4,
       CAN_FIRE_RL_bus_input_follow_flit_5,
       CAN_FIRE_RL_bus_input_follow_flit_6,
       CAN_FIRE_RL_bus_legal_destination_fail_2,
       CAN_FIRE_RL_bus_legal_destination_fail_3,
       CAN_FIRE_RL_bus_legal_destination_fail_4,
       CAN_FIRE_RL_bus_legal_destination_fail_5,
       CAN_FIRE_RL_bus_legal_destination_fail_6,
       CAN_FIRE_RL_bus_merged_0_awFlit,
       CAN_FIRE_RL_bus_merged_0_awug_doDrop,
       CAN_FIRE_RL_bus_merged_0_awug_setCanPeek,
       CAN_FIRE_RL_bus_merged_0_awug_setPeek,
       CAN_FIRE_RL_bus_merged_0_awug_warnDoDrop,
       CAN_FIRE_RL_bus_merged_0_genFirst,
       CAN_FIRE_RL_bus_merged_0_genOther,
       CAN_FIRE_RL_bus_merged_0_passFlit,
       CAN_FIRE_RL_bus_merged_0_wFlit,
       CAN_FIRE_RL_bus_merged_0_wug_doDrop,
       CAN_FIRE_RL_bus_merged_0_wug_setCanPeek,
       CAN_FIRE_RL_bus_merged_0_wug_setPeek,
       CAN_FIRE_RL_bus_merged_0_wug_warnDoDrop,
       CAN_FIRE_RL_bus_merged_1_awFlit,
       CAN_FIRE_RL_bus_merged_1_awug_doDrop,
       CAN_FIRE_RL_bus_merged_1_awug_setCanPeek,
       CAN_FIRE_RL_bus_merged_1_awug_setPeek,
       CAN_FIRE_RL_bus_merged_1_awug_warnDoDrop,
       CAN_FIRE_RL_bus_merged_1_genFirst,
       CAN_FIRE_RL_bus_merged_1_genOther,
       CAN_FIRE_RL_bus_merged_1_passFlit,
       CAN_FIRE_RL_bus_merged_1_wFlit,
       CAN_FIRE_RL_bus_merged_1_wug_doDrop,
       CAN_FIRE_RL_bus_merged_1_wug_setCanPeek,
       CAN_FIRE_RL_bus_merged_1_wug_setPeek,
       CAN_FIRE_RL_bus_merged_1_wug_warnDoDrop,
       CAN_FIRE_RL_bus_output_selected,
       CAN_FIRE_RL_bus_output_selected_1,
       CAN_FIRE_RL_bus_output_selected_2,
       CAN_FIRE_RL_bus_output_selected_3,
       CAN_FIRE_RL_bus_output_selected_4,
       CAN_FIRE_RL_bus_output_selected_5,
       CAN_FIRE_RL_bus_set_dflt_output_canPut_wire,
       CAN_FIRE_RL_bus_set_input_canPeek_wire,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_1,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_2,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_3,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_4,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_5,
       CAN_FIRE_RL_bus_set_input_canPeek_wire_6,
       CAN_FIRE_RL_bus_set_input_peek_wires,
       CAN_FIRE_RL_bus_set_input_peek_wires_1,
       CAN_FIRE_RL_bus_set_input_peek_wires_2,
       CAN_FIRE_RL_bus_set_input_peek_wires_3,
       CAN_FIRE_RL_bus_set_input_peek_wires_4,
       CAN_FIRE_RL_bus_set_input_peek_wires_5,
       CAN_FIRE_RL_bus_set_input_peek_wires_6,
       CAN_FIRE_RL_bus_set_output_canPut_wire,
       CAN_FIRE_RL_bus_set_output_canPut_wire_1,
       CAN_FIRE_RL_bus_set_output_canPut_wire_2,
       CAN_FIRE_RL_bus_set_output_canPut_wire_3,
       CAN_FIRE_RL_bus_set_output_canPut_wire_4,
       CAN_FIRE_RL_bus_set_output_canPut_wire_5,
       CAN_FIRE_RL_bus_split_0_awug_doPut,
       CAN_FIRE_RL_bus_split_0_awug_setCanPut,
       CAN_FIRE_RL_bus_split_0_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_0_putFirst,
       CAN_FIRE_RL_bus_split_0_putOther,
       CAN_FIRE_RL_bus_split_0_wug_doPut,
       CAN_FIRE_RL_bus_split_0_wug_setCanPut,
       CAN_FIRE_RL_bus_split_0_wug_warnDoPut,
       CAN_FIRE_RL_bus_split_1_awug_doPut,
       CAN_FIRE_RL_bus_split_1_awug_setCanPut,
       CAN_FIRE_RL_bus_split_1_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_1_putFirst,
       CAN_FIRE_RL_bus_split_1_putOther,
       CAN_FIRE_RL_bus_split_1_wug_doPut,
       CAN_FIRE_RL_bus_split_1_wug_setCanPut,
       CAN_FIRE_RL_bus_split_1_wug_warnDoPut,
       CAN_FIRE_RL_bus_split_2_awug_doPut,
       CAN_FIRE_RL_bus_split_2_awug_setCanPut,
       CAN_FIRE_RL_bus_split_2_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_2_putFirst,
       CAN_FIRE_RL_bus_split_2_putOther,
       CAN_FIRE_RL_bus_split_2_wug_doPut,
       CAN_FIRE_RL_bus_split_2_wug_setCanPut,
       CAN_FIRE_RL_bus_split_2_wug_warnDoPut,
       CAN_FIRE_RL_bus_split_3_awug_doPut,
       CAN_FIRE_RL_bus_split_3_awug_setCanPut,
       CAN_FIRE_RL_bus_split_3_awug_warnDoPut,
       CAN_FIRE_RL_bus_split_3_putFirst,
       CAN_FIRE_RL_bus_split_3_putOther,
       CAN_FIRE_RL_bus_split_3_wug_doPut,
       CAN_FIRE_RL_bus_split_3_wug_setCanPut,
       CAN_FIRE_RL_bus_split_3_wug_warnDoPut,
       CAN_FIRE_RL_connect,
       CAN_FIRE_RL_connect_1,
       CAN_FIRE_RL_connect_10,
       CAN_FIRE_RL_connect_11,
       CAN_FIRE_RL_connect_12,
       CAN_FIRE_RL_connect_13,
       CAN_FIRE_RL_connect_14,
       CAN_FIRE_RL_connect_15,
       CAN_FIRE_RL_connect_16,
       CAN_FIRE_RL_connect_17,
       CAN_FIRE_RL_connect_18,
       CAN_FIRE_RL_connect_19,
       CAN_FIRE_RL_connect_2,
       CAN_FIRE_RL_connect_3,
       CAN_FIRE_RL_connect_4,
       CAN_FIRE_RL_connect_5,
       CAN_FIRE_RL_connect_6,
       CAN_FIRE_RL_connect_7,
       CAN_FIRE_RL_connect_8,
       CAN_FIRE_RL_connect_9,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut,
       CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut,
       CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_setPeek,
       CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setCanPeek,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setPeek,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setCanPeek,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setPeek,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_setCanPut,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_setCanPut,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setCanPeek,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setPeek,
       CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp,
       CAN_FIRE_RL_rl_connect_external_interrupt_requests,
       CAN_FIRE_RL_rl_reset_complete_initial,
       CAN_FIRE_RL_rl_reset_start_initial,
       CAN_FIRE_RL_test_sig_arSig_snk_doPut,
       CAN_FIRE_RL_test_sig_arSig_snk_setCanPut,
       CAN_FIRE_RL_test_sig_arSig_snk_warnDoPut,
       CAN_FIRE_RL_test_sig_awSig_snk_doPut,
       CAN_FIRE_RL_test_sig_awSig_snk_setCanPut,
       CAN_FIRE_RL_test_sig_awSig_snk_warnDoPut,
       CAN_FIRE_RL_test_sig_bSig_src_doDrop,
       CAN_FIRE_RL_test_sig_bSig_src_setCanPeek,
       CAN_FIRE_RL_test_sig_bSig_src_setPeek,
       CAN_FIRE_RL_test_sig_bSig_src_warnDoDrop,
       CAN_FIRE_RL_test_sig_rSig_src_doDrop,
       CAN_FIRE_RL_test_sig_rSig_src_setCanPeek,
       CAN_FIRE_RL_test_sig_rSig_src_setPeek,
       CAN_FIRE_RL_test_sig_rSig_src_warnDoDrop,
       CAN_FIRE_RL_test_sig_wSig_snk_doPut,
       CAN_FIRE_RL_test_sig_wSig_snk_setCanPut,
       CAN_FIRE_RL_test_sig_wSig_snk_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_1_doPut,
       CAN_FIRE_RL_ug_snk_1_1_setCanPut,
       CAN_FIRE_RL_ug_snk_1_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_2_setCanPut,
       CAN_FIRE_RL_ug_snk_1_3_doPut,
       CAN_FIRE_RL_ug_snk_1_3_setCanPut,
       CAN_FIRE_RL_ug_snk_1_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_4_setCanPut,
       CAN_FIRE_RL_ug_snk_1_doPut,
       CAN_FIRE_RL_ug_snk_1_doPut_1,
       CAN_FIRE_RL_ug_snk_1_setCanPut,
       CAN_FIRE_RL_ug_snk_1_setCanPut_1,
       CAN_FIRE_RL_ug_snk_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_1_warnDoPut_1,
       CAN_FIRE_RL_ug_snk_2_1_doPut,
       CAN_FIRE_RL_ug_snk_2_1_setCanPut,
       CAN_FIRE_RL_ug_snk_2_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_2_doPut,
       CAN_FIRE_RL_ug_snk_2_2_setCanPut,
       CAN_FIRE_RL_ug_snk_2_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_3_doPut,
       CAN_FIRE_RL_ug_snk_2_3_setCanPut,
       CAN_FIRE_RL_ug_snk_2_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_4_doPut,
       CAN_FIRE_RL_ug_snk_2_4_setCanPut,
       CAN_FIRE_RL_ug_snk_2_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_doPut,
       CAN_FIRE_RL_ug_snk_2_doPut_1,
       CAN_FIRE_RL_ug_snk_2_setCanPut,
       CAN_FIRE_RL_ug_snk_2_setCanPut_1,
       CAN_FIRE_RL_ug_snk_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_2_warnDoPut_1,
       CAN_FIRE_RL_ug_snk_3_1_doPut,
       CAN_FIRE_RL_ug_snk_3_1_setCanPut,
       CAN_FIRE_RL_ug_snk_3_1_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_2_doPut,
       CAN_FIRE_RL_ug_snk_3_2_setCanPut,
       CAN_FIRE_RL_ug_snk_3_2_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_3_doPut,
       CAN_FIRE_RL_ug_snk_3_3_setCanPut,
       CAN_FIRE_RL_ug_snk_3_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_4_doPut,
       CAN_FIRE_RL_ug_snk_3_4_setCanPut,
       CAN_FIRE_RL_ug_snk_3_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_doPut,
       CAN_FIRE_RL_ug_snk_3_doPut_1,
       CAN_FIRE_RL_ug_snk_3_setCanPut,
       CAN_FIRE_RL_ug_snk_3_setCanPut_1,
       CAN_FIRE_RL_ug_snk_3_warnDoPut,
       CAN_FIRE_RL_ug_snk_3_warnDoPut_1,
       CAN_FIRE_RL_ug_snk_4_doPut,
       CAN_FIRE_RL_ug_snk_4_setCanPut,
       CAN_FIRE_RL_ug_snk_4_warnDoPut,
       CAN_FIRE_RL_ug_snk_doPut,
       CAN_FIRE_RL_ug_snk_setCanPut,
       CAN_FIRE_RL_ug_snk_warnDoPut,
       CAN_FIRE_RL_ug_src_1_1_setCanPeek,
       CAN_FIRE_RL_ug_src_1_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_2_doDrop,
       CAN_FIRE_RL_ug_src_1_2_setCanPeek,
       CAN_FIRE_RL_ug_src_1_2_setPeek,
       CAN_FIRE_RL_ug_src_1_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_3_setCanPeek,
       CAN_FIRE_RL_ug_src_1_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_4_doDrop,
       CAN_FIRE_RL_ug_src_1_4_setCanPeek,
       CAN_FIRE_RL_ug_src_1_4_setPeek,
       CAN_FIRE_RL_ug_src_1_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_doDrop,
       CAN_FIRE_RL_ug_src_1_setCanPeek,
       CAN_FIRE_RL_ug_src_1_setCanPeek_1,
       CAN_FIRE_RL_ug_src_1_setPeek,
       CAN_FIRE_RL_ug_src_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_1_warnDoDrop_1,
       CAN_FIRE_RL_ug_src_2_1_doDrop,
       CAN_FIRE_RL_ug_src_2_1_setCanPeek,
       CAN_FIRE_RL_ug_src_2_1_setPeek,
       CAN_FIRE_RL_ug_src_2_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_2_doDrop,
       CAN_FIRE_RL_ug_src_2_2_setCanPeek,
       CAN_FIRE_RL_ug_src_2_2_setPeek,
       CAN_FIRE_RL_ug_src_2_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_3_doDrop,
       CAN_FIRE_RL_ug_src_2_3_setCanPeek,
       CAN_FIRE_RL_ug_src_2_3_setPeek,
       CAN_FIRE_RL_ug_src_2_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_4_doDrop,
       CAN_FIRE_RL_ug_src_2_4_setCanPeek,
       CAN_FIRE_RL_ug_src_2_4_setPeek,
       CAN_FIRE_RL_ug_src_2_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_doDrop,
       CAN_FIRE_RL_ug_src_2_doDrop_1,
       CAN_FIRE_RL_ug_src_2_setCanPeek,
       CAN_FIRE_RL_ug_src_2_setCanPeek_1,
       CAN_FIRE_RL_ug_src_2_setPeek,
       CAN_FIRE_RL_ug_src_2_setPeek_1,
       CAN_FIRE_RL_ug_src_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_2_warnDoDrop_1,
       CAN_FIRE_RL_ug_src_3_1_doDrop,
       CAN_FIRE_RL_ug_src_3_1_setCanPeek,
       CAN_FIRE_RL_ug_src_3_1_setPeek,
       CAN_FIRE_RL_ug_src_3_1_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_2_doDrop,
       CAN_FIRE_RL_ug_src_3_2_setCanPeek,
       CAN_FIRE_RL_ug_src_3_2_setPeek,
       CAN_FIRE_RL_ug_src_3_2_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_3_doDrop,
       CAN_FIRE_RL_ug_src_3_3_setCanPeek,
       CAN_FIRE_RL_ug_src_3_3_setPeek,
       CAN_FIRE_RL_ug_src_3_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_4_doDrop,
       CAN_FIRE_RL_ug_src_3_4_setCanPeek,
       CAN_FIRE_RL_ug_src_3_4_setPeek,
       CAN_FIRE_RL_ug_src_3_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_doDrop,
       CAN_FIRE_RL_ug_src_3_doDrop_1,
       CAN_FIRE_RL_ug_src_3_setCanPeek,
       CAN_FIRE_RL_ug_src_3_setCanPeek_1,
       CAN_FIRE_RL_ug_src_3_setPeek,
       CAN_FIRE_RL_ug_src_3_setPeek_1,
       CAN_FIRE_RL_ug_src_3_warnDoDrop,
       CAN_FIRE_RL_ug_src_3_warnDoDrop_1,
       CAN_FIRE_RL_ug_src_4_doDrop,
       CAN_FIRE_RL_ug_src_4_setCanPeek,
       CAN_FIRE_RL_ug_src_4_setPeek,
       CAN_FIRE_RL_ug_src_4_warnDoDrop,
       CAN_FIRE_RL_ug_src_doDrop,
       CAN_FIRE_RL_ug_src_setCanPeek,
       CAN_FIRE_RL_ug_src_setPeek,
       CAN_FIRE_RL_ug_src_warnDoDrop,
       CAN_FIRE___me_check_14,
       CAN_FIRE___me_check_293,
       CAN_FIRE___me_check_295,
       CAN_FIRE___me_check_297,
       CAN_FIRE___me_check_325,
       CAN_FIRE___me_check_327,
       CAN_FIRE___me_check_329,
       CAN_FIRE___me_check_331,
       CAN_FIRE___me_check_333,
       CAN_FIRE___me_check_335,
       CAN_FIRE___me_check_349,
       CAN_FIRE___me_check_351,
       CAN_FIRE___me_check_353,
       CAN_FIRE___me_check_381,
       CAN_FIRE___me_check_383,
       CAN_FIRE___me_check_385,
       CAN_FIRE___me_check_387,
       CAN_FIRE___me_check_389,
       CAN_FIRE___me_check_391,
       CAN_FIRE___me_check_4,
       CAN_FIRE_cms_ifc_halt_cpu,
       CAN_FIRE_core_dmem_post_fabric_ar_arready,
       CAN_FIRE_core_dmem_post_fabric_aw_awready,
       CAN_FIRE_core_dmem_post_fabric_b_bflit,
       CAN_FIRE_core_dmem_post_fabric_r_rflit,
       CAN_FIRE_core_dmem_post_fabric_w_wready,
       CAN_FIRE_core_dmem_pre_fabric_ar_arready,
       CAN_FIRE_core_dmem_pre_fabric_aw_awready,
       CAN_FIRE_core_dmem_pre_fabric_b_bflit,
       CAN_FIRE_core_dmem_pre_fabric_r_rflit,
       CAN_FIRE_core_dmem_pre_fabric_w_wready,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_other_peripherals_ar_put,
       CAN_FIRE_other_peripherals_aw_put,
       CAN_FIRE_other_peripherals_b_drop,
       CAN_FIRE_other_peripherals_r_drop,
       CAN_FIRE_other_peripherals_w_put,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_boot_rom_axi4_deburster_consume_bresp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_boot_rom_axi4_deburster_produce_bresp,
       WILL_FIRE_RL_bus_1_arbitrate,
       WILL_FIRE_RL_bus_1_arbitrate_1,
       WILL_FIRE_RL_bus_1_arbitration_fail,
       WILL_FIRE_RL_bus_1_arbitration_fail_1,
       WILL_FIRE_RL_bus_1_arbitration_fail_2,
       WILL_FIRE_RL_bus_1_arbitration_fail_3,
       WILL_FIRE_RL_bus_1_arbitration_fail_4,
       WILL_FIRE_RL_bus_1_arbitration_fail_5,
       WILL_FIRE_RL_bus_1_arbitration_fail_6,
       WILL_FIRE_RL_bus_1_dflt_output_selected,
       WILL_FIRE_RL_bus_1_input_first_flit,
       WILL_FIRE_RL_bus_1_input_first_flit_1,
       WILL_FIRE_RL_bus_1_input_first_flit_2,
       WILL_FIRE_RL_bus_1_input_first_flit_3,
       WILL_FIRE_RL_bus_1_input_first_flit_4,
       WILL_FIRE_RL_bus_1_input_first_flit_5,
       WILL_FIRE_RL_bus_1_input_first_flit_6,
       WILL_FIRE_RL_bus_1_input_follow_flit,
       WILL_FIRE_RL_bus_1_input_follow_flit_1,
       WILL_FIRE_RL_bus_1_input_follow_flit_2,
       WILL_FIRE_RL_bus_1_input_follow_flit_3,
       WILL_FIRE_RL_bus_1_input_follow_flit_4,
       WILL_FIRE_RL_bus_1_input_follow_flit_5,
       WILL_FIRE_RL_bus_1_input_follow_flit_6,
       WILL_FIRE_RL_bus_1_legal_destination_fail_2,
       WILL_FIRE_RL_bus_1_legal_destination_fail_3,
       WILL_FIRE_RL_bus_1_legal_destination_fail_4,
       WILL_FIRE_RL_bus_1_legal_destination_fail_5,
       WILL_FIRE_RL_bus_1_legal_destination_fail_6,
       WILL_FIRE_RL_bus_1_output_selected,
       WILL_FIRE_RL_bus_1_output_selected_1,
       WILL_FIRE_RL_bus_1_output_selected_2,
       WILL_FIRE_RL_bus_1_output_selected_3,
       WILL_FIRE_RL_bus_1_output_selected_4,
       WILL_FIRE_RL_bus_1_output_selected_5,
       WILL_FIRE_RL_bus_1_set_dflt_output_canPut_wire,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_1,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_2,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_3,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_4,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_5,
       WILL_FIRE_RL_bus_1_set_input_canPeek_wire_6,
       WILL_FIRE_RL_bus_1_set_input_peek_wires,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_1,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_2,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_3,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_4,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_5,
       WILL_FIRE_RL_bus_1_set_input_peek_wires_6,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_1,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_2,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_3,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_4,
       WILL_FIRE_RL_bus_1_set_output_canPut_wire_5,
       WILL_FIRE_RL_bus_arbitrate,
       WILL_FIRE_RL_bus_arbitrate_1,
       WILL_FIRE_RL_bus_arbitration_fail,
       WILL_FIRE_RL_bus_arbitration_fail_1,
       WILL_FIRE_RL_bus_arbitration_fail_2,
       WILL_FIRE_RL_bus_arbitration_fail_3,
       WILL_FIRE_RL_bus_arbitration_fail_4,
       WILL_FIRE_RL_bus_arbitration_fail_5,
       WILL_FIRE_RL_bus_arbitration_fail_6,
       WILL_FIRE_RL_bus_dflt_output_selected,
       WILL_FIRE_RL_bus_input_first_flit,
       WILL_FIRE_RL_bus_input_first_flit_1,
       WILL_FIRE_RL_bus_input_first_flit_2,
       WILL_FIRE_RL_bus_input_first_flit_3,
       WILL_FIRE_RL_bus_input_first_flit_4,
       WILL_FIRE_RL_bus_input_first_flit_5,
       WILL_FIRE_RL_bus_input_first_flit_6,
       WILL_FIRE_RL_bus_input_follow_flit,
       WILL_FIRE_RL_bus_input_follow_flit_1,
       WILL_FIRE_RL_bus_input_follow_flit_2,
       WILL_FIRE_RL_bus_input_follow_flit_3,
       WILL_FIRE_RL_bus_input_follow_flit_4,
       WILL_FIRE_RL_bus_input_follow_flit_5,
       WILL_FIRE_RL_bus_input_follow_flit_6,
       WILL_FIRE_RL_bus_legal_destination_fail_2,
       WILL_FIRE_RL_bus_legal_destination_fail_3,
       WILL_FIRE_RL_bus_legal_destination_fail_4,
       WILL_FIRE_RL_bus_legal_destination_fail_5,
       WILL_FIRE_RL_bus_legal_destination_fail_6,
       WILL_FIRE_RL_bus_merged_0_awFlit,
       WILL_FIRE_RL_bus_merged_0_awug_doDrop,
       WILL_FIRE_RL_bus_merged_0_awug_setCanPeek,
       WILL_FIRE_RL_bus_merged_0_awug_setPeek,
       WILL_FIRE_RL_bus_merged_0_awug_warnDoDrop,
       WILL_FIRE_RL_bus_merged_0_genFirst,
       WILL_FIRE_RL_bus_merged_0_genOther,
       WILL_FIRE_RL_bus_merged_0_passFlit,
       WILL_FIRE_RL_bus_merged_0_wFlit,
       WILL_FIRE_RL_bus_merged_0_wug_doDrop,
       WILL_FIRE_RL_bus_merged_0_wug_setCanPeek,
       WILL_FIRE_RL_bus_merged_0_wug_setPeek,
       WILL_FIRE_RL_bus_merged_0_wug_warnDoDrop,
       WILL_FIRE_RL_bus_merged_1_awFlit,
       WILL_FIRE_RL_bus_merged_1_awug_doDrop,
       WILL_FIRE_RL_bus_merged_1_awug_setCanPeek,
       WILL_FIRE_RL_bus_merged_1_awug_setPeek,
       WILL_FIRE_RL_bus_merged_1_awug_warnDoDrop,
       WILL_FIRE_RL_bus_merged_1_genFirst,
       WILL_FIRE_RL_bus_merged_1_genOther,
       WILL_FIRE_RL_bus_merged_1_passFlit,
       WILL_FIRE_RL_bus_merged_1_wFlit,
       WILL_FIRE_RL_bus_merged_1_wug_doDrop,
       WILL_FIRE_RL_bus_merged_1_wug_setCanPeek,
       WILL_FIRE_RL_bus_merged_1_wug_setPeek,
       WILL_FIRE_RL_bus_merged_1_wug_warnDoDrop,
       WILL_FIRE_RL_bus_output_selected,
       WILL_FIRE_RL_bus_output_selected_1,
       WILL_FIRE_RL_bus_output_selected_2,
       WILL_FIRE_RL_bus_output_selected_3,
       WILL_FIRE_RL_bus_output_selected_4,
       WILL_FIRE_RL_bus_output_selected_5,
       WILL_FIRE_RL_bus_set_dflt_output_canPut_wire,
       WILL_FIRE_RL_bus_set_input_canPeek_wire,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_1,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_2,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_3,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_4,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_5,
       WILL_FIRE_RL_bus_set_input_canPeek_wire_6,
       WILL_FIRE_RL_bus_set_input_peek_wires,
       WILL_FIRE_RL_bus_set_input_peek_wires_1,
       WILL_FIRE_RL_bus_set_input_peek_wires_2,
       WILL_FIRE_RL_bus_set_input_peek_wires_3,
       WILL_FIRE_RL_bus_set_input_peek_wires_4,
       WILL_FIRE_RL_bus_set_input_peek_wires_5,
       WILL_FIRE_RL_bus_set_input_peek_wires_6,
       WILL_FIRE_RL_bus_set_output_canPut_wire,
       WILL_FIRE_RL_bus_set_output_canPut_wire_1,
       WILL_FIRE_RL_bus_set_output_canPut_wire_2,
       WILL_FIRE_RL_bus_set_output_canPut_wire_3,
       WILL_FIRE_RL_bus_set_output_canPut_wire_4,
       WILL_FIRE_RL_bus_set_output_canPut_wire_5,
       WILL_FIRE_RL_bus_split_0_awug_doPut,
       WILL_FIRE_RL_bus_split_0_awug_setCanPut,
       WILL_FIRE_RL_bus_split_0_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_0_putFirst,
       WILL_FIRE_RL_bus_split_0_putOther,
       WILL_FIRE_RL_bus_split_0_wug_doPut,
       WILL_FIRE_RL_bus_split_0_wug_setCanPut,
       WILL_FIRE_RL_bus_split_0_wug_warnDoPut,
       WILL_FIRE_RL_bus_split_1_awug_doPut,
       WILL_FIRE_RL_bus_split_1_awug_setCanPut,
       WILL_FIRE_RL_bus_split_1_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_1_putFirst,
       WILL_FIRE_RL_bus_split_1_putOther,
       WILL_FIRE_RL_bus_split_1_wug_doPut,
       WILL_FIRE_RL_bus_split_1_wug_setCanPut,
       WILL_FIRE_RL_bus_split_1_wug_warnDoPut,
       WILL_FIRE_RL_bus_split_2_awug_doPut,
       WILL_FIRE_RL_bus_split_2_awug_setCanPut,
       WILL_FIRE_RL_bus_split_2_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_2_putFirst,
       WILL_FIRE_RL_bus_split_2_putOther,
       WILL_FIRE_RL_bus_split_2_wug_doPut,
       WILL_FIRE_RL_bus_split_2_wug_setCanPut,
       WILL_FIRE_RL_bus_split_2_wug_warnDoPut,
       WILL_FIRE_RL_bus_split_3_awug_doPut,
       WILL_FIRE_RL_bus_split_3_awug_setCanPut,
       WILL_FIRE_RL_bus_split_3_awug_warnDoPut,
       WILL_FIRE_RL_bus_split_3_putFirst,
       WILL_FIRE_RL_bus_split_3_putOther,
       WILL_FIRE_RL_bus_split_3_wug_doPut,
       WILL_FIRE_RL_bus_split_3_wug_setCanPut,
       WILL_FIRE_RL_bus_split_3_wug_warnDoPut,
       WILL_FIRE_RL_connect,
       WILL_FIRE_RL_connect_1,
       WILL_FIRE_RL_connect_10,
       WILL_FIRE_RL_connect_11,
       WILL_FIRE_RL_connect_12,
       WILL_FIRE_RL_connect_13,
       WILL_FIRE_RL_connect_14,
       WILL_FIRE_RL_connect_15,
       WILL_FIRE_RL_connect_16,
       WILL_FIRE_RL_connect_17,
       WILL_FIRE_RL_connect_18,
       WILL_FIRE_RL_connect_19,
       WILL_FIRE_RL_connect_2,
       WILL_FIRE_RL_connect_3,
       WILL_FIRE_RL_connect_4,
       WILL_FIRE_RL_connect_5,
       WILL_FIRE_RL_connect_6,
       WILL_FIRE_RL_connect_7,
       WILL_FIRE_RL_connect_8,
       WILL_FIRE_RL_connect_9,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut,
       WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut,
       WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_setPeek,
       WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setCanPeek,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setPeek,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setCanPeek,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setPeek,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_setCanPut,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_setCanPut,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setCanPeek,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setPeek,
       WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp,
       WILL_FIRE_RL_rl_connect_external_interrupt_requests,
       WILL_FIRE_RL_rl_reset_complete_initial,
       WILL_FIRE_RL_rl_reset_start_initial,
       WILL_FIRE_RL_test_sig_arSig_snk_doPut,
       WILL_FIRE_RL_test_sig_arSig_snk_setCanPut,
       WILL_FIRE_RL_test_sig_arSig_snk_warnDoPut,
       WILL_FIRE_RL_test_sig_awSig_snk_doPut,
       WILL_FIRE_RL_test_sig_awSig_snk_setCanPut,
       WILL_FIRE_RL_test_sig_awSig_snk_warnDoPut,
       WILL_FIRE_RL_test_sig_bSig_src_doDrop,
       WILL_FIRE_RL_test_sig_bSig_src_setCanPeek,
       WILL_FIRE_RL_test_sig_bSig_src_setPeek,
       WILL_FIRE_RL_test_sig_bSig_src_warnDoDrop,
       WILL_FIRE_RL_test_sig_rSig_src_doDrop,
       WILL_FIRE_RL_test_sig_rSig_src_setCanPeek,
       WILL_FIRE_RL_test_sig_rSig_src_setPeek,
       WILL_FIRE_RL_test_sig_rSig_src_warnDoDrop,
       WILL_FIRE_RL_test_sig_wSig_snk_doPut,
       WILL_FIRE_RL_test_sig_wSig_snk_setCanPut,
       WILL_FIRE_RL_test_sig_wSig_snk_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_1_doPut,
       WILL_FIRE_RL_ug_snk_1_1_setCanPut,
       WILL_FIRE_RL_ug_snk_1_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_2_setCanPut,
       WILL_FIRE_RL_ug_snk_1_3_doPut,
       WILL_FIRE_RL_ug_snk_1_3_setCanPut,
       WILL_FIRE_RL_ug_snk_1_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_4_setCanPut,
       WILL_FIRE_RL_ug_snk_1_doPut,
       WILL_FIRE_RL_ug_snk_1_doPut_1,
       WILL_FIRE_RL_ug_snk_1_setCanPut,
       WILL_FIRE_RL_ug_snk_1_setCanPut_1,
       WILL_FIRE_RL_ug_snk_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_1_warnDoPut_1,
       WILL_FIRE_RL_ug_snk_2_1_doPut,
       WILL_FIRE_RL_ug_snk_2_1_setCanPut,
       WILL_FIRE_RL_ug_snk_2_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_2_doPut,
       WILL_FIRE_RL_ug_snk_2_2_setCanPut,
       WILL_FIRE_RL_ug_snk_2_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_3_doPut,
       WILL_FIRE_RL_ug_snk_2_3_setCanPut,
       WILL_FIRE_RL_ug_snk_2_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_4_doPut,
       WILL_FIRE_RL_ug_snk_2_4_setCanPut,
       WILL_FIRE_RL_ug_snk_2_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_doPut,
       WILL_FIRE_RL_ug_snk_2_doPut_1,
       WILL_FIRE_RL_ug_snk_2_setCanPut,
       WILL_FIRE_RL_ug_snk_2_setCanPut_1,
       WILL_FIRE_RL_ug_snk_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_2_warnDoPut_1,
       WILL_FIRE_RL_ug_snk_3_1_doPut,
       WILL_FIRE_RL_ug_snk_3_1_setCanPut,
       WILL_FIRE_RL_ug_snk_3_1_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_2_doPut,
       WILL_FIRE_RL_ug_snk_3_2_setCanPut,
       WILL_FIRE_RL_ug_snk_3_2_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_3_doPut,
       WILL_FIRE_RL_ug_snk_3_3_setCanPut,
       WILL_FIRE_RL_ug_snk_3_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_4_doPut,
       WILL_FIRE_RL_ug_snk_3_4_setCanPut,
       WILL_FIRE_RL_ug_snk_3_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_doPut,
       WILL_FIRE_RL_ug_snk_3_doPut_1,
       WILL_FIRE_RL_ug_snk_3_setCanPut,
       WILL_FIRE_RL_ug_snk_3_setCanPut_1,
       WILL_FIRE_RL_ug_snk_3_warnDoPut,
       WILL_FIRE_RL_ug_snk_3_warnDoPut_1,
       WILL_FIRE_RL_ug_snk_4_doPut,
       WILL_FIRE_RL_ug_snk_4_setCanPut,
       WILL_FIRE_RL_ug_snk_4_warnDoPut,
       WILL_FIRE_RL_ug_snk_doPut,
       WILL_FIRE_RL_ug_snk_setCanPut,
       WILL_FIRE_RL_ug_snk_warnDoPut,
       WILL_FIRE_RL_ug_src_1_1_setCanPeek,
       WILL_FIRE_RL_ug_src_1_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_2_doDrop,
       WILL_FIRE_RL_ug_src_1_2_setCanPeek,
       WILL_FIRE_RL_ug_src_1_2_setPeek,
       WILL_FIRE_RL_ug_src_1_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_3_setCanPeek,
       WILL_FIRE_RL_ug_src_1_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_4_doDrop,
       WILL_FIRE_RL_ug_src_1_4_setCanPeek,
       WILL_FIRE_RL_ug_src_1_4_setPeek,
       WILL_FIRE_RL_ug_src_1_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_doDrop,
       WILL_FIRE_RL_ug_src_1_setCanPeek,
       WILL_FIRE_RL_ug_src_1_setCanPeek_1,
       WILL_FIRE_RL_ug_src_1_setPeek,
       WILL_FIRE_RL_ug_src_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_1_warnDoDrop_1,
       WILL_FIRE_RL_ug_src_2_1_doDrop,
       WILL_FIRE_RL_ug_src_2_1_setCanPeek,
       WILL_FIRE_RL_ug_src_2_1_setPeek,
       WILL_FIRE_RL_ug_src_2_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_2_doDrop,
       WILL_FIRE_RL_ug_src_2_2_setCanPeek,
       WILL_FIRE_RL_ug_src_2_2_setPeek,
       WILL_FIRE_RL_ug_src_2_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_3_doDrop,
       WILL_FIRE_RL_ug_src_2_3_setCanPeek,
       WILL_FIRE_RL_ug_src_2_3_setPeek,
       WILL_FIRE_RL_ug_src_2_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_4_doDrop,
       WILL_FIRE_RL_ug_src_2_4_setCanPeek,
       WILL_FIRE_RL_ug_src_2_4_setPeek,
       WILL_FIRE_RL_ug_src_2_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_doDrop,
       WILL_FIRE_RL_ug_src_2_doDrop_1,
       WILL_FIRE_RL_ug_src_2_setCanPeek,
       WILL_FIRE_RL_ug_src_2_setCanPeek_1,
       WILL_FIRE_RL_ug_src_2_setPeek,
       WILL_FIRE_RL_ug_src_2_setPeek_1,
       WILL_FIRE_RL_ug_src_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_2_warnDoDrop_1,
       WILL_FIRE_RL_ug_src_3_1_doDrop,
       WILL_FIRE_RL_ug_src_3_1_setCanPeek,
       WILL_FIRE_RL_ug_src_3_1_setPeek,
       WILL_FIRE_RL_ug_src_3_1_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_2_doDrop,
       WILL_FIRE_RL_ug_src_3_2_setCanPeek,
       WILL_FIRE_RL_ug_src_3_2_setPeek,
       WILL_FIRE_RL_ug_src_3_2_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_3_doDrop,
       WILL_FIRE_RL_ug_src_3_3_setCanPeek,
       WILL_FIRE_RL_ug_src_3_3_setPeek,
       WILL_FIRE_RL_ug_src_3_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_4_doDrop,
       WILL_FIRE_RL_ug_src_3_4_setCanPeek,
       WILL_FIRE_RL_ug_src_3_4_setPeek,
       WILL_FIRE_RL_ug_src_3_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_doDrop,
       WILL_FIRE_RL_ug_src_3_doDrop_1,
       WILL_FIRE_RL_ug_src_3_setCanPeek,
       WILL_FIRE_RL_ug_src_3_setCanPeek_1,
       WILL_FIRE_RL_ug_src_3_setPeek,
       WILL_FIRE_RL_ug_src_3_setPeek_1,
       WILL_FIRE_RL_ug_src_3_warnDoDrop,
       WILL_FIRE_RL_ug_src_3_warnDoDrop_1,
       WILL_FIRE_RL_ug_src_4_doDrop,
       WILL_FIRE_RL_ug_src_4_setCanPeek,
       WILL_FIRE_RL_ug_src_4_setPeek,
       WILL_FIRE_RL_ug_src_4_warnDoDrop,
       WILL_FIRE_RL_ug_src_doDrop,
       WILL_FIRE_RL_ug_src_setCanPeek,
       WILL_FIRE_RL_ug_src_setPeek,
       WILL_FIRE_RL_ug_src_warnDoDrop,
       WILL_FIRE___me_check_14,
       WILL_FIRE___me_check_293,
       WILL_FIRE___me_check_295,
       WILL_FIRE___me_check_297,
       WILL_FIRE___me_check_325,
       WILL_FIRE___me_check_327,
       WILL_FIRE___me_check_329,
       WILL_FIRE___me_check_331,
       WILL_FIRE___me_check_333,
       WILL_FIRE___me_check_335,
       WILL_FIRE___me_check_349,
       WILL_FIRE___me_check_351,
       WILL_FIRE___me_check_353,
       WILL_FIRE___me_check_381,
       WILL_FIRE___me_check_383,
       WILL_FIRE___me_check_385,
       WILL_FIRE___me_check_387,
       WILL_FIRE___me_check_389,
       WILL_FIRE___me_check_391,
       WILL_FIRE___me_check_4,
       WILL_FIRE_cms_ifc_halt_cpu,
       WILL_FIRE_core_dmem_post_fabric_ar_arready,
       WILL_FIRE_core_dmem_post_fabric_aw_awready,
       WILL_FIRE_core_dmem_post_fabric_b_bflit,
       WILL_FIRE_core_dmem_post_fabric_r_rflit,
       WILL_FIRE_core_dmem_post_fabric_w_wready,
       WILL_FIRE_core_dmem_pre_fabric_ar_arready,
       WILL_FIRE_core_dmem_pre_fabric_aw_awready,
       WILL_FIRE_core_dmem_pre_fabric_b_bflit,
       WILL_FIRE_core_dmem_pre_fabric_r_rflit,
       WILL_FIRE_core_dmem_pre_fabric_w_wready,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_other_peripherals_ar_put,
       WILL_FIRE_other_peripherals_aw_put,
       WILL_FIRE_other_peripherals_b_drop,
       WILL_FIRE_other_peripherals_r_drop,
       WILL_FIRE_other_peripherals_w_put,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  wire [173 : 0] MUX_bus_toDfltOutput$wset_1__VAL_1,
		 MUX_bus_toDfltOutput$wset_1__VAL_2;
  wire [99 : 0] MUX_bus_1_toDfltOutput$wset_1__VAL_1,
		MUX_bus_1_toDfltOutput$wset_1__VAL_2,
		MUX_s_otherPeripheralsPortShim_arff$enq_1__VAL_4;
  wire [73 : 0] MUX_bus_1_toDfltOutput_1$wset_1__VAL_1,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_2,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_3,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_4,
		MUX_bus_1_toDfltOutput_1$wset_1__VAL_5,
		MUX_m_otherPeripheralsPortShim_rff$enq_1__VAL_2;
  wire [8 : 0] MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_1,
	       MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_2,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_1,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_2,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_3,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_4,
	       MUX_bus_toDfltOutput_1$wset_1__VAL_5,
	       MUX_m_otherPeripheralsPortShim_bff$enq_1__VAL_2;
  wire [7 : 0] MUX_bus_1_moreFlits_1$write_1__VAL_1,
	       MUX_bus_1_moreFlits_1$write_1__VAL_3,
	       MUX_bus_1_moreFlits_1$write_1__VAL_5,
	       MUX_bus_1_moreFlits_1$write_1__VAL_7,
	       MUX_bus_1_moreFlits_1$write_1__VAL_9,
	       MUX_bus_merged_0_flitLeft$write_1__VAL_2,
	       MUX_bus_merged_1_flitLeft$write_1__VAL_2,
	       MUX_bus_split_0_flitLeft$write_1__VAL_1,
	       MUX_bus_split_1_flitLeft$write_1__VAL_1,
	       MUX_bus_split_2_flitLeft$write_1__VAL_1,
	       MUX_bus_split_3_flitLeft$write_1__VAL_1;
  wire [6 : 0] MUX_bus_moreFlits$write_1__VAL_1,
	       MUX_bus_moreFlits$write_1__VAL_3;
  wire MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_2,
       MUX_bus_1_moreFlits_1$write_1__SEL_1,
       MUX_bus_1_moreFlits_1$write_1__SEL_10,
       MUX_bus_1_moreFlits_1$write_1__SEL_2,
       MUX_bus_1_moreFlits_1$write_1__SEL_3,
       MUX_bus_1_moreFlits_1$write_1__SEL_4,
       MUX_bus_1_moreFlits_1$write_1__SEL_5,
       MUX_bus_1_moreFlits_1$write_1__SEL_6,
       MUX_bus_1_moreFlits_1$write_1__SEL_7,
       MUX_bus_1_moreFlits_1$write_1__SEL_8,
       MUX_bus_1_moreFlits_1$write_1__SEL_9,
       MUX_bus_1_toDfltOutput$wset_1__SEL_1,
       MUX_bus_1_toDfltOutput$wset_1__SEL_2,
       MUX_bus_1_toDfltOutput$wset_1__SEL_3,
       MUX_bus_1_toDfltOutput$wset_1__SEL_4,
       MUX_bus_1_toOutput_0$wset_1__SEL_1,
       MUX_bus_1_toOutput_0$wset_1__SEL_2,
       MUX_bus_1_toOutput_0$wset_1__SEL_3,
       MUX_bus_1_toOutput_0$wset_1__SEL_4,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_1,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_10,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_2,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_3,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_4,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_5,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_6,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_7,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_8,
       MUX_bus_1_toOutput_0_1$wset_1__SEL_9,
       MUX_bus_1_toOutput_1$wset_1__SEL_1,
       MUX_bus_1_toOutput_1$wset_1__SEL_2,
       MUX_bus_1_toOutput_1$wset_1__SEL_3,
       MUX_bus_1_toOutput_1$wset_1__SEL_4,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_1,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_10,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_2,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_3,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_4,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_5,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_6,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_7,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_8,
       MUX_bus_1_toOutput_1_1$wset_1__SEL_9,
       MUX_bus_1_toOutput_2$wset_1__SEL_1,
       MUX_bus_1_toOutput_2$wset_1__SEL_2,
       MUX_bus_1_toOutput_2$wset_1__SEL_3,
       MUX_bus_1_toOutput_2$wset_1__SEL_4,
       MUX_bus_1_toOutput_3$wset_1__SEL_1,
       MUX_bus_1_toOutput_3$wset_1__SEL_2,
       MUX_bus_1_toOutput_3$wset_1__SEL_3,
       MUX_bus_1_toOutput_3$wset_1__SEL_4,
       MUX_bus_moreFlits$write_1__SEL_1,
       MUX_bus_moreFlits$write_1__SEL_2,
       MUX_bus_moreFlits$write_1__SEL_3,
       MUX_bus_moreFlits$write_1__SEL_4,
       MUX_bus_split_0_flitLeft$write_1__SEL_1,
       MUX_bus_split_0_flitLeft$write_1__SEL_2,
       MUX_bus_split_1_flitLeft$write_1__SEL_1,
       MUX_bus_split_1_flitLeft$write_1__SEL_2,
       MUX_bus_split_2_flitLeft$write_1__SEL_1,
       MUX_bus_split_2_flitLeft$write_1__SEL_2,
       MUX_bus_split_3_flitLeft$write_1__SEL_1,
       MUX_bus_split_3_flitLeft$write_1__SEL_2,
       MUX_bus_toDfltOutput$wset_1__SEL_1,
       MUX_bus_toDfltOutput$wset_1__SEL_2,
       MUX_bus_toDfltOutput$wset_1__SEL_3,
       MUX_bus_toDfltOutput$wset_1__SEL_4,
       MUX_bus_toOutput_0$wset_1__SEL_1,
       MUX_bus_toOutput_0$wset_1__SEL_2,
       MUX_bus_toOutput_0$wset_1__SEL_3,
       MUX_bus_toOutput_0$wset_1__SEL_4,
       MUX_bus_toOutput_0_1$wset_1__SEL_1,
       MUX_bus_toOutput_0_1$wset_1__SEL_10,
       MUX_bus_toOutput_0_1$wset_1__SEL_2,
       MUX_bus_toOutput_0_1$wset_1__SEL_3,
       MUX_bus_toOutput_0_1$wset_1__SEL_4,
       MUX_bus_toOutput_0_1$wset_1__SEL_5,
       MUX_bus_toOutput_0_1$wset_1__SEL_6,
       MUX_bus_toOutput_0_1$wset_1__SEL_7,
       MUX_bus_toOutput_0_1$wset_1__SEL_8,
       MUX_bus_toOutput_0_1$wset_1__SEL_9,
       MUX_bus_toOutput_1$wset_1__SEL_1,
       MUX_bus_toOutput_1$wset_1__SEL_2,
       MUX_bus_toOutput_1$wset_1__SEL_3,
       MUX_bus_toOutput_1$wset_1__SEL_4,
       MUX_bus_toOutput_1_1$wset_1__SEL_1,
       MUX_bus_toOutput_1_1$wset_1__SEL_10,
       MUX_bus_toOutput_1_1$wset_1__SEL_2,
       MUX_bus_toOutput_1_1$wset_1__SEL_3,
       MUX_bus_toOutput_1_1$wset_1__SEL_4,
       MUX_bus_toOutput_1_1$wset_1__SEL_5,
       MUX_bus_toOutput_1_1$wset_1__SEL_6,
       MUX_bus_toOutput_1_1$wset_1__SEL_7,
       MUX_bus_toOutput_1_1$wset_1__SEL_8,
       MUX_bus_toOutput_1_1$wset_1__SEL_9,
       MUX_bus_toOutput_2$wset_1__SEL_1,
       MUX_bus_toOutput_2$wset_1__SEL_2,
       MUX_bus_toOutput_2$wset_1__SEL_3,
       MUX_bus_toOutput_2$wset_1__SEL_4,
       MUX_bus_toOutput_3$wset_1__SEL_1,
       MUX_bus_toOutput_3$wset_1__SEL_2,
       MUX_bus_toOutput_3$wset_1__SEL_3,
       MUX_bus_toOutput_3$wset_1__SEL_4,
       MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_2,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h97282;
  reg [63 : 0] v__h97544;
  reg [63 : 0] v__h97828;
  reg [63 : 0] v__h98090;
  reg [63 : 0] v__h98374;
  reg [63 : 0] v__h98636;
  reg [63 : 0] v__h98920;
  reg [63 : 0] v__h99182;
  reg [63 : 0] v__h99466;
  reg [63 : 0] v__h99728;
  reg [63 : 0] v__h62467;
  reg [63 : 0] v__h62931;
  reg [63 : 0] v__h122166;
  reg [63 : 0] v__h122628;
  reg [31 : 0] v__h165548;
  reg [63 : 0] v__h144476;
  reg [63 : 0] v__h144738;
  reg [63 : 0] v__h145022;
  reg [63 : 0] v__h145284;
  reg [63 : 0] v__h145568;
  reg [63 : 0] v__h145830;
  reg [63 : 0] v__h146114;
  reg [63 : 0] v__h146376;
  reg [63 : 0] v__h146660;
  reg [63 : 0] v__h146922;
  reg [31 : 0] v__h165194;
  reg [31 : 0] v__h165188;
  reg [31 : 0] v__h165542;
  // synopsys translate_on

  // remaining internal signals
  wire [171 : 0] IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1277,
		 IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1346;
  wire [63 : 0] addr__h53721,
		addr__h55507,
		addr_lim__h165316,
		addr_lim__h165344,
		addr_lim__h165370,
		x__h113993,
		x__h114056,
		x__h114130,
		x__h114193,
		x__h115540,
		x__h115603,
		x__h115677,
		x__h115740,
		x__h12545,
		x__h13298,
		x__h54188,
		x__h54261,
		x__h54345,
		x__h54418,
		x__h55903,
		x__h55966,
		x__h56040,
		x__h56103,
		x__h6079,
		x__h6837,
		x_araddr__h13178,
		x_araddr__h6717,
		x_awaddr__h12425,
		x_awaddr__h5955,
		y__h12533,
		y__h13286,
		y__h6067,
		y__h6825;
  wire [8 : 0] x__h12884, x__h6420;
  wire [7 : 0] x1__h12788, x1__h13504, x1__h6324, x1__h7043;
  wire [6 : 0] _theResult____h85519, currentAwid__h85704;
  wire [5 : 0] bus_1_toOutput_0_1wget_BITS_73_TO_68__q2,
	       bus_toOutput_0_1wget_BITS_8_TO_3__q1;
  wire IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536,
       IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2275,
       IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2276,
       IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_1_i_ETC___d2332,
       IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551,
       IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2313,
       IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2314,
       IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_1_i_ETC___d2347,
       IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567,
       IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582,
       IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599,
       IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741,
       IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1450,
       IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1451,
       IF_IF_bus_inputDest_0_whas__398_THEN_bus_input_ETC___d1507,
       IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756,
       IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1488,
       IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1489,
       IF_IF_bus_inputDest_1_whas__457_THEN_bus_input_ETC___d1522,
       IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772,
       IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787,
       IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2668,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2672,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2676,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2696,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2720,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2725,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2730,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2735,
       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2740,
       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2356,
       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2357,
       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2359,
       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2360,
       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2363,
       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2365,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2641,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2669,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2673,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2677,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2681,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2689,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2693,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2697,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2701,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2705,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2715,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2722,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2727,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2732,
       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2737,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2650,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2670,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2674,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2678,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2682,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2690,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2694,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2698,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2702,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2706,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2717,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2723,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2728,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2733,
       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2738,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2659,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2671,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2675,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2679,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2683,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2691,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2695,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2699,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2703,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2707,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2719,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2729,
       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2734,
       IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853,
       IF_NOT_bus_1_moreFlits_318_BIT_0_391_405_OR_NO_ETC___d2414,
       IF_NOT_bus_1_moreFlits_318_BIT_1_393_407_OR_NO_ETC___d2413,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1873,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1877,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1881,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1901,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1925,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1930,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1935,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1940,
       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1945,
       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1531,
       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1532,
       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1534,
       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1535,
       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1538,
       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1540,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1846,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1874,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1878,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1882,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1886,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1894,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1898,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1902,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1906,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1910,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1920,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1927,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1932,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1937,
       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1942,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1855,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1875,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1879,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1883,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1887,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1895,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1899,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1903,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1907,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1911,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1922,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1928,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1933,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1938,
       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1943,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1864,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1876,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1880,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1884,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1888,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1896,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1900,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1904,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1908,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1912,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1924,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1934,
       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1939,
       IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056,
       IF_NOT_bus_moreFlits_493_BIT_0_571_585_OR_NOT__ETC___d1594,
       IF_NOT_bus_moreFlits_493_BIT_1_573_587_OR_NOT__ETC___d1593,
       IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657,
       IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2340,
       IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2341,
       IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648,
       IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2352,
       IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2353,
       IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639,
       IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631,
       IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666,
       IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862,
       IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1515,
       IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1516,
       IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853,
       IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1527,
       IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1528,
       IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844,
       IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836,
       IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871,
       IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1293,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1296,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1301,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1304,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1310,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1313,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1316,
       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1320,
       IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1357,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1359,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1362,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1364,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1368,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1370,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1373,
       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1377,
       IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387,
       IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389,
       IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391,
       IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393,
       NOT_IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_ETC___d2245,
       NOT_IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_ETC___d2301,
       NOT_IF_IF_bus_inputDest_0_whas__398_THEN_bus_i_ETC___d1420,
       NOT_IF_IF_bus_inputDest_1_whas__457_THEN_bus_i_ETC___d1476,
       NOT_IF_bus_1_moreFlits_318_BIT_0_391_THEN_1_EL_ETC___d2404,
       NOT_IF_bus_moreFlits_493_BIT_0_571_THEN_1_ELSE_ETC___d1584,
       NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617,
       NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822,
       boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155,
       bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614,
       bus_1_inputCanPeek_0_1_whas__515_AND_bus_1_inp_ETC___d2601,
       bus_1_inputCanPeek_0_whas__220_AND_bus_1_input_ETC___d2317,
       bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819,
       bus_inputCanPeek_0_1_whas__720_AND_bus_inputCa_ETC___d1806,
       bus_inputCanPeek_0_whas__395_AND_bus_inputCanP_ETC___d1492,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2186,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2188,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2191,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2193,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2197,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2199,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2202,
       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2206,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2148,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2150,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2153,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2155,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2159,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2161,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2164,
       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2168,
       mem0_controller_axi4_deburster_readsSent_port0_ETC___d318;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = mem0_controller$to_raw_mem_request_get ;
  assign RDY_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign CAN_FIRE_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = uart0$get_to_console_get ;
  assign RDY_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign CAN_FIRE_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign CAN_FIRE_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // value method status
  assign status = 8'd0 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = core$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = core$mv_status ;

  // value method cms_ifc_pc
  assign cms_ifc_pc = core$cms_ifc_pc ;

  // value method cms_ifc_instr
  assign cms_ifc_instr = core$cms_ifc_instr ;

  // value method cms_ifc_performance_events
  assign cms_ifc_performance_events = core$cms_ifc_performance_events ;

  // value method cms_ifc_registers
  assign cms_ifc_registers = core$cms_ifc_registers ;

  // action method cms_ifc_halt_cpu
  assign CAN_FIRE_cms_ifc_halt_cpu = 1'd1 ;
  assign WILL_FIRE_cms_ifc_halt_cpu = EN_cms_ifc_halt_cpu ;

  // value method core_dmem_pre_fabric_aw_awid
  assign core_dmem_pre_fabric_awid = core$core_mem_master_aw_peek[98:93] ;

  // value method core_dmem_pre_fabric_aw_awaddr
  assign core_dmem_pre_fabric_awaddr = core$core_mem_master_aw_peek[92:29] ;

  // value method core_dmem_pre_fabric_aw_awlen
  assign core_dmem_pre_fabric_awlen = core$core_mem_master_aw_peek[28:21] ;

  // value method core_dmem_pre_fabric_aw_awsize
  assign core_dmem_pre_fabric_awsize = core$core_mem_master_aw_peek[20:18] ;

  // value method core_dmem_pre_fabric_aw_awburst
  assign core_dmem_pre_fabric_awburst = core$core_mem_master_aw_peek[17:16] ;

  // value method core_dmem_pre_fabric_aw_awlock
  assign core_dmem_pre_fabric_awlock = core$core_mem_master_aw_peek[15] ;

  // value method core_dmem_pre_fabric_aw_awcache
  assign core_dmem_pre_fabric_awcache = core$core_mem_master_aw_peek[14:11] ;

  // value method core_dmem_pre_fabric_aw_awprot
  assign core_dmem_pre_fabric_awprot = core$core_mem_master_aw_peek[10:8] ;

  // value method core_dmem_pre_fabric_aw_awqos
  assign core_dmem_pre_fabric_awqos = core$core_mem_master_aw_peek[7:4] ;

  // value method core_dmem_pre_fabric_aw_awregion
  assign core_dmem_pre_fabric_awregion = core$core_mem_master_aw_peek[3:0] ;

  // value method core_dmem_pre_fabric_aw_awvalid
  assign core_dmem_pre_fabric_awvalid = core$core_mem_master_aw_canPeek ;

  // action method core_dmem_pre_fabric_aw_awready
  assign CAN_FIRE_core_dmem_pre_fabric_aw_awready = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_aw_awready = 1'd1 ;

  // value method core_dmem_pre_fabric_w_wdata
  assign core_dmem_pre_fabric_wdata = core$core_mem_master_w_peek[72:9] ;

  // value method core_dmem_pre_fabric_w_wstrb
  assign core_dmem_pre_fabric_wstrb = core$core_mem_master_w_peek[8:1] ;

  // value method core_dmem_pre_fabric_w_wlast
  assign core_dmem_pre_fabric_wlast = core$core_mem_master_w_peek[0] ;

  // value method core_dmem_pre_fabric_w_wvalid
  assign core_dmem_pre_fabric_wvalid = core$core_mem_master_w_canPeek ;

  // action method core_dmem_pre_fabric_w_wready
  assign CAN_FIRE_core_dmem_pre_fabric_w_wready = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_w_wready = 1'd1 ;

  // action method core_dmem_pre_fabric_b_bflit
  assign CAN_FIRE_core_dmem_pre_fabric_b_bflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_b_bflit = 1'd1 ;

  // value method core_dmem_pre_fabric_b_bready
  assign core_dmem_pre_fabric_bready = core$core_mem_master_b_canPut ;

  // value method core_dmem_pre_fabric_ar_arid
  assign core_dmem_pre_fabric_arid = core$core_mem_master_ar_peek[98:93] ;

  // value method core_dmem_pre_fabric_ar_araddr
  assign core_dmem_pre_fabric_araddr = core$core_mem_master_ar_peek[92:29] ;

  // value method core_dmem_pre_fabric_ar_arlen
  assign core_dmem_pre_fabric_arlen = core$core_mem_master_ar_peek[28:21] ;

  // value method core_dmem_pre_fabric_ar_arsize
  assign core_dmem_pre_fabric_arsize = core$core_mem_master_ar_peek[20:18] ;

  // value method core_dmem_pre_fabric_ar_arburst
  assign core_dmem_pre_fabric_arburst = core$core_mem_master_ar_peek[17:16] ;

  // value method core_dmem_pre_fabric_ar_arlock
  assign core_dmem_pre_fabric_arlock = core$core_mem_master_ar_peek[15] ;

  // value method core_dmem_pre_fabric_ar_arcache
  assign core_dmem_pre_fabric_arcache = core$core_mem_master_ar_peek[14:11] ;

  // value method core_dmem_pre_fabric_ar_arprot
  assign core_dmem_pre_fabric_arprot = core$core_mem_master_ar_peek[10:8] ;

  // value method core_dmem_pre_fabric_ar_arqos
  assign core_dmem_pre_fabric_arqos = core$core_mem_master_ar_peek[7:4] ;

  // value method core_dmem_pre_fabric_ar_arregion
  assign core_dmem_pre_fabric_arregion = core$core_mem_master_ar_peek[3:0] ;

  // value method core_dmem_pre_fabric_ar_arvalid
  assign core_dmem_pre_fabric_arvalid = core$core_mem_master_ar_canPeek ;

  // action method core_dmem_pre_fabric_ar_arready
  assign CAN_FIRE_core_dmem_pre_fabric_ar_arready = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_ar_arready = 1'd1 ;

  // action method core_dmem_pre_fabric_r_rflit
  assign CAN_FIRE_core_dmem_pre_fabric_r_rflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_pre_fabric_r_rflit = 1'd1 ;

  // value method core_dmem_pre_fabric_r_rready
  assign core_dmem_pre_fabric_rready = core$core_mem_master_r_canPut ;

  // value method core_dmem_post_fabric_aw_awid
  assign core_dmem_post_fabric_awid =
	     m_otherPeripheralsPortShim_awff$D_OUT[99:93] ;

  // value method core_dmem_post_fabric_aw_awaddr
  assign core_dmem_post_fabric_awaddr =
	     m_otherPeripheralsPortShim_awff$D_OUT[92:29] ;

  // value method core_dmem_post_fabric_aw_awlen
  assign core_dmem_post_fabric_awlen =
	     m_otherPeripheralsPortShim_awff$D_OUT[28:21] ;

  // value method core_dmem_post_fabric_aw_awsize
  assign core_dmem_post_fabric_awsize =
	     m_otherPeripheralsPortShim_awff$D_OUT[20:18] ;

  // value method core_dmem_post_fabric_aw_awburst
  assign core_dmem_post_fabric_awburst =
	     m_otherPeripheralsPortShim_awff$D_OUT[17:16] ;

  // value method core_dmem_post_fabric_aw_awlock
  assign core_dmem_post_fabric_awlock =
	     m_otherPeripheralsPortShim_awff$D_OUT[15] ;

  // value method core_dmem_post_fabric_aw_awcache
  assign core_dmem_post_fabric_awcache =
	     m_otherPeripheralsPortShim_awff$D_OUT[14:11] ;

  // value method core_dmem_post_fabric_aw_awprot
  assign core_dmem_post_fabric_awprot =
	     m_otherPeripheralsPortShim_awff$D_OUT[10:8] ;

  // value method core_dmem_post_fabric_aw_awqos
  assign core_dmem_post_fabric_awqos =
	     m_otherPeripheralsPortShim_awff$D_OUT[7:4] ;

  // value method core_dmem_post_fabric_aw_awregion
  assign core_dmem_post_fabric_awregion =
	     m_otherPeripheralsPortShim_awff$D_OUT[3:0] ;

  // value method core_dmem_post_fabric_aw_awvalid
  assign core_dmem_post_fabric_awvalid =
	     m_otherPeripheralsPortShim_awff$EMPTY_N ;

  // action method core_dmem_post_fabric_aw_awready
  assign CAN_FIRE_core_dmem_post_fabric_aw_awready = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_aw_awready = 1'd1 ;

  // value method core_dmem_post_fabric_w_wdata
  assign core_dmem_post_fabric_wdata =
	     m_otherPeripheralsPortShim_wff$D_OUT[72:9] ;

  // value method core_dmem_post_fabric_w_wstrb
  assign core_dmem_post_fabric_wstrb =
	     m_otherPeripheralsPortShim_wff$D_OUT[8:1] ;

  // value method core_dmem_post_fabric_w_wlast
  assign core_dmem_post_fabric_wlast =
	     m_otherPeripheralsPortShim_wff$D_OUT[0] ;

  // value method core_dmem_post_fabric_w_wvalid
  assign core_dmem_post_fabric_wvalid =
	     m_otherPeripheralsPortShim_wff$EMPTY_N ;

  // action method core_dmem_post_fabric_w_wready
  assign CAN_FIRE_core_dmem_post_fabric_w_wready = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_w_wready = 1'd1 ;

  // action method core_dmem_post_fabric_b_bflit
  assign CAN_FIRE_core_dmem_post_fabric_b_bflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_b_bflit = 1'd1 ;

  // value method core_dmem_post_fabric_b_bready
  assign core_dmem_post_fabric_bready =
	     m_otherPeripheralsPortShim_bff$FULL_N ;

  // value method core_dmem_post_fabric_ar_arid
  assign core_dmem_post_fabric_arid =
	     m_otherPeripheralsPortShim_arff$D_OUT[99:93] ;

  // value method core_dmem_post_fabric_ar_araddr
  assign core_dmem_post_fabric_araddr =
	     m_otherPeripheralsPortShim_arff$D_OUT[92:29] ;

  // value method core_dmem_post_fabric_ar_arlen
  assign core_dmem_post_fabric_arlen =
	     m_otherPeripheralsPortShim_arff$D_OUT[28:21] ;

  // value method core_dmem_post_fabric_ar_arsize
  assign core_dmem_post_fabric_arsize =
	     m_otherPeripheralsPortShim_arff$D_OUT[20:18] ;

  // value method core_dmem_post_fabric_ar_arburst
  assign core_dmem_post_fabric_arburst =
	     m_otherPeripheralsPortShim_arff$D_OUT[17:16] ;

  // value method core_dmem_post_fabric_ar_arlock
  assign core_dmem_post_fabric_arlock =
	     m_otherPeripheralsPortShim_arff$D_OUT[15] ;

  // value method core_dmem_post_fabric_ar_arcache
  assign core_dmem_post_fabric_arcache =
	     m_otherPeripheralsPortShim_arff$D_OUT[14:11] ;

  // value method core_dmem_post_fabric_ar_arprot
  assign core_dmem_post_fabric_arprot =
	     m_otherPeripheralsPortShim_arff$D_OUT[10:8] ;

  // value method core_dmem_post_fabric_ar_arqos
  assign core_dmem_post_fabric_arqos =
	     m_otherPeripheralsPortShim_arff$D_OUT[7:4] ;

  // value method core_dmem_post_fabric_ar_arregion
  assign core_dmem_post_fabric_arregion =
	     m_otherPeripheralsPortShim_arff$D_OUT[3:0] ;

  // value method core_dmem_post_fabric_ar_arvalid
  assign core_dmem_post_fabric_arvalid =
	     m_otherPeripheralsPortShim_arff$EMPTY_N ;

  // action method core_dmem_post_fabric_ar_arready
  assign CAN_FIRE_core_dmem_post_fabric_ar_arready = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_ar_arready = 1'd1 ;

  // action method core_dmem_post_fabric_r_rflit
  assign CAN_FIRE_core_dmem_post_fabric_r_rflit = 1'd1 ;
  assign WILL_FIRE_core_dmem_post_fabric_r_rflit = 1'd1 ;

  // value method core_dmem_post_fabric_r_rready
  assign core_dmem_post_fabric_rready =
	     m_otherPeripheralsPortShim_rff$FULL_N ;

  // value method other_peripherals_aw_canPut
  assign other_peripherals_aw_canPut =
	     s_otherPeripheralsPortShim_awff$FULL_N ;

  // action method other_peripherals_aw_put
  assign RDY_other_peripherals_aw_put =
	     s_otherPeripheralsPortShim_awff$FULL_N ;
  assign CAN_FIRE_other_peripherals_aw_put =
	     s_otherPeripheralsPortShim_awff$FULL_N ;
  assign WILL_FIRE_other_peripherals_aw_put = EN_other_peripherals_aw_put ;

  // value method other_peripherals_w_canPut
  assign other_peripherals_w_canPut = s_otherPeripheralsPortShim_wff$FULL_N ;

  // action method other_peripherals_w_put
  assign RDY_other_peripherals_w_put = s_otherPeripheralsPortShim_wff$FULL_N ;
  assign CAN_FIRE_other_peripherals_w_put =
	     s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_other_peripherals_w_put = EN_other_peripherals_w_put ;

  // value method other_peripherals_b_canPeek
  assign other_peripherals_b_canPeek =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;

  // value method other_peripherals_b_peek
  assign other_peripherals_b_peek = s_otherPeripheralsPortShim_bff$D_OUT ;
  assign RDY_other_peripherals_b_peek =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;

  // action method other_peripherals_b_drop
  assign RDY_other_peripherals_b_drop =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign CAN_FIRE_other_peripherals_b_drop =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_other_peripherals_b_drop = EN_other_peripherals_b_drop ;

  // value method other_peripherals_ar_canPut
  assign other_peripherals_ar_canPut =
	     s_otherPeripheralsPortShim_arff$FULL_N ;

  // action method other_peripherals_ar_put
  assign RDY_other_peripherals_ar_put =
	     s_otherPeripheralsPortShim_arff$FULL_N ;
  assign CAN_FIRE_other_peripherals_ar_put =
	     s_otherPeripheralsPortShim_arff$FULL_N ;
  assign WILL_FIRE_other_peripherals_ar_put = EN_other_peripherals_ar_put ;

  // value method other_peripherals_r_canPeek
  assign other_peripherals_r_canPeek =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;

  // value method other_peripherals_r_peek
  assign other_peripherals_r_peek = s_otherPeripheralsPortShim_rff$D_OUT ;
  assign RDY_other_peripherals_r_peek =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;

  // action method other_peripherals_r_drop
  assign RDY_other_peripherals_r_drop =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign CAN_FIRE_other_peripherals_r_drop =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_other_peripherals_r_drop = EN_other_peripherals_r_drop ;

  // submodule boot_rom
  mkBoot_ROM boot_rom(.CLK(CLK),
		      .RST_N(RST_N),
		      .set_addr_map_addr_base(boot_rom$set_addr_map_addr_base),
		      .set_addr_map_addr_lim(boot_rom$set_addr_map_addr_lim),
		      .slave_ar_put_val(boot_rom$slave_ar_put_val),
		      .slave_aw_put_val(boot_rom$slave_aw_put_val),
		      .slave_w_put_val(boot_rom$slave_w_put_val),
		      .EN_set_addr_map(boot_rom$EN_set_addr_map),
		      .EN_slave_aw_put(boot_rom$EN_slave_aw_put),
		      .EN_slave_w_put(boot_rom$EN_slave_w_put),
		      .EN_slave_b_drop(boot_rom$EN_slave_b_drop),
		      .EN_slave_ar_put(boot_rom$EN_slave_ar_put),
		      .EN_slave_r_drop(boot_rom$EN_slave_r_drop),
		      .RDY_set_addr_map(),
		      .slave_aw_canPut(boot_rom$slave_aw_canPut),
		      .RDY_slave_aw_put(boot_rom$RDY_slave_aw_put),
		      .slave_w_canPut(boot_rom$slave_w_canPut),
		      .RDY_slave_w_put(boot_rom$RDY_slave_w_put),
		      .slave_b_canPeek(boot_rom$slave_b_canPeek),
		      .slave_b_peek(boot_rom$slave_b_peek),
		      .RDY_slave_b_peek(boot_rom$RDY_slave_b_peek),
		      .RDY_slave_b_drop(boot_rom$RDY_slave_b_drop),
		      .slave_ar_canPut(boot_rom$slave_ar_canPut),
		      .RDY_slave_ar_put(boot_rom$RDY_slave_ar_put),
		      .slave_r_canPeek(boot_rom$slave_r_canPeek),
		      .slave_r_peek(boot_rom$slave_r_peek),
		      .RDY_slave_r_peek(boot_rom$RDY_slave_r_peek),
		      .RDY_slave_r_drop(boot_rom$RDY_slave_r_drop));

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) boot_rom_axi4_deburster_countWriteRspFF(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(boot_rom_axi4_deburster_countWriteRspFF$D_IN),
								      .ENQ(boot_rom_axi4_deburster_countWriteRspFF$ENQ),
								      .DEQ(boot_rom_axi4_deburster_countWriteRspFF$DEQ),
								      .CLR(boot_rom_axi4_deburster_countWriteRspFF$CLR),
								      .D_OUT(boot_rom_axi4_deburster_countWriteRspFF$D_OUT),
								      .FULL_N(boot_rom_axi4_deburster_countWriteRspFF$FULL_N),
								      .EMPTY_N(boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_arff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_arff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_arff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_arff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_arff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_arff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_arff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_awff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_awff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_awff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_awff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_awff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_awff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_awff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_bff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(boot_rom_axi4_deburster_inShim_bff$D_IN),
							     .ENQ(boot_rom_axi4_deburster_inShim_bff$ENQ),
							     .DEQ(boot_rom_axi4_deburster_inShim_bff$DEQ),
							     .CLR(boot_rom_axi4_deburster_inShim_bff$CLR),
							     .D_OUT(boot_rom_axi4_deburster_inShim_bff$D_OUT),
							     .FULL_N(boot_rom_axi4_deburster_inShim_bff$FULL_N),
							     .EMPTY_N(boot_rom_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_rff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(boot_rom_axi4_deburster_inShim_rff$D_IN),
							     .ENQ(boot_rom_axi4_deburster_inShim_rff$ENQ),
							     .DEQ(boot_rom_axi4_deburster_inShim_rff$DEQ),
							     .CLR(boot_rom_axi4_deburster_inShim_rff$CLR),
							     .D_OUT(boot_rom_axi4_deburster_inShim_rff$D_OUT),
							     .FULL_N(boot_rom_axi4_deburster_inShim_rff$FULL_N),
							     .EMPTY_N(boot_rom_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) boot_rom_axi4_deburster_inShim_wff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(boot_rom_axi4_deburster_inShim_wff$D_IN),
							     .ENQ(boot_rom_axi4_deburster_inShim_wff$ENQ),
							     .DEQ(boot_rom_axi4_deburster_inShim_wff$DEQ),
							     .CLR(boot_rom_axi4_deburster_inShim_wff$CLR),
							     .D_OUT(boot_rom_axi4_deburster_inShim_wff$D_OUT),
							     .FULL_N(boot_rom_axi4_deburster_inShim_wff$FULL_N),
							     .EMPTY_N(boot_rom_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) boot_rom_axi4_deburster_lastReadRspFF(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(boot_rom_axi4_deburster_lastReadRspFF$D_IN),
								    .ENQ(boot_rom_axi4_deburster_lastReadRspFF$ENQ),
								    .DEQ(boot_rom_axi4_deburster_lastReadRspFF$DEQ),
								    .CLR(boot_rom_axi4_deburster_lastReadRspFF$CLR),
								    .D_OUT(boot_rom_axi4_deburster_lastReadRspFF$D_OUT),
								    .FULL_N(boot_rom_axi4_deburster_lastReadRspFF$FULL_N),
								    .EMPTY_N(boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_arff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_arff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_arff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_arff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_arff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_arff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_arff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_awff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_awff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_awff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_awff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_awff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_awff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_awff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_bff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_outShim_bff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_outShim_bff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_outShim_bff$DEQ),
							      .CLR(boot_rom_axi4_deburster_outShim_bff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_outShim_bff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_outShim_bff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_rff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_outShim_rff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_outShim_rff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_outShim_rff$DEQ),
							      .CLR(boot_rom_axi4_deburster_outShim_rff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_outShim_rff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_outShim_rff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) boot_rom_axi4_deburster_outShim_wff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_outShim_wff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_outShim_wff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_outShim_wff$DEQ),
							      .CLR(boot_rom_axi4_deburster_outShim_wff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_outShim_wff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_outShim_wff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule bus_merged_0_awff
  FIFO2 #(.width(32'd99), .guarded(1'd1)) bus_merged_0_awff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(bus_merged_0_awff$D_IN),
							    .ENQ(bus_merged_0_awff$ENQ),
							    .DEQ(bus_merged_0_awff$DEQ),
							    .CLR(bus_merged_0_awff$CLR),
							    .D_OUT(bus_merged_0_awff$D_OUT),
							    .FULL_N(bus_merged_0_awff$FULL_N),
							    .EMPTY_N(bus_merged_0_awff$EMPTY_N));

  // submodule bus_merged_0_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) bus_merged_0_wff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(bus_merged_0_wff$D_IN),
							   .ENQ(bus_merged_0_wff$ENQ),
							   .DEQ(bus_merged_0_wff$DEQ),
							   .CLR(bus_merged_0_wff$CLR),
							   .D_OUT(bus_merged_0_wff$D_OUT),
							   .FULL_N(bus_merged_0_wff$FULL_N),
							   .EMPTY_N(bus_merged_0_wff$EMPTY_N));

  // submodule bus_merged_1_awff
  FIFO2 #(.width(32'd99), .guarded(1'd1)) bus_merged_1_awff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(bus_merged_1_awff$D_IN),
							    .ENQ(bus_merged_1_awff$ENQ),
							    .DEQ(bus_merged_1_awff$DEQ),
							    .CLR(bus_merged_1_awff$CLR),
							    .D_OUT(bus_merged_1_awff$D_OUT),
							    .FULL_N(bus_merged_1_awff$FULL_N),
							    .EMPTY_N(bus_merged_1_awff$EMPTY_N));

  // submodule bus_merged_1_wff
  FIFO2 #(.width(32'd73), .guarded(1'd1)) bus_merged_1_wff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(bus_merged_1_wff$D_IN),
							   .ENQ(bus_merged_1_wff$ENQ),
							   .DEQ(bus_merged_1_wff$DEQ),
							   .CLR(bus_merged_1_wff$CLR),
							   .D_OUT(bus_merged_1_wff$D_OUT),
							   .FULL_N(bus_merged_1_wff$FULL_N),
							   .EMPTY_N(bus_merged_1_wff$EMPTY_N));

  // submodule bus_noRouteSlv_rspFF
  FIFO2 #(.width(32'd9), .guarded(1'd1)) bus_noRouteSlv_rspFF(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(bus_noRouteSlv_rspFF$D_IN),
							      .ENQ(bus_noRouteSlv_rspFF$ENQ),
							      .DEQ(bus_noRouteSlv_rspFF$DEQ),
							      .CLR(bus_noRouteSlv_rspFF$CLR),
							      .D_OUT(bus_noRouteSlv_rspFF$D_OUT),
							      .FULL_N(bus_noRouteSlv_rspFF$FULL_N),
							      .EMPTY_N(bus_noRouteSlv_rspFF$EMPTY_N));

  // submodule core
  mkCore core(.CLK(CLK),
	      .RST_N(RST_N),
	      .cms_ifc_halt_cpu_state(core$cms_ifc_halt_cpu_state),
	      .core_external_interrupt_sources_0_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_10_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_11_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_12_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_13_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_14_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_15_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_1_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_2_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_3_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_4_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_5_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_6_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_7_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_8_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_9_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear),
	      .core_mem_master_b_put_val(core$core_mem_master_b_put_val),
	      .core_mem_master_r_put_val(core$core_mem_master_r_put_val),
	      .cpu_imem_master_b_put_val(core$cpu_imem_master_b_put_val),
	      .cpu_imem_master_r_put_val(core$cpu_imem_master_r_put_val),
	      .cpu_reset_server_request_put(core$cpu_reset_server_request_put),
	      .dma_server_ar_put_val(core$dma_server_ar_put_val),
	      .dma_server_aw_put_val(core$dma_server_aw_put_val),
	      .dma_server_w_put_val(core$dma_server_w_put_val),
	      .nmi_req_set_not_clear(core$nmi_req_set_not_clear),
	      .set_verbosity_logdelay(core$set_verbosity_logdelay),
	      .set_verbosity_verbosity(core$set_verbosity_verbosity),
	      .set_watch_tohost_tohost_addr(core$set_watch_tohost_tohost_addr),
	      .set_watch_tohost_watch_tohost(core$set_watch_tohost_watch_tohost),
	      .EN_cpu_reset_server_request_put(core$EN_cpu_reset_server_request_put),
	      .EN_cpu_reset_server_response_get(core$EN_cpu_reset_server_response_get),
	      .EN_cpu_imem_master_aw_drop(core$EN_cpu_imem_master_aw_drop),
	      .EN_cpu_imem_master_w_drop(core$EN_cpu_imem_master_w_drop),
	      .EN_cpu_imem_master_b_put(core$EN_cpu_imem_master_b_put),
	      .EN_cpu_imem_master_ar_drop(core$EN_cpu_imem_master_ar_drop),
	      .EN_cpu_imem_master_r_put(core$EN_cpu_imem_master_r_put),
	      .EN_core_mem_master_aw_drop(core$EN_core_mem_master_aw_drop),
	      .EN_core_mem_master_w_drop(core$EN_core_mem_master_w_drop),
	      .EN_core_mem_master_b_put(core$EN_core_mem_master_b_put),
	      .EN_core_mem_master_ar_drop(core$EN_core_mem_master_ar_drop),
	      .EN_core_mem_master_r_put(core$EN_core_mem_master_r_put),
	      .EN_dma_server_aw_put(core$EN_dma_server_aw_put),
	      .EN_dma_server_w_put(core$EN_dma_server_w_put),
	      .EN_dma_server_b_drop(core$EN_dma_server_b_drop),
	      .EN_dma_server_ar_put(core$EN_dma_server_ar_put),
	      .EN_dma_server_r_drop(core$EN_dma_server_r_drop),
	      .EN_set_verbosity(core$EN_set_verbosity),
	      .EN_set_watch_tohost(core$EN_set_watch_tohost),
	      .EN_ma_ddr4_ready(core$EN_ma_ddr4_ready),
	      .EN_cms_ifc_halt_cpu(core$EN_cms_ifc_halt_cpu),
	      .RDY_cpu_reset_server_request_put(core$RDY_cpu_reset_server_request_put),
	      .cpu_reset_server_response_get(),
	      .RDY_cpu_reset_server_response_get(core$RDY_cpu_reset_server_response_get),
	      .cpu_imem_master_aw_canPeek(core$cpu_imem_master_aw_canPeek),
	      .cpu_imem_master_aw_peek(core$cpu_imem_master_aw_peek),
	      .RDY_cpu_imem_master_aw_peek(core$RDY_cpu_imem_master_aw_peek),
	      .RDY_cpu_imem_master_aw_drop(core$RDY_cpu_imem_master_aw_drop),
	      .cpu_imem_master_w_canPeek(core$cpu_imem_master_w_canPeek),
	      .cpu_imem_master_w_peek(core$cpu_imem_master_w_peek),
	      .RDY_cpu_imem_master_w_peek(core$RDY_cpu_imem_master_w_peek),
	      .RDY_cpu_imem_master_w_drop(core$RDY_cpu_imem_master_w_drop),
	      .cpu_imem_master_b_canPut(core$cpu_imem_master_b_canPut),
	      .RDY_cpu_imem_master_b_put(core$RDY_cpu_imem_master_b_put),
	      .cpu_imem_master_ar_canPeek(core$cpu_imem_master_ar_canPeek),
	      .cpu_imem_master_ar_peek(core$cpu_imem_master_ar_peek),
	      .RDY_cpu_imem_master_ar_peek(core$RDY_cpu_imem_master_ar_peek),
	      .RDY_cpu_imem_master_ar_drop(core$RDY_cpu_imem_master_ar_drop),
	      .cpu_imem_master_r_canPut(core$cpu_imem_master_r_canPut),
	      .RDY_cpu_imem_master_r_put(core$RDY_cpu_imem_master_r_put),
	      .core_mem_master_aw_canPeek(core$core_mem_master_aw_canPeek),
	      .core_mem_master_aw_peek(core$core_mem_master_aw_peek),
	      .RDY_core_mem_master_aw_peek(core$RDY_core_mem_master_aw_peek),
	      .RDY_core_mem_master_aw_drop(core$RDY_core_mem_master_aw_drop),
	      .core_mem_master_w_canPeek(core$core_mem_master_w_canPeek),
	      .core_mem_master_w_peek(core$core_mem_master_w_peek),
	      .RDY_core_mem_master_w_peek(core$RDY_core_mem_master_w_peek),
	      .RDY_core_mem_master_w_drop(core$RDY_core_mem_master_w_drop),
	      .core_mem_master_b_canPut(core$core_mem_master_b_canPut),
	      .RDY_core_mem_master_b_put(core$RDY_core_mem_master_b_put),
	      .core_mem_master_ar_canPeek(core$core_mem_master_ar_canPeek),
	      .core_mem_master_ar_peek(core$core_mem_master_ar_peek),
	      .RDY_core_mem_master_ar_peek(core$RDY_core_mem_master_ar_peek),
	      .RDY_core_mem_master_ar_drop(core$RDY_core_mem_master_ar_drop),
	      .core_mem_master_r_canPut(core$core_mem_master_r_canPut),
	      .RDY_core_mem_master_r_put(core$RDY_core_mem_master_r_put),
	      .dma_server_aw_canPut(),
	      .RDY_dma_server_aw_put(),
	      .dma_server_w_canPut(),
	      .RDY_dma_server_w_put(),
	      .dma_server_b_canPeek(core$dma_server_b_canPeek),
	      .dma_server_b_peek(),
	      .RDY_dma_server_b_peek(core$RDY_dma_server_b_peek),
	      .RDY_dma_server_b_drop(core$RDY_dma_server_b_drop),
	      .dma_server_ar_canPut(),
	      .RDY_dma_server_ar_put(),
	      .dma_server_r_canPeek(core$dma_server_r_canPeek),
	      .dma_server_r_peek(),
	      .RDY_dma_server_r_peek(core$RDY_dma_server_r_peek),
	      .RDY_dma_server_r_drop(core$RDY_dma_server_r_drop),
	      .RDY_set_verbosity(),
	      .RDY_set_watch_tohost(),
	      .mv_tohost_value(core$mv_tohost_value),
	      .RDY_mv_tohost_value(),
	      .RDY_ma_ddr4_ready(),
	      .mv_status(core$mv_status),
	      .cms(),
	      .cms_ifc_pc(core$cms_ifc_pc),
	      .cms_ifc_instr(core$cms_ifc_instr),
	      .cms_ifc_performance_events(core$cms_ifc_performance_events),
	      .cms_ifc_registers(core$cms_ifc_registers));

  // submodule m_otherPeripheralsPortShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) m_otherPeripheralsPortShim_arff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(m_otherPeripheralsPortShim_arff$D_IN),
							  .ENQ(m_otherPeripheralsPortShim_arff$ENQ),
							  .DEQ(m_otherPeripheralsPortShim_arff$DEQ),
							  .CLR(m_otherPeripheralsPortShim_arff$CLR),
							  .D_OUT(m_otherPeripheralsPortShim_arff$D_OUT),
							  .FULL_N(),
							  .EMPTY_N(m_otherPeripheralsPortShim_arff$EMPTY_N));

  // submodule m_otherPeripheralsPortShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) m_otherPeripheralsPortShim_awff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(m_otherPeripheralsPortShim_awff$D_IN),
							  .ENQ(m_otherPeripheralsPortShim_awff$ENQ),
							  .DEQ(m_otherPeripheralsPortShim_awff$DEQ),
							  .CLR(m_otherPeripheralsPortShim_awff$CLR),
							  .D_OUT(m_otherPeripheralsPortShim_awff$D_OUT),
							  .FULL_N(),
							  .EMPTY_N(m_otherPeripheralsPortShim_awff$EMPTY_N));

  // submodule m_otherPeripheralsPortShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) m_otherPeripheralsPortShim_bff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(m_otherPeripheralsPortShim_bff$D_IN),
							 .ENQ(m_otherPeripheralsPortShim_bff$ENQ),
							 .DEQ(m_otherPeripheralsPortShim_bff$DEQ),
							 .CLR(m_otherPeripheralsPortShim_bff$CLR),
							 .D_OUT(),
							 .FULL_N(m_otherPeripheralsPortShim_bff$FULL_N),
							 .EMPTY_N());

  // submodule m_otherPeripheralsPortShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) m_otherPeripheralsPortShim_rff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(m_otherPeripheralsPortShim_rff$D_IN),
							 .ENQ(m_otherPeripheralsPortShim_rff$ENQ),
							 .DEQ(m_otherPeripheralsPortShim_rff$DEQ),
							 .CLR(m_otherPeripheralsPortShim_rff$CLR),
							 .D_OUT(),
							 .FULL_N(m_otherPeripheralsPortShim_rff$FULL_N),
							 .EMPTY_N());

  // submodule m_otherPeripheralsPortShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) m_otherPeripheralsPortShim_wff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(m_otherPeripheralsPortShim_wff$D_IN),
							 .ENQ(m_otherPeripheralsPortShim_wff$ENQ),
							 .DEQ(m_otherPeripheralsPortShim_wff$DEQ),
							 .CLR(m_otherPeripheralsPortShim_wff$CLR),
							 .D_OUT(m_otherPeripheralsPortShim_wff$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(m_otherPeripheralsPortShim_wff$EMPTY_N));

  // submodule mem0_controller
  mkMem_Controller mem0_controller(.CLK(CLK),
				   .RST_N(RST_N),
				   .set_addr_map_addr_base(mem0_controller$set_addr_map_addr_base),
				   .set_addr_map_addr_lim(mem0_controller$set_addr_map_addr_lim),
				   .set_watch_tohost_tohost_addr(mem0_controller$set_watch_tohost_tohost_addr),
				   .set_watch_tohost_watch_tohost(mem0_controller$set_watch_tohost_watch_tohost),
				   .slave_ar_put_val(mem0_controller$slave_ar_put_val),
				   .slave_aw_put_val(mem0_controller$slave_aw_put_val),
				   .slave_w_put_val(mem0_controller$slave_w_put_val),
				   .to_raw_mem_response_put(mem0_controller$to_raw_mem_response_put),
				   .EN_server_reset_request_put(mem0_controller$EN_server_reset_request_put),
				   .EN_server_reset_response_get(mem0_controller$EN_server_reset_response_get),
				   .EN_set_addr_map(mem0_controller$EN_set_addr_map),
				   .EN_slave_aw_put(mem0_controller$EN_slave_aw_put),
				   .EN_slave_w_put(mem0_controller$EN_slave_w_put),
				   .EN_slave_b_drop(mem0_controller$EN_slave_b_drop),
				   .EN_slave_ar_put(mem0_controller$EN_slave_ar_put),
				   .EN_slave_r_drop(mem0_controller$EN_slave_r_drop),
				   .EN_to_raw_mem_request_get(mem0_controller$EN_to_raw_mem_request_get),
				   .EN_to_raw_mem_response_put(mem0_controller$EN_to_raw_mem_response_put),
				   .EN_set_watch_tohost(mem0_controller$EN_set_watch_tohost),
				   .RDY_server_reset_request_put(mem0_controller$RDY_server_reset_request_put),
				   .RDY_server_reset_response_get(mem0_controller$RDY_server_reset_response_get),
				   .RDY_set_addr_map(mem0_controller$RDY_set_addr_map),
				   .slave_aw_canPut(mem0_controller$slave_aw_canPut),
				   .RDY_slave_aw_put(mem0_controller$RDY_slave_aw_put),
				   .slave_w_canPut(mem0_controller$slave_w_canPut),
				   .RDY_slave_w_put(mem0_controller$RDY_slave_w_put),
				   .slave_b_canPeek(mem0_controller$slave_b_canPeek),
				   .slave_b_peek(mem0_controller$slave_b_peek),
				   .RDY_slave_b_peek(mem0_controller$RDY_slave_b_peek),
				   .RDY_slave_b_drop(mem0_controller$RDY_slave_b_drop),
				   .slave_ar_canPut(mem0_controller$slave_ar_canPut),
				   .RDY_slave_ar_put(mem0_controller$RDY_slave_ar_put),
				   .slave_r_canPeek(mem0_controller$slave_r_canPeek),
				   .slave_r_peek(mem0_controller$slave_r_peek),
				   .RDY_slave_r_peek(mem0_controller$RDY_slave_r_peek),
				   .RDY_slave_r_drop(mem0_controller$RDY_slave_r_drop),
				   .to_raw_mem_request_get(mem0_controller$to_raw_mem_request_get),
				   .RDY_to_raw_mem_request_get(mem0_controller$RDY_to_raw_mem_request_get),
				   .RDY_to_raw_mem_response_put(mem0_controller$RDY_to_raw_mem_response_put),
				   .status(),
				   .RDY_set_watch_tohost());

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) mem0_controller_axi4_deburster_countWriteRspFF(.RST(RST_N),
									     .CLK(CLK),
									     .D_IN(mem0_controller_axi4_deburster_countWriteRspFF$D_IN),
									     .ENQ(mem0_controller_axi4_deburster_countWriteRspFF$ENQ),
									     .DEQ(mem0_controller_axi4_deburster_countWriteRspFF$DEQ),
									     .CLR(mem0_controller_axi4_deburster_countWriteRspFF$CLR),
									     .D_OUT(mem0_controller_axi4_deburster_countWriteRspFF$D_OUT),
									     .FULL_N(mem0_controller_axi4_deburster_countWriteRspFF$FULL_N),
									     .EMPTY_N(mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_arff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_arff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_arff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_arff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_arff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_arff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_arff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_awff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_awff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_awff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_awff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_awff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_awff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_awff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_bff(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(mem0_controller_axi4_deburster_inShim_bff$D_IN),
								    .ENQ(mem0_controller_axi4_deburster_inShim_bff$ENQ),
								    .DEQ(mem0_controller_axi4_deburster_inShim_bff$DEQ),
								    .CLR(mem0_controller_axi4_deburster_inShim_bff$CLR),
								    .D_OUT(mem0_controller_axi4_deburster_inShim_bff$D_OUT),
								    .FULL_N(mem0_controller_axi4_deburster_inShim_bff$FULL_N),
								    .EMPTY_N(mem0_controller_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_rff(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(mem0_controller_axi4_deburster_inShim_rff$D_IN),
								    .ENQ(mem0_controller_axi4_deburster_inShim_rff$ENQ),
								    .DEQ(mem0_controller_axi4_deburster_inShim_rff$DEQ),
								    .CLR(mem0_controller_axi4_deburster_inShim_rff$CLR),
								    .D_OUT(mem0_controller_axi4_deburster_inShim_rff$D_OUT),
								    .FULL_N(mem0_controller_axi4_deburster_inShim_rff$FULL_N),
								    .EMPTY_N(mem0_controller_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_inShim_wff(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(mem0_controller_axi4_deburster_inShim_wff$D_IN),
								    .ENQ(mem0_controller_axi4_deburster_inShim_wff$ENQ),
								    .DEQ(mem0_controller_axi4_deburster_inShim_wff$DEQ),
								    .CLR(mem0_controller_axi4_deburster_inShim_wff$CLR),
								    .D_OUT(mem0_controller_axi4_deburster_inShim_wff$D_OUT),
								    .FULL_N(mem0_controller_axi4_deburster_inShim_wff$FULL_N),
								    .EMPTY_N(mem0_controller_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) mem0_controller_axi4_deburster_lastReadRspFF(.RST(RST_N),
									   .CLK(CLK),
									   .D_IN(mem0_controller_axi4_deburster_lastReadRspFF$D_IN),
									   .ENQ(mem0_controller_axi4_deburster_lastReadRspFF$ENQ),
									   .DEQ(mem0_controller_axi4_deburster_lastReadRspFF$DEQ),
									   .CLR(mem0_controller_axi4_deburster_lastReadRspFF$CLR),
									   .D_OUT(mem0_controller_axi4_deburster_lastReadRspFF$D_OUT),
									   .FULL_N(mem0_controller_axi4_deburster_lastReadRspFF$FULL_N),
									   .EMPTY_N(mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_arff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_arff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_arff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_arff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_arff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_arff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_arff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_awff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_awff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_awff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_awff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_awff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_awff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_awff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_bff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_outShim_bff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_outShim_bff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_outShim_bff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_outShim_bff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_outShim_bff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_outShim_bff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_rff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_outShim_rff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_outShim_rff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_outShim_rff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_outShim_rff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_outShim_rff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_outShim_rff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) mem0_controller_axi4_deburster_outShim_wff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_outShim_wff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_outShim_wff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_outShim_wff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_outShim_wff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_outShim_wff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_outShim_wff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_arff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(s_otherPeripheralsPortShim_arff$D_IN),
							  .ENQ(s_otherPeripheralsPortShim_arff$ENQ),
							  .DEQ(s_otherPeripheralsPortShim_arff$DEQ),
							  .CLR(s_otherPeripheralsPortShim_arff$CLR),
							  .D_OUT(),
							  .FULL_N(s_otherPeripheralsPortShim_arff$FULL_N),
							  .EMPTY_N());

  // submodule s_otherPeripheralsPortShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_awff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(s_otherPeripheralsPortShim_awff$D_IN),
							  .ENQ(s_otherPeripheralsPortShim_awff$ENQ),
							  .DEQ(s_otherPeripheralsPortShim_awff$DEQ),
							  .CLR(s_otherPeripheralsPortShim_awff$CLR),
							  .D_OUT(),
							  .FULL_N(s_otherPeripheralsPortShim_awff$FULL_N),
							  .EMPTY_N());

  // submodule s_otherPeripheralsPortShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_bff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(s_otherPeripheralsPortShim_bff$D_IN),
							 .ENQ(s_otherPeripheralsPortShim_bff$ENQ),
							 .DEQ(s_otherPeripheralsPortShim_bff$DEQ),
							 .CLR(s_otherPeripheralsPortShim_bff$CLR),
							 .D_OUT(s_otherPeripheralsPortShim_bff$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(s_otherPeripheralsPortShim_bff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_rff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(s_otherPeripheralsPortShim_rff$D_IN),
							 .ENQ(s_otherPeripheralsPortShim_rff$ENQ),
							 .DEQ(s_otherPeripheralsPortShim_rff$DEQ),
							 .CLR(s_otherPeripheralsPortShim_rff$CLR),
							 .D_OUT(s_otherPeripheralsPortShim_rff$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(s_otherPeripheralsPortShim_rff$EMPTY_N));

  // submodule s_otherPeripheralsPortShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(1'd1)) s_otherPeripheralsPortShim_wff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(s_otherPeripheralsPortShim_wff$D_IN),
							 .ENQ(s_otherPeripheralsPortShim_wff$ENQ),
							 .DEQ(s_otherPeripheralsPortShim_wff$DEQ),
							 .CLR(s_otherPeripheralsPortShim_wff$CLR),
							 .D_OUT(),
							 .FULL_N(s_otherPeripheralsPortShim_wff$FULL_N),
							 .EMPTY_N());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_range(),
		    .m_plic_addr_range(),
		    .m_uart0_addr_range(soc_map$m_uart0_addr_range),
		    .m_other_peripherals_addr_range(soc_map$m_other_peripherals_addr_range),
		    .m_boot_rom_addr_range(soc_map$m_boot_rom_addr_range),
		    .m_mem0_controller_addr_range(soc_map$m_mem0_controller_addr_range),
		    .m_tcm_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value());

  // submodule uart0
  mkUART uart0(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_from_console_put(uart0$put_from_console_put),
	       .set_addr_map_addr_base(uart0$set_addr_map_addr_base),
	       .set_addr_map_addr_lim(uart0$set_addr_map_addr_lim),
	       .slave_ar_put_val(uart0$slave_ar_put_val),
	       .slave_aw_put_val(uart0$slave_aw_put_val),
	       .slave_w_put_val(uart0$slave_w_put_val),
	       .EN_server_reset_request_put(uart0$EN_server_reset_request_put),
	       .EN_server_reset_response_get(uart0$EN_server_reset_response_get),
	       .EN_set_addr_map(uart0$EN_set_addr_map),
	       .EN_slave_aw_put(uart0$EN_slave_aw_put),
	       .EN_slave_w_put(uart0$EN_slave_w_put),
	       .EN_slave_b_drop(uart0$EN_slave_b_drop),
	       .EN_slave_ar_put(uart0$EN_slave_ar_put),
	       .EN_slave_r_drop(uart0$EN_slave_r_drop),
	       .EN_get_to_console_get(uart0$EN_get_to_console_get),
	       .EN_put_from_console_put(uart0$EN_put_from_console_put),
	       .RDY_server_reset_request_put(uart0$RDY_server_reset_request_put),
	       .RDY_server_reset_response_get(uart0$RDY_server_reset_response_get),
	       .RDY_set_addr_map(),
	       .slave_aw_canPut(uart0$slave_aw_canPut),
	       .RDY_slave_aw_put(uart0$RDY_slave_aw_put),
	       .slave_w_canPut(uart0$slave_w_canPut),
	       .RDY_slave_w_put(uart0$RDY_slave_w_put),
	       .slave_b_canPeek(uart0$slave_b_canPeek),
	       .slave_b_peek(uart0$slave_b_peek),
	       .RDY_slave_b_peek(uart0$RDY_slave_b_peek),
	       .RDY_slave_b_drop(uart0$RDY_slave_b_drop),
	       .slave_ar_canPut(uart0$slave_ar_canPut),
	       .RDY_slave_ar_put(uart0$RDY_slave_ar_put),
	       .slave_r_canPeek(uart0$slave_r_canPeek),
	       .slave_r_peek(uart0$slave_r_peek),
	       .RDY_slave_r_peek(uart0$RDY_slave_r_peek),
	       .RDY_slave_r_drop(uart0$RDY_slave_r_drop),
	       .get_to_console_get(uart0$get_to_console_get),
	       .RDY_get_to_console_get(uart0$RDY_get_to_console_get),
	       .RDY_put_from_console_put(uart0$RDY_put_from_console_put),
	       .intr(uart0$intr));

  // rule RL_rl_connect_external_interrupt_requests
  assign CAN_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;

  // rule RL_core_mem_master_sig_awSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_awSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_setPeek =
	     core$RDY_core_mem_master_aw_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_setPeek =
	     core$RDY_core_mem_master_aw_peek ;

  // rule RL_core_mem_master_sig_awSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop =
	     core_mem_master_sig_awSig_src_dropWire$whas &&
	     !core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_wSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_wSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_setPeek =
	     core$RDY_core_mem_master_w_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_setPeek =
	     core$RDY_core_mem_master_w_peek ;

  // rule RL_core_mem_master_sig_wSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop =
	     core_mem_master_sig_wSig_src_dropWire$whas &&
	     !core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_bSig_snk_setCanPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_setCanPut = 1'd1 ;

  // rule RL_core_mem_master_sig_bSig_snk_warnDoPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut =
	     core_mem_master_sig_bSig_snk_putWire$whas &&
	     !core$core_mem_master_b_canPut ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut ;

  // rule RL_core_mem_master_sig_arSig_src_setCanPeek
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_setCanPeek = 1'd1 ;

  // rule RL_core_mem_master_sig_arSig_src_setPeek
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_setPeek =
	     core$RDY_core_mem_master_ar_peek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_setPeek =
	     core$RDY_core_mem_master_ar_peek ;

  // rule RL_core_mem_master_sig_arSig_src_warnDoDrop
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop =
	     core_mem_master_sig_arSig_src_dropWire$whas &&
	     !core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop ;

  // rule RL_core_mem_master_sig_rSig_snk_setCanPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_setCanPut = 1'd1 ;

  // rule RL_core_mem_master_sig_rSig_snk_warnDoPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut =
	     core_mem_master_sig_rSig_snk_putWire$whas &&
	     !core$core_mem_master_r_canPut ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut ;

  // rule RL_m_otherPeripheralsPortShim_sig_awSig_src_setCanPeek
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setCanPeek =
	     1'd1 ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setCanPeek =
	     1'd1 ;

  // rule RL_m_otherPeripheralsPortShim_sig_awSig_src_setPeek
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setPeek =
	     m_otherPeripheralsPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_setPeek =
	     m_otherPeripheralsPortShim_awff$EMPTY_N ;

  // rule RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop =
	     m_otherPeripheralsPortShim_sig_awSig_src_dropWire$whas &&
	     !m_otherPeripheralsPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop ;

  // rule RL_m_otherPeripheralsPortShim_sig_wSig_src_setCanPeek
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setCanPeek =
	     1'd1 ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setCanPeek =
	     1'd1 ;

  // rule RL_m_otherPeripheralsPortShim_sig_wSig_src_setPeek
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setPeek =
	     m_otherPeripheralsPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_setPeek =
	     m_otherPeripheralsPortShim_wff$EMPTY_N ;

  // rule RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop =
	     m_otherPeripheralsPortShim_sig_wSig_src_dropWire$whas &&
	     !m_otherPeripheralsPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop ;

  // rule RL_m_otherPeripheralsPortShim_sig_bSig_snk_setCanPut
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_setCanPut =
	     1'd1 ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_setCanPut =
	     1'd1 ;

  // rule RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut =
	     m_otherPeripheralsPortShim_sig_bSig_snk_putWire$whas &&
	     !m_otherPeripheralsPortShim_bff$FULL_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut ;

  // rule RL_m_otherPeripheralsPortShim_sig_arSig_src_setCanPeek
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setCanPeek =
	     1'd1 ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setCanPeek =
	     1'd1 ;

  // rule RL_m_otherPeripheralsPortShim_sig_arSig_src_setPeek
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setPeek =
	     m_otherPeripheralsPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_setPeek =
	     m_otherPeripheralsPortShim_arff$EMPTY_N ;

  // rule RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop =
	     m_otherPeripheralsPortShim_sig_arSig_src_dropWire$whas &&
	     !m_otherPeripheralsPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop ;

  // rule RL_m_otherPeripheralsPortShim_sig_rSig_snk_setCanPut
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_setCanPut =
	     1'd1 ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_setCanPut =
	     1'd1 ;

  // rule RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut =
	     m_otherPeripheralsPortShim_sig_rSig_snk_putWire$whas &&
	     !m_otherPeripheralsPortShim_rff$FULL_N ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut ;

  // rule RL_test_sig_awSig_snk_setCanPut
  assign CAN_FIRE_RL_test_sig_awSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_test_sig_awSig_snk_setCanPut = 1'd1 ;

  // rule RL_test_sig_awSig_snk_warnDoPut
  assign CAN_FIRE_RL_test_sig_awSig_snk_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_awSig_snk_warnDoPut = 1'b0 ;

  // rule RL_test_sig_wSig_snk_setCanPut
  assign CAN_FIRE_RL_test_sig_wSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_test_sig_wSig_snk_setCanPut = 1'd1 ;

  // rule RL_test_sig_wSig_snk_warnDoPut
  assign CAN_FIRE_RL_test_sig_wSig_snk_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_wSig_snk_warnDoPut = 1'b0 ;

  // rule RL_test_sig_bSig_src_setCanPeek
  assign CAN_FIRE_RL_test_sig_bSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_test_sig_bSig_src_setCanPeek = 1'd1 ;

  // rule RL_test_sig_bSig_src_setPeek
  assign CAN_FIRE_RL_test_sig_bSig_src_setPeek =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_test_sig_bSig_src_setPeek =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;

  // rule RL_test_sig_bSig_src_warnDoDrop
  assign CAN_FIRE_RL_test_sig_bSig_src_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_bSig_src_warnDoDrop = 1'b0 ;

  // rule RL_test_sig_arSig_snk_setCanPut
  assign CAN_FIRE_RL_test_sig_arSig_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_test_sig_arSig_snk_setCanPut = 1'd1 ;

  // rule RL_test_sig_arSig_snk_warnDoPut
  assign CAN_FIRE_RL_test_sig_arSig_snk_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_arSig_snk_warnDoPut = 1'b0 ;

  // rule RL_test_sig_rSig_src_setCanPeek
  assign CAN_FIRE_RL_test_sig_rSig_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_test_sig_rSig_src_setCanPeek = 1'd1 ;

  // rule RL_test_sig_rSig_src_setPeek
  assign CAN_FIRE_RL_test_sig_rSig_src_setPeek =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_test_sig_rSig_src_setPeek =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;

  // rule RL_test_sig_rSig_src_warnDoDrop
  assign CAN_FIRE_RL_test_sig_rSig_src_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_rSig_src_warnDoDrop = 1'b0 ;

  // rule RL_ug_src_setCanPeek
  assign CAN_FIRE_RL_ug_src_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_setCanPeek = 1'd1 ;

  // rule RL_ug_src_setPeek
  assign CAN_FIRE_RL_ug_src_setPeek =
	     m_otherPeripheralsPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_setPeek =
	     m_otherPeripheralsPortShim_awff$EMPTY_N ;

  // rule RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop =
	     m_otherPeripheralsPortShim_awff$EMPTY_N &&
	     m_otherPeripheralsPortShim_sig_awSig_src_dropWire$whas ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop ;

  // rule RL_ug_snk_setCanPut
  assign CAN_FIRE_RL_ug_snk_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_setCanPut = 1'd1 ;

  // rule RL_connect
  assign CAN_FIRE_RL_connect =
	     m_otherPeripheralsPortShim_awff$EMPTY_N &&
	     s_otherPeripheralsPortShim_awff$FULL_N ;
  assign WILL_FIRE_RL_connect = CAN_FIRE_RL_connect ;

  // rule RL_ug_src_warnDoDrop
  assign CAN_FIRE_RL_ug_src_warnDoDrop =
	     CAN_FIRE_RL_connect && !m_otherPeripheralsPortShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_warnDoDrop = CAN_FIRE_RL_ug_src_warnDoDrop ;

  // rule RL_ug_src_doDrop
  assign CAN_FIRE_RL_ug_src_doDrop =
	     m_otherPeripheralsPortShim_awff$EMPTY_N && CAN_FIRE_RL_connect ;
  assign WILL_FIRE_RL_ug_src_doDrop =
	     CAN_FIRE_RL_ug_src_doDrop &&
	     !WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop ;

  // rule RL_ug_snk_warnDoPut
  assign CAN_FIRE_RL_ug_snk_warnDoPut =
	     CAN_FIRE_RL_connect && !s_otherPeripheralsPortShim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_warnDoPut = CAN_FIRE_RL_ug_snk_warnDoPut ;

  // rule RL_ug_src_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_setCanPeek = 1'd1 ;

  // rule RL_ug_src_1_setPeek
  assign CAN_FIRE_RL_ug_src_1_setPeek =
	     m_otherPeripheralsPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_setPeek =
	     m_otherPeripheralsPortShim_wff$EMPTY_N ;

  // rule RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop =
	     m_otherPeripheralsPortShim_wff$EMPTY_N &&
	     m_otherPeripheralsPortShim_sig_wSig_src_dropWire$whas ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop ;

  // rule RL_ug_snk_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_setCanPut = 1'd1 ;

  // rule RL_connect_1
  assign CAN_FIRE_RL_connect_1 =
	     m_otherPeripheralsPortShim_wff$EMPTY_N &&
	     s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_connect_1 = CAN_FIRE_RL_connect_1 ;

  // rule RL_ug_src_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop =
	     CAN_FIRE_RL_connect_1 &&
	     !m_otherPeripheralsPortShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop = CAN_FIRE_RL_ug_src_1_warnDoDrop ;

  // rule RL_ug_src_1_doDrop
  assign CAN_FIRE_RL_ug_src_1_doDrop =
	     m_otherPeripheralsPortShim_wff$EMPTY_N && CAN_FIRE_RL_connect_1 ;
  assign WILL_FIRE_RL_ug_src_1_doDrop =
	     CAN_FIRE_RL_ug_src_1_doDrop &&
	     !WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop ;

  // rule RL_ug_snk_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut =
	     CAN_FIRE_RL_connect_1 && !s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut = CAN_FIRE_RL_ug_snk_1_warnDoPut ;

  // rule RL_ug_src_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_setPeek =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_setPeek =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;

  // rule RL_ug_snk_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_setCanPut = 1'd1 ;

  // rule RL_connect_2
  assign CAN_FIRE_RL_connect_2 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     m_otherPeripheralsPortShim_bff$FULL_N ;
  assign WILL_FIRE_RL_connect_2 = CAN_FIRE_RL_connect_2 ;

  // rule RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut =
	     m_otherPeripheralsPortShim_bff$FULL_N &&
	     m_otherPeripheralsPortShim_sig_bSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut ;

  // rule RL_ug_src_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop =
	     CAN_FIRE_RL_connect_2 &&
	     !s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop = CAN_FIRE_RL_ug_src_2_warnDoDrop ;

  // rule RL_ug_snk_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_warnDoPut =
	     CAN_FIRE_RL_connect_2 && !m_otherPeripheralsPortShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_2_warnDoPut = CAN_FIRE_RL_ug_snk_2_warnDoPut ;

  // rule RL_ug_snk_2_doPut
  assign CAN_FIRE_RL_ug_snk_2_doPut =
	     m_otherPeripheralsPortShim_bff$FULL_N && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_snk_2_doPut =
	     CAN_FIRE_RL_ug_snk_2_doPut &&
	     !WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut ;

  // rule RL_ug_src_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_setCanPeek = 1'd1 ;

  // rule RL_ug_src_3_setPeek
  assign CAN_FIRE_RL_ug_src_3_setPeek =
	     m_otherPeripheralsPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_setPeek =
	     m_otherPeripheralsPortShim_arff$EMPTY_N ;

  // rule RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop =
	     m_otherPeripheralsPortShim_arff$EMPTY_N &&
	     m_otherPeripheralsPortShim_sig_arSig_src_dropWire$whas ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop ;

  // rule RL_ug_snk_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_setCanPut = 1'd1 ;

  // rule RL_connect_3
  assign CAN_FIRE_RL_connect_3 =
	     m_otherPeripheralsPortShim_arff$EMPTY_N &&
	     s_otherPeripheralsPortShim_arff$FULL_N ;
  assign WILL_FIRE_RL_connect_3 = CAN_FIRE_RL_connect_3 ;

  // rule RL_ug_src_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_warnDoDrop =
	     CAN_FIRE_RL_connect_3 &&
	     !m_otherPeripheralsPortShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_warnDoDrop = CAN_FIRE_RL_ug_src_3_warnDoDrop ;

  // rule RL_ug_src_3_doDrop
  assign CAN_FIRE_RL_ug_src_3_doDrop =
	     m_otherPeripheralsPortShim_arff$EMPTY_N &&
	     CAN_FIRE_RL_connect_3 ;
  assign WILL_FIRE_RL_ug_src_3_doDrop =
	     CAN_FIRE_RL_ug_src_3_doDrop &&
	     !WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop ;

  // rule RL_ug_snk_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_warnDoPut =
	     CAN_FIRE_RL_connect_3 &&
	     !s_otherPeripheralsPortShim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_3_warnDoPut = CAN_FIRE_RL_ug_snk_3_warnDoPut ;

  // rule RL_ug_src_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_4_setCanPeek = 1'd1 ;

  // rule RL_ug_src_4_setPeek
  assign CAN_FIRE_RL_ug_src_4_setPeek =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_setPeek =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;

  // rule RL_ug_snk_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_4_setCanPut = 1'd1 ;

  // rule RL_connect_4
  assign CAN_FIRE_RL_connect_4 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     m_otherPeripheralsPortShim_rff$FULL_N ;
  assign WILL_FIRE_RL_connect_4 = CAN_FIRE_RL_connect_4 ;

  // rule RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut
  assign CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut =
	     m_otherPeripheralsPortShim_rff$FULL_N &&
	     m_otherPeripheralsPortShim_sig_rSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut =
	     CAN_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut ;

  // rule RL_ug_src_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_4_warnDoDrop =
	     CAN_FIRE_RL_connect_4 &&
	     !s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_4_warnDoDrop = CAN_FIRE_RL_ug_src_4_warnDoDrop ;

  // rule RL_ug_snk_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_4_warnDoPut =
	     CAN_FIRE_RL_connect_4 && !m_otherPeripheralsPortShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_4_warnDoPut = CAN_FIRE_RL_ug_snk_4_warnDoPut ;

  // rule RL_ug_snk_4_doPut
  assign CAN_FIRE_RL_ug_snk_4_doPut =
	     m_otherPeripheralsPortShim_rff$FULL_N && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_snk_4_doPut =
	     CAN_FIRE_RL_ug_snk_4_doPut &&
	     !WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut ;

  // rule RL_ug_src_1_setCanPeek_1
  assign CAN_FIRE_RL_ug_src_1_setCanPeek_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_setCanPeek_1 = 1'd1 ;

  // rule RL_ug_snk_1_setCanPut_1
  assign CAN_FIRE_RL_ug_snk_1_setCanPut_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_setCanPut_1 = 1'd1 ;

  // rule RL_connect_5
  assign CAN_FIRE_RL_connect_5 = 1'b0 ;
  assign WILL_FIRE_RL_connect_5 = 1'b0 ;

  // rule RL_ug_src_1_warnDoDrop_1
  assign CAN_FIRE_RL_ug_src_1_warnDoDrop_1 = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_1_warnDoDrop_1 = 1'b0 ;

  // rule RL_ug_snk_1_warnDoPut_1
  assign CAN_FIRE_RL_ug_snk_1_warnDoPut_1 = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_warnDoPut_1 = 1'b0 ;

  // rule RL_ug_snk_1_doPut_1
  assign CAN_FIRE_RL_ug_snk_1_doPut_1 = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut_1 = 1'b0 ;

  // rule RL_ug_src_1_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_1_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_1_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_1_setCanPut = 1'd1 ;

  // rule RL_connect_6
  assign CAN_FIRE_RL_connect_6 = 1'b0 ;
  assign WILL_FIRE_RL_connect_6 = 1'b0 ;

  // rule RL_ug_src_1_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_1_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_1_1_warnDoDrop = 1'b0 ;

  // rule RL_ug_snk_1_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_1_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_1_warnDoPut = 1'b0 ;

  // rule RL_ug_snk_1_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_1_doPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_1_doPut = 1'b0 ;

  // rule RL_ug_src_1_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_2_setCanPeek = 1'd1 ;

  // rule RL_ug_src_1_2_setPeek
  assign CAN_FIRE_RL_ug_src_1_2_setPeek = core$RDY_dma_server_b_peek ;
  assign WILL_FIRE_RL_ug_src_1_2_setPeek = core$RDY_dma_server_b_peek ;

  // rule RL_ug_snk_1_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_2_setCanPut = 1'd1 ;

  // rule RL_connect_7
  assign CAN_FIRE_RL_connect_7 = core$dma_server_b_canPeek ;
  assign WILL_FIRE_RL_connect_7 = core$dma_server_b_canPeek ;

  // rule RL_ug_src_1_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_2_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_1_2_warnDoDrop = 1'b0 ;

  // rule RL_ug_src_1_2_doDrop
  assign CAN_FIRE_RL_ug_src_1_2_doDrop =
	     core$RDY_dma_server_b_drop && core$dma_server_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_2_doDrop = CAN_FIRE_RL_ug_src_1_2_doDrop ;

  // rule RL_ug_src_1_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_3_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_1_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_3_setCanPut = 1'd1 ;

  // rule RL_connect_8
  assign CAN_FIRE_RL_connect_8 = 1'b0 ;
  assign WILL_FIRE_RL_connect_8 = 1'b0 ;

  // rule RL_ug_src_1_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_3_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_1_3_warnDoDrop = 1'b0 ;

  // rule RL_ug_snk_1_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_1_3_warnDoPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_3_warnDoPut = 1'b0 ;

  // rule RL_ug_snk_1_3_doPut
  assign CAN_FIRE_RL_ug_snk_1_3_doPut = 1'b0 ;
  assign WILL_FIRE_RL_ug_snk_1_3_doPut = 1'b0 ;

  // rule RL_ug_src_1_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_1_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_1_4_setCanPeek = 1'd1 ;

  // rule RL_ug_src_1_4_setPeek
  assign CAN_FIRE_RL_ug_src_1_4_setPeek = core$RDY_dma_server_r_peek ;
  assign WILL_FIRE_RL_ug_src_1_4_setPeek = core$RDY_dma_server_r_peek ;

  // rule RL_ug_snk_1_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_1_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_1_4_setCanPut = 1'd1 ;

  // rule RL_connect_9
  assign CAN_FIRE_RL_connect_9 = core$dma_server_r_canPeek ;
  assign WILL_FIRE_RL_connect_9 = core$dma_server_r_canPeek ;

  // rule RL_ug_src_1_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_1_4_warnDoDrop = 1'b0 ;
  assign WILL_FIRE_RL_ug_src_1_4_warnDoDrop = 1'b0 ;

  // rule RL_ug_src_1_4_doDrop
  assign CAN_FIRE_RL_ug_src_1_4_doDrop =
	     core$RDY_dma_server_r_drop && core$dma_server_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_1_4_doDrop = CAN_FIRE_RL_ug_src_1_4_doDrop ;

  // rule RL_ug_src_2_setCanPeek_1
  assign CAN_FIRE_RL_ug_src_2_setCanPeek_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_setCanPeek_1 = 1'd1 ;

  // rule RL_ug_src_2_setPeek_1
  assign CAN_FIRE_RL_ug_src_2_setPeek_1 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_setPeek_1 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N ;

  // rule RL_ug_snk_2_setCanPut_1
  assign CAN_FIRE_RL_ug_snk_2_setCanPut_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_setCanPut_1 = 1'd1 ;

  // rule RL_connect_10
  assign CAN_FIRE_RL_connect_10 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N &&
	     boot_rom$slave_aw_canPut ;
  assign WILL_FIRE_RL_connect_10 = CAN_FIRE_RL_connect_10 ;

  // rule RL_ug_src_2_warnDoDrop_1
  assign CAN_FIRE_RL_ug_src_2_warnDoDrop_1 =
	     CAN_FIRE_RL_connect_10 &&
	     !boot_rom_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_warnDoDrop_1 =
	     CAN_FIRE_RL_ug_src_2_warnDoDrop_1 ;

  // rule RL_ug_src_2_doDrop_1
  assign CAN_FIRE_RL_ug_src_2_doDrop_1 =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N &&
	     CAN_FIRE_RL_connect_10 ;
  assign WILL_FIRE_RL_ug_src_2_doDrop_1 = CAN_FIRE_RL_ug_src_2_doDrop_1 ;

  // rule RL_ug_snk_2_warnDoPut_1
  assign CAN_FIRE_RL_ug_snk_2_warnDoPut_1 =
	     CAN_FIRE_RL_connect_10 && !boot_rom$slave_aw_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_warnDoPut_1 =
	     CAN_FIRE_RL_ug_snk_2_warnDoPut_1 ;

  // rule RL_ug_src_2_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_1_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_1_setPeek
  assign CAN_FIRE_RL_ug_src_2_1_setPeek =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_1_setPeek =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N ;

  // rule RL_ug_snk_2_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_1_setCanPut = 1'd1 ;

  // rule RL_connect_11
  assign CAN_FIRE_RL_connect_11 =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N &&
	     boot_rom$slave_w_canPut ;
  assign WILL_FIRE_RL_connect_11 = CAN_FIRE_RL_connect_11 ;

  // rule RL_ug_src_2_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_1_warnDoDrop =
	     CAN_FIRE_RL_connect_11 &&
	     !boot_rom_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_1_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_1_warnDoDrop ;

  // rule RL_ug_src_2_1_doDrop
  assign CAN_FIRE_RL_ug_src_2_1_doDrop =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N &&
	     CAN_FIRE_RL_connect_11 ;
  assign WILL_FIRE_RL_ug_src_2_1_doDrop = CAN_FIRE_RL_ug_src_2_1_doDrop ;

  // rule RL_ug_snk_2_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_1_warnDoPut =
	     CAN_FIRE_RL_connect_11 && !boot_rom$slave_w_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_1_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_1_warnDoPut ;

  // rule RL_ug_src_2_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_2_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_2_doPut_1
  assign CAN_FIRE_RL_ug_snk_2_doPut_1 =
	     boot_rom$RDY_slave_aw_put && CAN_FIRE_RL_connect_10 ;
  assign WILL_FIRE_RL_ug_snk_2_doPut_1 = CAN_FIRE_RL_ug_snk_2_doPut_1 ;

  // rule RL_ug_snk_2_1_doPut
  assign CAN_FIRE_RL_ug_snk_2_1_doPut =
	     boot_rom$RDY_slave_w_put && CAN_FIRE_RL_connect_11 ;
  assign WILL_FIRE_RL_ug_snk_2_1_doPut = CAN_FIRE_RL_ug_snk_2_1_doPut ;

  // rule RL_ug_src_2_2_setPeek
  assign CAN_FIRE_RL_ug_src_2_2_setPeek = boot_rom$RDY_slave_b_peek ;
  assign WILL_FIRE_RL_ug_src_2_2_setPeek = boot_rom$RDY_slave_b_peek ;

  // rule RL_ug_snk_2_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_2_setCanPut = 1'd1 ;

  // rule RL_connect_12
  assign CAN_FIRE_RL_connect_12 =
	     boot_rom$slave_b_canPeek &&
	     boot_rom_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_connect_12 = CAN_FIRE_RL_connect_12 ;

  // rule RL_ug_src_2_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_2_warnDoDrop =
	     CAN_FIRE_RL_connect_12 && !boot_rom$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_2_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_2_warnDoDrop ;

  // rule RL_ug_src_2_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_2_doDrop =
	     boot_rom$RDY_slave_b_drop && CAN_FIRE_RL_connect_12 &&
	     boot_rom$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_2_doDrop = CAN_FIRE_RL_ug_src_2_2_doDrop ;

  // rule RL_ug_snk_2_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_2_warnDoPut =
	     CAN_FIRE_RL_connect_12 &&
	     !boot_rom_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_2_2_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_2_warnDoPut ;

  // rule RL_boot_rom_axi4_deburster_consume_bresp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_consume_bresp =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_consume_bresp =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ;

  // rule RL_boot_rom_axi4_deburster_produce_bresp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp =
	     !boot_rom_axi4_deburster_inSerial_shim_bff_rv[9] &&
	     boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_flitReceived$port1__read[17:9] >
	     { 1'd0, boot_rom_axi4_deburster_countWriteRspFF$D_OUT } ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_produce_bresp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ;

  // rule RL_ug_snk_2_2_doPut
  assign CAN_FIRE_RL_ug_snk_2_2_doPut =
	     boot_rom_axi4_deburster_outShim_bff$FULL_N &&
	     CAN_FIRE_RL_connect_12 ;
  assign WILL_FIRE_RL_ug_snk_2_2_doPut = CAN_FIRE_RL_ug_snk_2_2_doPut ;

  // rule RL_ug_src_2_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_3_setCanPeek = 1'd1 ;

  // rule RL_ug_src_2_3_setPeek
  assign CAN_FIRE_RL_ug_src_2_3_setPeek =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_3_setPeek =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N ;

  // rule RL_ug_snk_2_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_3_setCanPut = 1'd1 ;

  // rule RL_connect_13
  assign CAN_FIRE_RL_connect_13 =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N &&
	     boot_rom$slave_ar_canPut ;
  assign WILL_FIRE_RL_connect_13 = CAN_FIRE_RL_connect_13 ;

  // rule RL_ug_src_2_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_3_warnDoDrop =
	     CAN_FIRE_RL_connect_13 &&
	     !boot_rom_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_2_3_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_3_warnDoDrop ;

  // rule RL_ug_src_2_3_doDrop
  assign CAN_FIRE_RL_ug_src_2_3_doDrop =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N &&
	     CAN_FIRE_RL_connect_13 ;
  assign WILL_FIRE_RL_ug_src_2_3_doDrop = CAN_FIRE_RL_ug_src_2_3_doDrop ;

  // rule RL_ug_snk_2_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_3_warnDoPut =
	     CAN_FIRE_RL_connect_13 && !boot_rom$slave_ar_canPut ;
  assign WILL_FIRE_RL_ug_snk_2_3_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_3_warnDoPut ;

  // rule RL_ug_src_2_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_2_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_2_4_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_2_3_doPut
  assign CAN_FIRE_RL_ug_snk_2_3_doPut =
	     boot_rom$RDY_slave_ar_put && CAN_FIRE_RL_connect_13 ;
  assign WILL_FIRE_RL_ug_snk_2_3_doPut = CAN_FIRE_RL_ug_snk_2_3_doPut ;

  // rule RL_ug_src_2_4_setPeek
  assign CAN_FIRE_RL_ug_src_2_4_setPeek = boot_rom$RDY_slave_r_peek ;
  assign WILL_FIRE_RL_ug_src_2_4_setPeek = boot_rom$RDY_slave_r_peek ;

  // rule RL_ug_snk_2_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_2_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_2_4_setCanPut = 1'd1 ;

  // rule RL_connect_14
  assign CAN_FIRE_RL_connect_14 =
	     boot_rom$slave_r_canPeek &&
	     boot_rom_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_connect_14 = CAN_FIRE_RL_connect_14 ;

  // rule RL_ug_src_2_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_2_4_warnDoDrop =
	     CAN_FIRE_RL_connect_14 && !boot_rom$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_4_warnDoDrop =
	     CAN_FIRE_RL_ug_src_2_4_warnDoDrop ;

  // rule RL_ug_src_2_4_doDrop
  assign CAN_FIRE_RL_ug_src_2_4_doDrop =
	     boot_rom$RDY_slave_r_drop && CAN_FIRE_RL_connect_14 &&
	     boot_rom$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_2_4_doDrop = CAN_FIRE_RL_ug_src_2_4_doDrop ;

  // rule RL_ug_snk_2_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_2_4_warnDoPut =
	     CAN_FIRE_RL_connect_14 &&
	     !boot_rom_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_2_4_warnDoPut =
	     CAN_FIRE_RL_ug_snk_2_4_warnDoPut ;

  // rule RL_boot_rom_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     !boot_rom_axi4_deburster_inSerial_shim_rff_rv[74] &&
	     boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;

  // rule RL_ug_snk_2_4_doPut
  assign CAN_FIRE_RL_ug_snk_2_4_doPut =
	     boot_rom_axi4_deburster_outShim_rff$FULL_N &&
	     CAN_FIRE_RL_connect_14 ;
  assign WILL_FIRE_RL_ug_snk_2_4_doPut = CAN_FIRE_RL_ug_snk_2_4_doPut ;

  // rule RL_ug_src_3_setCanPeek_1
  assign CAN_FIRE_RL_ug_src_3_setCanPeek_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_setCanPeek_1 = 1'd1 ;

  // rule RL_ug_src_3_setPeek_1
  assign CAN_FIRE_RL_ug_src_3_setPeek_1 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_setPeek_1 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N ;

  // rule RL_ug_snk_3_setCanPut_1
  assign CAN_FIRE_RL_ug_snk_3_setCanPut_1 = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_setCanPut_1 = 1'd1 ;

  // rule RL_connect_15
  assign CAN_FIRE_RL_connect_15 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N &&
	     mem0_controller$slave_aw_canPut ;
  assign WILL_FIRE_RL_connect_15 = CAN_FIRE_RL_connect_15 ;

  // rule RL_ug_src_3_warnDoDrop_1
  assign CAN_FIRE_RL_ug_src_3_warnDoDrop_1 =
	     CAN_FIRE_RL_connect_15 &&
	     !mem0_controller_axi4_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_warnDoDrop_1 =
	     CAN_FIRE_RL_ug_src_3_warnDoDrop_1 ;

  // rule RL_ug_src_3_doDrop_1
  assign CAN_FIRE_RL_ug_src_3_doDrop_1 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N &&
	     CAN_FIRE_RL_connect_15 ;
  assign WILL_FIRE_RL_ug_src_3_doDrop_1 = CAN_FIRE_RL_ug_src_3_doDrop_1 ;

  // rule RL_ug_snk_3_warnDoPut_1
  assign CAN_FIRE_RL_ug_snk_3_warnDoPut_1 =
	     CAN_FIRE_RL_connect_15 && !mem0_controller$slave_aw_canPut ;
  assign WILL_FIRE_RL_ug_snk_3_warnDoPut_1 =
	     CAN_FIRE_RL_ug_snk_3_warnDoPut_1 ;

  // rule RL_ug_src_3_1_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_1_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_1_setCanPeek = 1'd1 ;

  // rule RL_ug_src_3_1_setPeek
  assign CAN_FIRE_RL_ug_src_3_1_setPeek =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_1_setPeek =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N ;

  // rule RL_ug_snk_3_1_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_1_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_1_setCanPut = 1'd1 ;

  // rule RL_connect_16
  assign CAN_FIRE_RL_connect_16 =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N &&
	     mem0_controller$slave_w_canPut ;
  assign WILL_FIRE_RL_connect_16 = CAN_FIRE_RL_connect_16 ;

  // rule RL_ug_src_3_1_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_1_warnDoDrop =
	     CAN_FIRE_RL_connect_16 &&
	     !mem0_controller_axi4_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_1_warnDoDrop =
	     CAN_FIRE_RL_ug_src_3_1_warnDoDrop ;

  // rule RL_ug_src_3_1_doDrop
  assign CAN_FIRE_RL_ug_src_3_1_doDrop =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N &&
	     CAN_FIRE_RL_connect_16 ;
  assign WILL_FIRE_RL_ug_src_3_1_doDrop = CAN_FIRE_RL_ug_src_3_1_doDrop ;

  // rule RL_ug_snk_3_1_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_1_warnDoPut =
	     CAN_FIRE_RL_connect_16 && !mem0_controller$slave_w_canPut ;
  assign WILL_FIRE_RL_ug_snk_3_1_warnDoPut =
	     CAN_FIRE_RL_ug_snk_3_1_warnDoPut ;

  // rule RL_ug_src_3_2_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_2_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_2_setCanPeek = 1'd1 ;

  // rule RL_ug_src_3_2_setPeek
  assign CAN_FIRE_RL_ug_src_3_2_setPeek = mem0_controller$RDY_slave_b_peek ;
  assign WILL_FIRE_RL_ug_src_3_2_setPeek = mem0_controller$RDY_slave_b_peek ;

  // rule RL_ug_snk_3_2_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_2_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_2_setCanPut = 1'd1 ;

  // rule RL_connect_17
  assign CAN_FIRE_RL_connect_17 =
	     mem0_controller$slave_b_canPeek &&
	     mem0_controller_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_connect_17 = CAN_FIRE_RL_connect_17 ;

  // rule RL_ug_src_3_2_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_2_warnDoDrop =
	     CAN_FIRE_RL_connect_17 && !mem0_controller$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_2_warnDoDrop =
	     CAN_FIRE_RL_ug_src_3_2_warnDoDrop ;

  // rule RL_ug_src_3_2_doDrop
  assign CAN_FIRE_RL_ug_src_3_2_doDrop =
	     mem0_controller$RDY_slave_b_drop && CAN_FIRE_RL_connect_17 &&
	     mem0_controller$slave_b_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_2_doDrop = CAN_FIRE_RL_ug_src_3_2_doDrop ;

  // rule RL_ug_snk_3_2_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_2_warnDoPut =
	     CAN_FIRE_RL_connect_17 &&
	     !mem0_controller_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_3_2_warnDoPut =
	     CAN_FIRE_RL_ug_snk_3_2_warnDoPut ;

  // rule RL_mem0_controller_axi4_deburster_consume_bresp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_consume_bresp =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ;

  // rule RL_mem0_controller_axi4_deburster_produce_bresp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp =
	     !mem0_controller_axi4_deburster_inSerial_shim_bff_rv[9] &&
	     mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_flitReceived$port1__read[17:9] >
	     { 1'd0, mem0_controller_axi4_deburster_countWriteRspFF$D_OUT } ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ;

  // rule RL_ug_snk_3_2_doPut
  assign CAN_FIRE_RL_ug_snk_3_2_doPut =
	     mem0_controller_axi4_deburster_outShim_bff$FULL_N &&
	     CAN_FIRE_RL_connect_17 ;
  assign WILL_FIRE_RL_ug_snk_3_2_doPut = CAN_FIRE_RL_ug_snk_3_2_doPut ;

  // rule RL_ug_src_3_3_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_3_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_3_setCanPeek = 1'd1 ;

  // rule RL_ug_src_3_3_setPeek
  assign CAN_FIRE_RL_ug_src_3_3_setPeek =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_3_setPeek =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N ;

  // rule RL_ug_snk_3_3_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_3_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_3_setCanPut = 1'd1 ;

  // rule RL_connect_18
  assign CAN_FIRE_RL_connect_18 =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N &&
	     mem0_controller$slave_ar_canPut ;
  assign WILL_FIRE_RL_connect_18 = CAN_FIRE_RL_connect_18 ;

  // rule RL_ug_src_3_3_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_3_warnDoDrop =
	     CAN_FIRE_RL_connect_18 &&
	     !mem0_controller_axi4_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_src_3_3_warnDoDrop =
	     CAN_FIRE_RL_ug_src_3_3_warnDoDrop ;

  // rule RL_ug_src_3_3_doDrop
  assign CAN_FIRE_RL_ug_src_3_3_doDrop =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N &&
	     CAN_FIRE_RL_connect_18 ;
  assign WILL_FIRE_RL_ug_src_3_3_doDrop = CAN_FIRE_RL_ug_src_3_3_doDrop ;

  // rule RL_ug_snk_3_3_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_3_warnDoPut =
	     CAN_FIRE_RL_connect_18 && !mem0_controller$slave_ar_canPut ;
  assign WILL_FIRE_RL_ug_snk_3_3_warnDoPut =
	     CAN_FIRE_RL_ug_snk_3_3_warnDoPut ;

  // rule RL_ug_src_3_4_setCanPeek
  assign CAN_FIRE_RL_ug_src_3_4_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_ug_src_3_4_setCanPeek = 1'd1 ;

  // rule RL_ug_snk_3_doPut_1
  assign CAN_FIRE_RL_ug_snk_3_doPut_1 =
	     mem0_controller$RDY_slave_aw_put && CAN_FIRE_RL_connect_15 ;
  assign WILL_FIRE_RL_ug_snk_3_doPut_1 = CAN_FIRE_RL_ug_snk_3_doPut_1 ;

  // rule RL_ug_snk_3_1_doPut
  assign CAN_FIRE_RL_ug_snk_3_1_doPut =
	     mem0_controller$RDY_slave_w_put && CAN_FIRE_RL_connect_16 ;
  assign WILL_FIRE_RL_ug_snk_3_1_doPut = CAN_FIRE_RL_ug_snk_3_1_doPut ;

  // rule RL_ug_snk_3_3_doPut
  assign CAN_FIRE_RL_ug_snk_3_3_doPut =
	     mem0_controller$RDY_slave_ar_put && CAN_FIRE_RL_connect_18 ;
  assign WILL_FIRE_RL_ug_snk_3_3_doPut = CAN_FIRE_RL_ug_snk_3_3_doPut ;

  // rule RL_ug_src_3_4_setPeek
  assign CAN_FIRE_RL_ug_src_3_4_setPeek = mem0_controller$RDY_slave_r_peek ;
  assign WILL_FIRE_RL_ug_src_3_4_setPeek = mem0_controller$RDY_slave_r_peek ;

  // rule RL_ug_snk_3_4_setCanPut
  assign CAN_FIRE_RL_ug_snk_3_4_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_ug_snk_3_4_setCanPut = 1'd1 ;

  // rule RL_connect_19
  assign CAN_FIRE_RL_connect_19 =
	     mem0_controller$slave_r_canPeek &&
	     mem0_controller_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_connect_19 = CAN_FIRE_RL_connect_19 ;

  // rule RL_ug_src_3_4_warnDoDrop
  assign CAN_FIRE_RL_ug_src_3_4_warnDoDrop =
	     CAN_FIRE_RL_connect_19 && !mem0_controller$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_4_warnDoDrop =
	     CAN_FIRE_RL_ug_src_3_4_warnDoDrop ;

  // rule RL_ug_src_3_4_doDrop
  assign CAN_FIRE_RL_ug_src_3_4_doDrop =
	     mem0_controller$RDY_slave_r_drop && CAN_FIRE_RL_connect_19 &&
	     mem0_controller$slave_r_canPeek ;
  assign WILL_FIRE_RL_ug_src_3_4_doDrop = CAN_FIRE_RL_ug_src_3_4_doDrop ;

  // rule RL_ug_snk_3_4_warnDoPut
  assign CAN_FIRE_RL_ug_snk_3_4_warnDoPut =
	     CAN_FIRE_RL_connect_19 &&
	     !mem0_controller_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ug_snk_3_4_warnDoPut =
	     CAN_FIRE_RL_ug_snk_3_4_warnDoPut ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     !mem0_controller_axi4_deburster_inSerial_shim_rff_rv[74] &&
	     mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;

  // rule RL_ug_snk_3_4_doPut
  assign CAN_FIRE_RL_ug_snk_3_4_doPut =
	     mem0_controller_axi4_deburster_outShim_rff$FULL_N &&
	     CAN_FIRE_RL_connect_19 ;
  assign WILL_FIRE_RL_ug_snk_3_4_doPut = CAN_FIRE_RL_ug_snk_3_4_doPut ;

  // rule RL_bus_set_input_canPeek_wire
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire = 1'd1 ;

  // rule RL_bus_set_input_canPeek_wire_1
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_1 = 1'd1 ;

  // rule RL_bus_set_dflt_output_canPut_wire
  assign CAN_FIRE_RL_bus_set_dflt_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_dflt_output_canPut_wire = 1'd1 ;

  // rule RL_bus_set_input_canPeek_wire_2
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_2 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_2
  assign CAN_FIRE_RL_bus_set_input_peek_wires_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N ;

  // rule RL_bus_set_input_canPeek_wire_3
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_3 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_3
  assign CAN_FIRE_RL_bus_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_bus_set_input_canPeek_wire_4
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_4 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_4
  assign CAN_FIRE_RL_bus_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_bus_set_input_canPeek_wire_5
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_5 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_5
  assign CAN_FIRE_RL_bus_set_input_peek_wires_5 = uart0$RDY_slave_b_peek ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_5 = uart0$RDY_slave_b_peek ;

  // rule RL_bus_set_input_canPeek_wire_6
  assign CAN_FIRE_RL_bus_set_input_canPeek_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_input_canPeek_wire_6 = 1'd1 ;

  // rule RL_bus_set_input_peek_wires_6
  assign CAN_FIRE_RL_bus_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;

  // rule RL_test_sig_bSig_src_doDrop
  assign CAN_FIRE_RL_test_sig_bSig_src_doDrop = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_bSig_src_doDrop = 1'b0 ;

  // rule RL_ug_src_2_doDrop
  assign CAN_FIRE_RL_ug_src_2_doDrop =
	     s_otherPeripheralsPortShim_bff$EMPTY_N && CAN_FIRE_RL_connect_2 ;
  assign WILL_FIRE_RL_ug_src_2_doDrop =
	     CAN_FIRE_RL_ug_src_2_doDrop && !EN_other_peripherals_b_drop ;

  // rule RL_bus_set_output_canPut_wire_4
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_4 = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_5
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_5 = 1'd1 ;

  // rule RL_core_mem_master_sig_bSig_snk_doPut
  assign CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut =
	     core$RDY_core_mem_master_b_put &&
	     core_mem_master_sig_bSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut =
	     CAN_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ;

  // rule RL_bus_arbitrate_1
  assign CAN_FIRE_RL_bus_arbitrate_1 =
	     bus_inputCanPeek_0_1_whas__720_AND_bus_inputCa_ETC___d1806 &&
	     !bus_moreFlits_1[7] ;
  assign WILL_FIRE_RL_bus_arbitrate_1 = CAN_FIRE_RL_bus_arbitrate_1 ;

  // rule RL_bus_arbitration_fail_2
  assign CAN_FIRE_RL_bus_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_0_1$wget &&
	     !bus_noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_arbitration_fail_2 ;

  // rule RL_bus_legal_destination_fail_2
  assign CAN_FIRE_RL_bus_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_0_1$wget &&
	     bus_noRouteSlv_rspFF$EMPTY_N &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_legal_destination_fail_2 ;

  // rule RL_bus_arbitration_fail_3
  assign CAN_FIRE_RL_bus_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_1_1$wget &&
	     !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_arbitration_fail_3 ;

  // rule RL_bus_legal_destination_fail_3
  assign CAN_FIRE_RL_bus_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_legal_destination_fail_3 ;

  // rule RL_bus_arbitration_fail_4
  assign CAN_FIRE_RL_bus_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_2$wget &&
	     !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_arbitration_fail_4 ;

  // rule RL_bus_legal_destination_fail_4
  assign CAN_FIRE_RL_bus_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_legal_destination_fail_4 ;

  // rule RL_bus_arbitration_fail_5
  assign CAN_FIRE_RL_bus_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_3$wget &&
	     !uart0$slave_b_canPeek ;
  assign WILL_FIRE_RL_bus_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_arbitration_fail_5 ;

  // rule RL_bus_legal_destination_fail_5
  assign CAN_FIRE_RL_bus_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_3$wget &&
	     uart0$slave_b_canPeek &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_legal_destination_fail_5 ;

  // rule RL_bus_arbitration_fail_6
  assign CAN_FIRE_RL_bus_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_4$wget &&
	     !s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_arbitration_fail_6 ;

  // rule RL_bus_legal_destination_fail_6
  assign CAN_FIRE_RL_bus_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_arbitrate_1 && bus_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_legal_destination_fail_6 ;

  // rule RL_bus_input_first_flit_3
  assign CAN_FIRE_RL_bus_input_first_flit_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_3 =
	     CAN_FIRE_RL_bus_input_first_flit_3 ;

  // rule RL_bus_input_follow_flit_3
  assign CAN_FIRE_RL_bus_input_follow_flit_3 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_moreFlits_1[7] &&
	     bus_moreFlits_1[3] &&
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_3 =
	     CAN_FIRE_RL_bus_input_follow_flit_3 ;

  // rule __me_check_327
  assign CAN_FIRE___me_check_327 = 1'b1 ;
  assign WILL_FIRE___me_check_327 = 1'b1 ;

  // rule RL_bus_input_first_flit_4
  assign CAN_FIRE_RL_bus_input_first_flit_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_4 =
	     CAN_FIRE_RL_bus_input_first_flit_4 ;

  // rule RL_bus_input_follow_flit_4
  assign CAN_FIRE_RL_bus_input_follow_flit_4 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_moreFlits_1[7] &&
	     bus_moreFlits_1[4] &&
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_4 =
	     CAN_FIRE_RL_bus_input_follow_flit_4 ;

  // rule __me_check_329
  assign CAN_FIRE___me_check_329 = 1'b1 ;
  assign WILL_FIRE___me_check_329 = 1'b1 ;

  // rule RL_bus_input_first_flit_5
  assign CAN_FIRE_RL_bus_input_first_flit_5 =
	     uart0$RDY_slave_b_drop && !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_3$wget &&
	     uart0$slave_b_canPeek ;
  assign WILL_FIRE_RL_bus_input_first_flit_5 =
	     CAN_FIRE_RL_bus_input_first_flit_5 ;

  // rule RL_bus_input_follow_flit_5
  assign CAN_FIRE_RL_bus_input_follow_flit_5 =
	     uart0$RDY_slave_b_drop && bus_moreFlits_1[7] &&
	     bus_moreFlits_1[5] &&
	     uart0$slave_b_canPeek &&
	     IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_5 =
	     CAN_FIRE_RL_bus_input_follow_flit_5 ;

  // rule __me_check_331
  assign CAN_FIRE___me_check_331 = 1'b1 ;
  assign WILL_FIRE___me_check_331 = 1'b1 ;

  // rule RL_bus_input_first_flit_6
  assign CAN_FIRE_RL_bus_input_first_flit_6 =
	     !bus_moreFlits_1[7] && CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_6 =
	     CAN_FIRE_RL_bus_input_first_flit_6 &&
	     !WILL_FIRE_RL_ug_src_2_doDrop &&
	     !EN_other_peripherals_b_drop ;

  // rule RL_bus_input_follow_flit_6
  assign CAN_FIRE_RL_bus_input_follow_flit_6 =
	     bus_moreFlits_1[7] && bus_moreFlits_1[6] &&
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_6 =
	     CAN_FIRE_RL_bus_input_follow_flit_6 &&
	     !WILL_FIRE_RL_ug_src_2_doDrop &&
	     !EN_other_peripherals_b_drop ;

  // rule __me_check_333
  assign CAN_FIRE___me_check_333 = 1'b1 ;
  assign WILL_FIRE___me_check_333 = 1'b1 ;

  // rule RL_bus_merged_0_passFlit
  assign CAN_FIRE_RL_bus_merged_0_passFlit =
	     bus_merged_0_awff$EMPTY_N && bus_merged_0_wff$EMPTY_N &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_passFlit =
	     CAN_FIRE_RL_bus_merged_0_passFlit ;

  // rule RL_bus_set_input_peek_wires
  assign CAN_FIRE_RL_bus_set_input_peek_wires =
	     IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	     (CAN_FIRE_RL_bus_merged_0_passFlit || bus_merged_0_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires =
	     CAN_FIRE_RL_bus_set_input_peek_wires ;

  // rule RL_bus_merged_0_awug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_0_awug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_0_awug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_0_awug_setPeek
  assign CAN_FIRE_RL_bus_merged_0_awug_setPeek =
	     core$RDY_cpu_imem_master_aw_peek ;
  assign WILL_FIRE_RL_bus_merged_0_awug_setPeek =
	     core$RDY_cpu_imem_master_aw_peek ;

  // rule RL_bus_merged_0_wug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_0_wug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_0_wug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_0_wug_setPeek
  assign CAN_FIRE_RL_bus_merged_0_wug_setPeek =
	     core$RDY_cpu_imem_master_w_peek ;
  assign WILL_FIRE_RL_bus_merged_0_wug_setPeek =
	     core$RDY_cpu_imem_master_w_peek ;

  // rule RL_bus_merged_1_passFlit
  assign CAN_FIRE_RL_bus_merged_1_passFlit =
	     bus_merged_1_awff$EMPTY_N && bus_merged_1_wff$EMPTY_N &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_passFlit =
	     CAN_FIRE_RL_bus_merged_1_passFlit ;

  // rule RL_bus_set_input_peek_wires_1
  assign CAN_FIRE_RL_bus_set_input_peek_wires_1 =
	     IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	     (CAN_FIRE_RL_bus_merged_1_passFlit || bus_merged_1_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_set_input_peek_wires_1 =
	     CAN_FIRE_RL_bus_set_input_peek_wires_1 ;

  // rule RL_bus_merged_1_awug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_1_awug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_1_awug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_1_awug_setPeek
  assign CAN_FIRE_RL_bus_merged_1_awug_setPeek =
	     core$RDY_core_mem_master_aw_peek ;
  assign WILL_FIRE_RL_bus_merged_1_awug_setPeek =
	     core$RDY_core_mem_master_aw_peek ;

  // rule RL_core_mem_master_sig_awSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop =
	     core$RDY_core_mem_master_aw_drop &&
	     core_mem_master_sig_awSig_src_dropWire$whas &&
	     core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;

  // rule RL_bus_merged_1_wug_setCanPeek
  assign CAN_FIRE_RL_bus_merged_1_wug_setCanPeek = 1'd1 ;
  assign WILL_FIRE_RL_bus_merged_1_wug_setCanPeek = 1'd1 ;

  // rule RL_bus_merged_1_wug_setPeek
  assign CAN_FIRE_RL_bus_merged_1_wug_setPeek =
	     core$RDY_core_mem_master_w_peek ;
  assign WILL_FIRE_RL_bus_merged_1_wug_setPeek =
	     core$RDY_core_mem_master_w_peek ;

  // rule RL_core_mem_master_sig_wSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop =
	     core$RDY_core_mem_master_w_drop &&
	     core_mem_master_sig_wSig_src_dropWire$whas &&
	     core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;

  // rule RL_bus_split_0_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_0_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_0_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_0_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_0_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_0_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire
  assign CAN_FIRE_RL_bus_set_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire = 1'd1 ;

  // rule RL_bus_split_1_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_1_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_1_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_1_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_1_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_1_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_1
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_1 = 1'd1 ;

  // rule RL_bus_split_2_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_2_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_2_awug_setCanPut = 1'd1 ;

  // rule RL_bus_split_2_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_2_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_2_wug_setCanPut = 1'd1 ;

  // rule RL_bus_set_output_canPut_wire_2
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_2 = 1'd1 ;

  // rule RL_bus_split_3_awug_setCanPut
  assign CAN_FIRE_RL_bus_split_3_awug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_3_awug_setCanPut = 1'd1 ;

  // rule RL_test_sig_awSig_snk_doPut
  assign CAN_FIRE_RL_test_sig_awSig_snk_doPut = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_awSig_snk_doPut = 1'b0 ;

  // rule RL_ug_snk_doPut
  assign CAN_FIRE_RL_ug_snk_doPut =
	     s_otherPeripheralsPortShim_awff$FULL_N && CAN_FIRE_RL_connect ;
  assign WILL_FIRE_RL_ug_snk_doPut =
	     CAN_FIRE_RL_ug_snk_doPut && !EN_other_peripherals_aw_put ;

  // rule RL_bus_split_3_wug_setCanPut
  assign CAN_FIRE_RL_bus_split_3_wug_setCanPut = 1'd1 ;
  assign WILL_FIRE_RL_bus_split_3_wug_setCanPut = 1'd1 ;

  // rule RL_test_sig_wSig_snk_doPut
  assign CAN_FIRE_RL_test_sig_wSig_snk_doPut = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_wSig_snk_doPut = 1'b0 ;

  // rule RL_ug_snk_1_doPut
  assign CAN_FIRE_RL_ug_snk_1_doPut =
	     s_otherPeripheralsPortShim_wff$FULL_N && CAN_FIRE_RL_connect_1 ;
  assign WILL_FIRE_RL_ug_snk_1_doPut =
	     CAN_FIRE_RL_ug_snk_1_doPut && !EN_other_peripherals_w_put ;

  // rule RL_bus_set_output_canPut_wire_3
  assign CAN_FIRE_RL_bus_set_output_canPut_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_set_output_canPut_wire_3 = 1'd1 ;

  // rule RL_bus_arbitrate
  assign CAN_FIRE_RL_bus_arbitrate =
	     bus_inputCanPeek_0_whas__395_AND_bus_inputCanP_ETC___d1492 &&
	     !bus_moreFlits[6] ;
  assign WILL_FIRE_RL_bus_arbitrate = CAN_FIRE_RL_bus_arbitrate ;

  // rule RL_bus_arbitration_fail
  assign CAN_FIRE_RL_bus_arbitration_fail =
	     CAN_FIRE_RL_bus_arbitrate && bus_selectInput_0$wget &&
	     !IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 ;
  assign WILL_FIRE_RL_bus_arbitration_fail =
	     CAN_FIRE_RL_bus_arbitration_fail ;

  // rule RL_bus_arbitration_fail_1
  assign CAN_FIRE_RL_bus_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_arbitrate && bus_selectInput_1$wget &&
	     !IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 ;
  assign WILL_FIRE_RL_bus_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_arbitration_fail_1 ;

  // rule RL_bus_input_first_flit
  assign CAN_FIRE_RL_bus_input_first_flit =
	     IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	     !bus_moreFlits[6] &&
	     CAN_FIRE_RL_bus_arbitrate &&
	     bus_selectInput_0$wget &&
	     IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 ;
  assign WILL_FIRE_RL_bus_input_first_flit =
	     CAN_FIRE_RL_bus_input_first_flit ;

  // rule RL_bus_input_follow_flit
  assign CAN_FIRE_RL_bus_input_follow_flit =
	     IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	     bus_moreFlits[6] &&
	     bus_moreFlits[4] &&
	     IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	     (NOT_IF_bus_moreFlits_493_BIT_0_571_THEN_1_ELSE_ETC___d1584 ||
	      IF_NOT_bus_moreFlits_493_BIT_0_571_585_OR_NOT__ETC___d1594) ;
  assign WILL_FIRE_RL_bus_input_follow_flit =
	     CAN_FIRE_RL_bus_input_follow_flit ;

  // rule RL_bus_input_first_flit_1
  assign CAN_FIRE_RL_bus_input_first_flit_1 =
	     IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	     !bus_moreFlits[6] &&
	     CAN_FIRE_RL_bus_arbitrate &&
	     bus_selectInput_1$wget &&
	     IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 ;
  assign WILL_FIRE_RL_bus_input_first_flit_1 =
	     CAN_FIRE_RL_bus_input_first_flit_1 ;

  // rule RL_bus_input_follow_flit_1
  assign CAN_FIRE_RL_bus_input_follow_flit_1 =
	     IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	     bus_moreFlits[6] &&
	     bus_moreFlits[5] &&
	     IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	     (NOT_IF_bus_moreFlits_493_BIT_0_571_THEN_1_ELSE_ETC___d1584 ||
	      IF_NOT_bus_moreFlits_493_BIT_0_571_585_OR_NOT__ETC___d1594) ;
  assign WILL_FIRE_RL_bus_input_follow_flit_1 =
	     CAN_FIRE_RL_bus_input_follow_flit_1 ;

  // rule __me_check_293
  assign CAN_FIRE___me_check_293 = 1'b1 ;
  assign WILL_FIRE___me_check_293 = 1'b1 ;

  // rule __me_check_295
  assign CAN_FIRE___me_check_295 = 1'b1 ;
  assign WILL_FIRE___me_check_295 = 1'b1 ;

  // rule RL_bus_output_selected
  assign CAN_FIRE_RL_bus_output_selected =
	     IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387 &&
	     bus_toOutput_0$whas &&
	     IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387 ;
  assign WILL_FIRE_RL_bus_output_selected = CAN_FIRE_RL_bus_output_selected ;

  // rule RL_bus_output_selected_1
  assign CAN_FIRE_RL_bus_output_selected_1 =
	     IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389 &&
	     bus_toOutput_1$whas &&
	     IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389 ;
  assign WILL_FIRE_RL_bus_output_selected_1 =
	     CAN_FIRE_RL_bus_output_selected_1 ;

  // rule RL_bus_output_selected_2
  assign CAN_FIRE_RL_bus_output_selected_2 =
	     IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391 &&
	     bus_toOutput_2$whas &&
	     IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391 ;
  assign WILL_FIRE_RL_bus_output_selected_2 =
	     CAN_FIRE_RL_bus_output_selected_2 ;

  // rule RL_bus_output_selected_3
  assign CAN_FIRE_RL_bus_output_selected_3 =
	     IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393 &&
	     bus_toOutput_3$whas &&
	     IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393 ;
  assign WILL_FIRE_RL_bus_output_selected_3 =
	     CAN_FIRE_RL_bus_output_selected_3 ;

  // rule RL_bus_dflt_output_selected
  assign CAN_FIRE_RL_bus_dflt_output_selected =
	     bus_noRouteSlv_rspFF$FULL_N &&
	     (!bus_toDfltOutput$wget[1] || bus_noRouteSlv_rspFF$FULL_N) &&
	     bus_toDfltOutput$whas ;
  assign WILL_FIRE_RL_bus_dflt_output_selected =
	     CAN_FIRE_RL_bus_dflt_output_selected ;

  // rule __me_check_297
  assign CAN_FIRE___me_check_297 = 1'b1 ;
  assign WILL_FIRE___me_check_297 = 1'b1 ;

  // rule RL_bus_input_first_flit_2
  assign CAN_FIRE_RL_bus_input_first_flit_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N && !bus_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_arbitrate_1 &&
	     bus_selectInput_0_1$wget &&
	     bus_noRouteSlv_rspFF$EMPTY_N ;
  assign WILL_FIRE_RL_bus_input_first_flit_2 =
	     CAN_FIRE_RL_bus_input_first_flit_2 ;

  // rule RL_bus_input_follow_flit_2
  assign CAN_FIRE_RL_bus_input_follow_flit_2 =
	     bus_noRouteSlv_rspFF$EMPTY_N && bus_moreFlits_1[7] &&
	     bus_moreFlits_1[2] &&
	     bus_noRouteSlv_rspFF$EMPTY_N &&
	     IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056 ;
  assign WILL_FIRE_RL_bus_input_follow_flit_2 =
	     CAN_FIRE_RL_bus_input_follow_flit_2 ;

  // rule __me_check_325
  assign CAN_FIRE___me_check_325 = 1'b1 ;
  assign WILL_FIRE___me_check_325 = 1'b1 ;

  // rule RL_bus_output_selected_4
  assign CAN_FIRE_RL_bus_output_selected_4 =
	     core$RDY_cpu_imem_master_b_put && bus_toOutput_0_1$whas &&
	     core$cpu_imem_master_b_canPut ;
  assign WILL_FIRE_RL_bus_output_selected_4 =
	     CAN_FIRE_RL_bus_output_selected_4 ;

  // rule RL_bus_output_selected_5
  assign CAN_FIRE_RL_bus_output_selected_5 =
	     core$RDY_core_mem_master_b_put && bus_toOutput_1_1$whas &&
	     core$core_mem_master_b_canPut ;
  assign WILL_FIRE_RL_bus_output_selected_5 =
	     CAN_FIRE_RL_bus_output_selected_5 &&
	     !WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ;

  // rule __me_check_335
  assign CAN_FIRE___me_check_335 = 1'b1 ;
  assign WILL_FIRE___me_check_335 = 1'b1 ;

  // rule RL_bus_merged_0_awFlit
  assign CAN_FIRE_RL_bus_merged_0_awFlit =
	     bus_merged_0_awff$FULL_N && core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_awFlit = CAN_FIRE_RL_bus_merged_0_awFlit ;

  // rule RL_bus_merged_0_wFlit
  assign CAN_FIRE_RL_bus_merged_0_wFlit =
	     bus_merged_0_wff$FULL_N && core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_wFlit = CAN_FIRE_RL_bus_merged_0_wFlit ;

  // rule RL_bus_merged_0_genFirst
  assign CAN_FIRE_RL_bus_merged_0_genFirst =
	     bus_merged_0_awff$EMPTY_N && bus_merged_0_wff$EMPTY_N &&
	     bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genFirst =
	     CAN_FIRE_RL_bus_merged_0_genFirst ;

  // rule RL_bus_merged_0_genOther
  assign CAN_FIRE_RL_bus_merged_0_genOther =
	     bus_merged_0_wff$EMPTY_N && bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genOther =
	     CAN_FIRE_RL_bus_merged_0_genOther ;

  // rule RL_bus_merged_0_awug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_0_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_awFlit &&
	     !core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_awug_warnDoDrop ;

  // rule RL_bus_merged_0_awug_doDrop
  assign CAN_FIRE_RL_bus_merged_0_awug_doDrop =
	     core$RDY_cpu_imem_master_aw_drop &&
	     CAN_FIRE_RL_bus_merged_0_awFlit &&
	     core$cpu_imem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_awug_doDrop =
	     CAN_FIRE_RL_bus_merged_0_awug_doDrop ;

  // rule RL_bus_merged_0_wug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_0_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_wFlit &&
	     !core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_0_wug_warnDoDrop ;

  // rule RL_bus_merged_0_wug_doDrop
  assign CAN_FIRE_RL_bus_merged_0_wug_doDrop =
	     core$RDY_cpu_imem_master_w_drop &&
	     CAN_FIRE_RL_bus_merged_0_wFlit &&
	     core$cpu_imem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_0_wug_doDrop =
	     CAN_FIRE_RL_bus_merged_0_wug_doDrop ;

  // rule RL_bus_merged_1_awFlit
  assign CAN_FIRE_RL_bus_merged_1_awFlit =
	     bus_merged_1_awff$FULL_N && core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_awFlit = CAN_FIRE_RL_bus_merged_1_awFlit ;

  // rule RL_bus_merged_1_wFlit
  assign CAN_FIRE_RL_bus_merged_1_wFlit =
	     bus_merged_1_wff$FULL_N && core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_wFlit = CAN_FIRE_RL_bus_merged_1_wFlit ;

  // rule RL_bus_merged_1_genFirst
  assign CAN_FIRE_RL_bus_merged_1_genFirst =
	     bus_merged_1_awff$EMPTY_N && bus_merged_1_wff$EMPTY_N &&
	     bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genFirst =
	     CAN_FIRE_RL_bus_merged_1_genFirst ;

  // rule RL_bus_merged_1_genOther
  assign CAN_FIRE_RL_bus_merged_1_genOther =
	     bus_merged_1_wff$EMPTY_N && bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genOther =
	     CAN_FIRE_RL_bus_merged_1_genOther ;

  // rule RL_bus_merged_1_awug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_1_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_awFlit &&
	     !core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_awug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_awug_warnDoDrop ;

  // rule RL_bus_merged_1_awug_doDrop
  assign CAN_FIRE_RL_bus_merged_1_awug_doDrop =
	     core$RDY_core_mem_master_aw_drop &&
	     CAN_FIRE_RL_bus_merged_1_awFlit &&
	     core$core_mem_master_aw_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_awug_doDrop =
	     CAN_FIRE_RL_bus_merged_1_awug_doDrop &&
	     !WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;

  // rule RL_bus_merged_1_wug_warnDoDrop
  assign CAN_FIRE_RL_bus_merged_1_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_wFlit &&
	     !core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_wug_warnDoDrop =
	     CAN_FIRE_RL_bus_merged_1_wug_warnDoDrop ;

  // rule RL_bus_merged_1_wug_doDrop
  assign CAN_FIRE_RL_bus_merged_1_wug_doDrop =
	     core$RDY_core_mem_master_w_drop &&
	     CAN_FIRE_RL_bus_merged_1_wFlit &&
	     core$core_mem_master_w_canPeek ;
  assign WILL_FIRE_RL_bus_merged_1_wug_doDrop =
	     CAN_FIRE_RL_bus_merged_1_wug_doDrop &&
	     !WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;

  // rule RL_bus_split_0_putFirst
  assign CAN_FIRE_RL_bus_split_0_putFirst =
	     CAN_FIRE_RL_bus_output_selected &&
	     bus_split_0_flitLeft == 8'd0 &&
	     boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_putFirst =
	     CAN_FIRE_RL_bus_split_0_putFirst ;

  // rule RL_bus_split_0_putOther
  assign CAN_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_output_selected &&
	     bus_split_0_flitLeft != 8'd0 &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_split_0_putOther ;

  // rule RL_bus_split_0_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_0_awug_warnDoPut =
	     MUX_bus_split_0_flitLeft$write_1__SEL_2 &&
	     !boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_0_awug_warnDoPut ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     boot_rom_axi4_deburster_inShim_awff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_split_0_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_0_wug_warnDoPut =
	     bus_split_0_wug_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_0_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_0_wug_warnDoPut ;

  // rule RL_bus_split_1_putFirst
  assign CAN_FIRE_RL_bus_split_1_putFirst =
	     CAN_FIRE_RL_bus_output_selected_1 &&
	     bus_split_1_flitLeft == 8'd0 &&
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_putFirst =
	     CAN_FIRE_RL_bus_split_1_putFirst ;

  // rule RL_bus_split_1_putOther
  assign CAN_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_output_selected_1 &&
	     bus_split_1_flitLeft != 8'd0 &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_split_1_putOther ;

  // rule RL_bus_split_1_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_1_awug_warnDoPut =
	     MUX_bus_split_1_flitLeft$write_1__SEL_2 &&
	     !mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_1_awug_warnDoPut ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     mem0_controller_axi4_deburster_inShim_awff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_split_1_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_1_wug_warnDoPut =
	     bus_split_1_wug_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_1_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_1_wug_warnDoPut ;

  // rule RL_bus_split_2_putFirst
  assign CAN_FIRE_RL_bus_split_2_putFirst =
	     CAN_FIRE_RL_bus_output_selected_2 &&
	     bus_split_2_flitLeft == 8'd0 &&
	     uart0$slave_aw_canPut &&
	     uart0$slave_w_canPut ;
  assign WILL_FIRE_RL_bus_split_2_putFirst =
	     CAN_FIRE_RL_bus_split_2_putFirst ;

  // rule RL_bus_split_2_putOther
  assign CAN_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_output_selected_2 &&
	     bus_split_2_flitLeft != 8'd0 &&
	     uart0$slave_w_canPut ;
  assign WILL_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_split_2_putOther ;

  // rule RL_bus_split_2_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_2_awug_warnDoPut =
	     MUX_bus_split_2_flitLeft$write_1__SEL_2 &&
	     !uart0$slave_aw_canPut ;
  assign WILL_FIRE_RL_bus_split_2_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_2_awug_warnDoPut ;

  // rule RL_bus_split_2_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_2_wug_warnDoPut =
	     bus_split_2_wug_putWire$whas && !uart0$slave_w_canPut ;
  assign WILL_FIRE_RL_bus_split_2_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_2_wug_warnDoPut ;

  // rule RL_bus_split_3_putFirst
  assign CAN_FIRE_RL_bus_split_3_putFirst =
	     CAN_FIRE_RL_bus_output_selected_3 &&
	     bus_split_3_flitLeft == 8'd0 &&
	     s_otherPeripheralsPortShim_awff$FULL_N &&
	     s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_putFirst =
	     CAN_FIRE_RL_bus_split_3_putFirst ;

  // rule RL_bus_split_3_putOther
  assign CAN_FIRE_RL_bus_split_3_putOther =
	     CAN_FIRE_RL_bus_output_selected_3 &&
	     bus_split_3_flitLeft != 8'd0 &&
	     s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_putOther =
	     CAN_FIRE_RL_bus_split_3_putOther ;

  // rule RL_bus_split_3_awug_warnDoPut
  assign CAN_FIRE_RL_bus_split_3_awug_warnDoPut =
	     MUX_bus_split_3_flitLeft$write_1__SEL_2 &&
	     !s_otherPeripheralsPortShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_awug_warnDoPut =
	     CAN_FIRE_RL_bus_split_3_awug_warnDoPut ;

  // rule RL_bus_split_3_awug_doPut
  assign CAN_FIRE_RL_bus_split_3_awug_doPut =
	     s_otherPeripheralsPortShim_awff$FULL_N &&
	     MUX_bus_split_3_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_3_awug_doPut =
	     CAN_FIRE_RL_bus_split_3_awug_doPut &&
	     !WILL_FIRE_RL_ug_snk_doPut &&
	     !EN_other_peripherals_aw_put ;

  // rule RL_bus_split_3_wug_warnDoPut
  assign CAN_FIRE_RL_bus_split_3_wug_warnDoPut =
	     bus_split_3_wug_putWire$whas &&
	     !s_otherPeripheralsPortShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_split_3_wug_warnDoPut =
	     CAN_FIRE_RL_bus_split_3_wug_warnDoPut ;

  // rule RL_bus_split_3_wug_doPut
  assign CAN_FIRE_RL_bus_split_3_wug_doPut =
	     s_otherPeripheralsPortShim_wff$FULL_N &&
	     bus_split_3_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_3_wug_doPut =
	     CAN_FIRE_RL_bus_split_3_wug_doPut &&
	     !WILL_FIRE_RL_ug_snk_1_doPut &&
	     !EN_other_peripherals_w_put ;

  // rule RL_bus_1_set_input_canPeek_wire
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire = 1'd1 ;

  // rule RL_bus_1_set_input_peek_wires
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires =
	     core$RDY_cpu_imem_master_ar_peek ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires =
	     core$RDY_cpu_imem_master_ar_peek ;

  // rule RL_bus_1_set_input_canPeek_wire_1
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_1 = 1'd1 ;

  // rule RL_bus_1_set_input_peek_wires_1
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_1 =
	     core$RDY_core_mem_master_ar_peek ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_1 =
	     core$RDY_core_mem_master_ar_peek ;

  // rule RL_core_mem_master_sig_arSig_src_doDrop
  assign CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop =
	     core$RDY_core_mem_master_ar_drop &&
	     core_mem_master_sig_arSig_src_dropWire$whas &&
	     core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop =
	     CAN_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule RL_bus_1_set_output_canPut_wire
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire = 1'd1 ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     boot_rom_axi4_deburster_inShim_arff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (!boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // rule RL_boot_rom_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_outShim_arff$FULL_N &&
	     boot_rom_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     boot_rom_axi4_deburster_inShim_wff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_wff_rv[73] &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;

  // rule RL_boot_rom_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[73] &&
	     boot_rom_axi4_deburster_outShim_awff$FULL_N &&
	     boot_rom_axi4_deburster_outShim_wff$FULL_N &&
	     (!boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      boot_rom_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     boot_rom_axi4_deburster_inShim_bff$FULL_N &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd2 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;

  // rule RL_bus_split_0_awug_doPut
  assign CAN_FIRE_RL_bus_split_0_awug_doPut =
	     boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	     MUX_bus_split_0_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_0_awug_doPut =
	     CAN_FIRE_RL_bus_split_0_awug_doPut ;

  // rule RL_bus_split_0_wug_doPut
  assign CAN_FIRE_RL_bus_split_0_wug_doPut =
	     boot_rom_axi4_deburster_inShim_wff$FULL_N &&
	     bus_split_0_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_0_wug_doPut =
	     CAN_FIRE_RL_bus_split_0_wug_doPut ;

  // rule RL_bus_1_set_output_canPut_wire_1
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_1 = 1'd1 ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     mem0_controller_axi4_deburster_inShim_arff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (!mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_outShim_arff$FULL_N &&
	     mem0_controller_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     mem0_controller_axi4_deburster_inShim_wff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_wff_rv[73] &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd1 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;

  // rule RL_mem0_controller_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[73] &&
	     mem0_controller_axi4_deburster_outShim_awff$FULL_N &&
	     mem0_controller_axi4_deburster_outShim_wff$FULL_N &&
	     (!mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      mem0_controller_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     mem0_controller_axi4_deburster_inShim_bff$FULL_N &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd2 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;

  // rule RL_bus_split_1_awug_doPut
  assign CAN_FIRE_RL_bus_split_1_awug_doPut =
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	     MUX_bus_split_1_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_1_awug_doPut =
	     CAN_FIRE_RL_bus_split_1_awug_doPut ;

  // rule RL_bus_split_1_wug_doPut
  assign CAN_FIRE_RL_bus_split_1_wug_doPut =
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N &&
	     bus_split_1_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_1_wug_doPut =
	     CAN_FIRE_RL_bus_split_1_wug_doPut ;

  // rule RL_bus_1_set_output_canPut_wire_2
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_2 = 1'd1 ;

  // rule RL_bus_1_set_output_canPut_wire_3
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_3 = 1'd1 ;

  // rule RL_test_sig_arSig_snk_doPut
  assign CAN_FIRE_RL_test_sig_arSig_snk_doPut = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_arSig_snk_doPut = 1'b0 ;

  // rule RL_ug_snk_3_doPut
  assign CAN_FIRE_RL_ug_snk_3_doPut =
	     s_otherPeripheralsPortShim_arff$FULL_N && CAN_FIRE_RL_connect_3 ;
  assign WILL_FIRE_RL_ug_snk_3_doPut =
	     CAN_FIRE_RL_ug_snk_3_doPut && !EN_other_peripherals_ar_put ;

  // rule RL_bus_1_set_dflt_output_canPut_wire
  assign CAN_FIRE_RL_bus_1_set_dflt_output_canPut_wire = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_dflt_output_canPut_wire = 1'd1 ;

  // rule RL_bus_1_arbitrate
  assign CAN_FIRE_RL_bus_1_arbitrate =
	     bus_1_inputCanPeek_0_whas__220_AND_bus_1_input_ETC___d2317 &&
	     !bus_1_moreFlits[6] ;
  assign WILL_FIRE_RL_bus_1_arbitrate = CAN_FIRE_RL_bus_1_arbitrate ;

  // rule RL_bus_1_arbitration_fail
  assign CAN_FIRE_RL_bus_1_arbitration_fail =
	     CAN_FIRE_RL_bus_1_arbitrate && bus_1_selectInput_0$wget &&
	     !core$cpu_imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail =
	     CAN_FIRE_RL_bus_1_arbitration_fail ;

  // rule RL_bus_1_arbitration_fail_1
  assign CAN_FIRE_RL_bus_1_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_1_arbitrate && bus_1_selectInput_1$wget &&
	     !core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_1 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_1 ;

  // rule RL_bus_1_input_first_flit
  assign CAN_FIRE_RL_bus_1_input_first_flit =
	     core$RDY_cpu_imem_master_ar_drop && !bus_1_moreFlits[6] &&
	     CAN_FIRE_RL_bus_1_arbitrate &&
	     bus_1_selectInput_0$wget &&
	     core$cpu_imem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_input_first_flit =
	     CAN_FIRE_RL_bus_1_input_first_flit ;

  // rule RL_bus_1_input_follow_flit
  assign CAN_FIRE_RL_bus_1_input_follow_flit =
	     core$RDY_cpu_imem_master_ar_drop && bus_1_moreFlits[6] &&
	     bus_1_moreFlits[4] &&
	     core$cpu_imem_master_ar_canPeek &&
	     (NOT_IF_bus_1_moreFlits_318_BIT_0_391_THEN_1_EL_ETC___d2404 ||
	      IF_NOT_bus_1_moreFlits_318_BIT_0_391_405_OR_NO_ETC___d2414) ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit =
	     CAN_FIRE_RL_bus_1_input_follow_flit ;

  // rule RL_bus_1_input_first_flit_1
  assign CAN_FIRE_RL_bus_1_input_first_flit_1 =
	     core$RDY_core_mem_master_ar_drop && !bus_1_moreFlits[6] &&
	     CAN_FIRE_RL_bus_1_arbitrate &&
	     bus_1_selectInput_1$wget &&
	     core$core_mem_master_ar_canPeek ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_1 =
	     CAN_FIRE_RL_bus_1_input_first_flit_1 &&
	     !WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule RL_bus_1_input_follow_flit_1
  assign CAN_FIRE_RL_bus_1_input_follow_flit_1 =
	     core$RDY_core_mem_master_ar_drop && bus_1_moreFlits[6] &&
	     bus_1_moreFlits[5] &&
	     core$core_mem_master_ar_canPeek &&
	     (NOT_IF_bus_1_moreFlits_318_BIT_0_391_THEN_1_EL_ETC___d2404 ||
	      IF_NOT_bus_1_moreFlits_318_BIT_0_391_405_OR_NO_ETC___d2414) ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_1 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_1 &&
	     !WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;

  // rule __me_check_349
  assign CAN_FIRE___me_check_349 = 1'b1 ;
  assign WILL_FIRE___me_check_349 = 1'b1 ;

  // rule __me_check_351
  assign CAN_FIRE___me_check_351 = 1'b1 ;
  assign WILL_FIRE___me_check_351 = 1'b1 ;

  // rule RL_bus_1_output_selected
  assign CAN_FIRE_RL_bus_1_output_selected =
	     boot_rom_axi4_deburster_inShim_arff$FULL_N &&
	     bus_1_toOutput_0$whas ;
  assign WILL_FIRE_RL_bus_1_output_selected =
	     CAN_FIRE_RL_bus_1_output_selected ;

  // rule RL_bus_1_output_selected_1
  assign CAN_FIRE_RL_bus_1_output_selected_1 =
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N &&
	     bus_1_toOutput_1$whas ;
  assign WILL_FIRE_RL_bus_1_output_selected_1 =
	     CAN_FIRE_RL_bus_1_output_selected_1 ;

  // rule RL_bus_1_output_selected_3
  assign CAN_FIRE_RL_bus_1_output_selected_3 =
	     s_otherPeripheralsPortShim_arff$FULL_N && bus_1_toOutput_3$whas ;
  assign WILL_FIRE_RL_bus_1_output_selected_3 =
	     CAN_FIRE_RL_bus_1_output_selected_3 &&
	     !WILL_FIRE_RL_ug_snk_3_doPut &&
	     !EN_other_peripherals_ar_put ;

  // rule RL_bus_1_set_input_canPeek_wire_2
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_2 = 1'd1 ;

  // rule RL_bus_1_dflt_output_selected
  assign CAN_FIRE_RL_bus_1_dflt_output_selected =
	     bus_1_toDfltOutput$whas && bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign WILL_FIRE_RL_bus_1_dflt_output_selected =
	     CAN_FIRE_RL_bus_1_dflt_output_selected ;

  // rule RL_bus_1_set_input_peek_wires_2
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_2 =
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_2 =
	     CAN_FIRE_RL_bus_1_set_input_peek_wires_2 ;

  // rule RL_bus_1_set_input_canPeek_wire_3
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_3 = 1'd1 ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[74] &&
	     boot_rom_axi4_deburster_inShim_rff$FULL_N &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd2 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_bus_1_set_input_peek_wires_3
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_bus_1_set_input_canPeek_wire_4
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_4 = 1'd1 ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[74] &&
	     mem0_controller_axi4_deburster_inShim_rff$FULL_N &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd2 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;

  // rule __me_check_14
  assign CAN_FIRE___me_check_14 = 1'b1 ;
  assign WILL_FIRE___me_check_14 = 1'b1 ;

  // rule RL_bus_1_set_input_peek_wires_4
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_bus_1_set_input_canPeek_wire_5
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_5 = 1'd1 ;

  // rule RL_rl_reset_complete_initial
  assign CAN_FIRE_RL_rl_reset_complete_initial = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset_complete_initial =
	     MUX_rg_state$write_1__SEL_2 ;

  // rule RL_bus_split_2_awug_doPut
  assign CAN_FIRE_RL_bus_split_2_awug_doPut =
	     uart0$RDY_slave_aw_put &&
	     MUX_bus_split_2_flitLeft$write_1__SEL_2 ;
  assign WILL_FIRE_RL_bus_split_2_awug_doPut =
	     CAN_FIRE_RL_bus_split_2_awug_doPut ;

  // rule RL_bus_split_2_wug_doPut
  assign CAN_FIRE_RL_bus_split_2_wug_doPut =
	     uart0$RDY_slave_w_put && bus_split_2_wug_putWire$whas ;
  assign WILL_FIRE_RL_bus_split_2_wug_doPut =
	     CAN_FIRE_RL_bus_split_2_wug_doPut ;

  // rule RL_bus_1_output_selected_2
  assign CAN_FIRE_RL_bus_1_output_selected_2 =
	     uart0$RDY_slave_ar_put && bus_1_toOutput_2$whas &&
	     uart0$slave_ar_canPut ;
  assign WILL_FIRE_RL_bus_1_output_selected_2 =
	     CAN_FIRE_RL_bus_1_output_selected_2 ;

  // rule __me_check_353
  assign CAN_FIRE___me_check_353 = 1'b1 ;
  assign WILL_FIRE___me_check_353 = 1'b1 ;

  // rule RL_bus_1_set_input_peek_wires_5
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_5 = uart0$RDY_slave_r_peek ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_5 = uart0$RDY_slave_r_peek ;

  // rule RL_bus_1_set_input_canPeek_wire_6
  assign CAN_FIRE_RL_bus_1_set_input_canPeek_wire_6 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_input_canPeek_wire_6 = 1'd1 ;

  // rule RL_bus_1_set_input_peek_wires_6
  assign CAN_FIRE_RL_bus_1_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_set_input_peek_wires_6 =
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;

  // rule RL_test_sig_rSig_src_doDrop
  assign CAN_FIRE_RL_test_sig_rSig_src_doDrop = 1'b0 ;
  assign WILL_FIRE_RL_test_sig_rSig_src_doDrop = 1'b0 ;

  // rule RL_ug_src_4_doDrop
  assign CAN_FIRE_RL_ug_src_4_doDrop =
	     s_otherPeripheralsPortShim_rff$EMPTY_N && CAN_FIRE_RL_connect_4 ;
  assign WILL_FIRE_RL_ug_src_4_doDrop =
	     CAN_FIRE_RL_ug_src_4_doDrop && !EN_other_peripherals_r_drop ;

  // rule RL_bus_1_set_output_canPut_wire_4
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_4 = 1'd1 ;

  // rule RL_bus_1_set_output_canPut_wire_5
  assign CAN_FIRE_RL_bus_1_set_output_canPut_wire_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_set_output_canPut_wire_5 = 1'd1 ;

  // rule RL_core_mem_master_sig_rSig_snk_doPut
  assign CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut =
	     core$RDY_core_mem_master_r_put &&
	     core_mem_master_sig_rSig_snk_putWire$whas ;
  assign WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut =
	     CAN_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ;

  // rule RL_bus_1_arbitrate_1
  assign CAN_FIRE_RL_bus_1_arbitrate_1 =
	     bus_1_inputCanPeek_0_1_whas__515_AND_bus_1_inp_ETC___d2601 &&
	     !bus_1_moreFlits_1[7] ;
  assign WILL_FIRE_RL_bus_1_arbitrate_1 = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // rule RL_bus_1_arbitration_fail_2
  assign CAN_FIRE_RL_bus_1_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_0_1$wget &&
	     !(bus_1_noRouteSlv_flitCount != 9'd0) ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_2 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_2 ;

  // rule RL_bus_1_legal_destination_fail_2
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_0_1$wget &&
	     bus_1_noRouteSlv_flitCount != 9'd0 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_2 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_2 ;

  // rule RL_bus_1_arbitration_fail_3
  assign CAN_FIRE_RL_bus_1_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_1_1$wget &&
	     !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_3 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_3 ;

  // rule RL_bus_1_legal_destination_fail_3
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_3 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_3 ;

  // rule RL_bus_1_arbitration_fail_4
  assign CAN_FIRE_RL_bus_1_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_2$wget &&
	     !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_4 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_4 ;

  // rule RL_bus_1_legal_destination_fail_4
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_4 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_4 ;

  // rule RL_bus_1_arbitration_fail_5
  assign CAN_FIRE_RL_bus_1_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_3$wget &&
	     !uart0$slave_r_canPeek ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_5 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_5 ;

  // rule RL_bus_1_legal_destination_fail_5
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_3$wget &&
	     uart0$slave_r_canPeek &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_5 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_5 ;

  // rule RL_bus_1_arbitration_fail_6
  assign CAN_FIRE_RL_bus_1_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_4$wget &&
	     !s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_arbitration_fail_6 =
	     CAN_FIRE_RL_bus_1_arbitration_fail_6 ;

  // rule RL_bus_1_legal_destination_fail_6
  assign CAN_FIRE_RL_bus_1_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_1_arbitrate_1 && bus_1_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) !=
	     2'd1 ;
  assign WILL_FIRE_RL_bus_1_legal_destination_fail_6 =
	     CAN_FIRE_RL_bus_1_legal_destination_fail_6 ;

  // rule RL_bus_1_input_first_flit_2
  assign CAN_FIRE_RL_bus_1_input_first_flit_2 =
	     bus_1_noRouteSlv_flitCount != 9'd0 && !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_0_1$wget &&
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_2 =
	     CAN_FIRE_RL_bus_1_input_first_flit_2 ;

  // rule RL_bus_1_input_follow_flit_2
  assign CAN_FIRE_RL_bus_1_input_follow_flit_2 =
	     bus_1_noRouteSlv_flitCount != 9'd0 && bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[2] &&
	     bus_1_noRouteSlv_flitCount != 9'd0 &&
	     IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_2 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_2 ;

  // rule RL_bus_1_input_first_flit_3
  assign CAN_FIRE_RL_bus_1_input_first_flit_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_1_1$wget &&
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_3 =
	     CAN_FIRE_RL_bus_1_input_first_flit_3 ;

  // rule RL_bus_1_input_follow_flit_3
  assign CAN_FIRE_RL_bus_1_input_follow_flit_3 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[3] &&
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_3 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_3 ;

  // rule __me_check_383
  assign CAN_FIRE___me_check_383 = 1'b1 ;
  assign WILL_FIRE___me_check_383 = 1'b1 ;

  // rule RL_bus_1_input_first_flit_4
  assign CAN_FIRE_RL_bus_1_input_first_flit_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_2$wget &&
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_4 =
	     CAN_FIRE_RL_bus_1_input_first_flit_4 ;

  // rule RL_bus_1_input_follow_flit_4
  assign CAN_FIRE_RL_bus_1_input_follow_flit_4 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[4] &&
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_4 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_4 ;

  // rule __me_check_385
  assign CAN_FIRE___me_check_385 = 1'b1 ;
  assign WILL_FIRE___me_check_385 = 1'b1 ;

  // rule RL_rl_reset_start_initial
  assign CAN_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_bus_1_input_first_flit_5
  assign CAN_FIRE_RL_bus_1_input_first_flit_5 =
	     uart0$RDY_slave_r_drop && !bus_1_moreFlits_1[7] &&
	     CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_3$wget &&
	     uart0$slave_r_canPeek ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_5 =
	     CAN_FIRE_RL_bus_1_input_first_flit_5 ;

  // rule RL_bus_1_input_follow_flit_5
  assign CAN_FIRE_RL_bus_1_input_follow_flit_5 =
	     uart0$RDY_slave_r_drop && bus_1_moreFlits_1[7] &&
	     bus_1_moreFlits_1[5] &&
	     uart0$slave_r_canPeek &&
	     IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_5 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_5 ;

  // rule __me_check_387
  assign CAN_FIRE___me_check_387 = 1'b1 ;
  assign WILL_FIRE___me_check_387 = 1'b1 ;

  // rule RL_bus_1_input_first_flit_6
  assign CAN_FIRE_RL_bus_1_input_first_flit_6 =
	     !bus_1_moreFlits_1[7] && CAN_FIRE_RL_bus_1_arbitrate_1 &&
	     bus_1_selectInput_4$wget &&
	     s_otherPeripheralsPortShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_input_first_flit_6 =
	     CAN_FIRE_RL_bus_1_input_first_flit_6 &&
	     !WILL_FIRE_RL_ug_src_4_doDrop &&
	     !EN_other_peripherals_r_drop ;

  // rule RL_bus_1_input_follow_flit_6
  assign CAN_FIRE_RL_bus_1_input_follow_flit_6 =
	     bus_1_moreFlits_1[7] && bus_1_moreFlits_1[6] &&
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853 ;
  assign WILL_FIRE_RL_bus_1_input_follow_flit_6 =
	     CAN_FIRE_RL_bus_1_input_follow_flit_6 &&
	     !WILL_FIRE_RL_ug_src_4_doDrop &&
	     !EN_other_peripherals_r_drop ;

  // rule __me_check_381
  assign CAN_FIRE___me_check_381 = 1'b1 ;
  assign WILL_FIRE___me_check_381 = 1'b1 ;

  // rule __me_check_389
  assign CAN_FIRE___me_check_389 = 1'b1 ;
  assign WILL_FIRE___me_check_389 = 1'b1 ;

  // rule RL_bus_1_output_selected_4
  assign CAN_FIRE_RL_bus_1_output_selected_4 =
	     core$RDY_cpu_imem_master_r_put && bus_1_toOutput_0_1$whas &&
	     core$cpu_imem_master_r_canPut ;
  assign WILL_FIRE_RL_bus_1_output_selected_4 =
	     CAN_FIRE_RL_bus_1_output_selected_4 ;

  // rule RL_bus_1_output_selected_5
  assign CAN_FIRE_RL_bus_1_output_selected_5 =
	     core$RDY_core_mem_master_r_put && bus_1_toOutput_1_1$whas &&
	     core$core_mem_master_r_canPut ;
  assign WILL_FIRE_RL_bus_1_output_selected_5 =
	     CAN_FIRE_RL_bus_1_output_selected_5 &&
	     !WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ;

  // rule __me_check_391
  assign CAN_FIRE___me_check_391 = 1'b1 ;
  assign WILL_FIRE___me_check_391 = 1'b1 ;

  // inputs to muxes for submodule ports
  assign MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_2 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_9 =
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ;
  assign MUX_bus_1_moreFlits_1$write_1__SEL_10 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[0] ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ;
  assign MUX_bus_1_toOutput_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[0] ;
  assign MUX_bus_1_toOutput_0_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[0] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[1] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ;
  assign MUX_bus_1_toOutput_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[1] ;
  assign MUX_bus_1_toOutput_1_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[1] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[2] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ;
  assign MUX_bus_1_toOutput_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[2] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[3] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ;
  assign MUX_bus_1_toOutput_3$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[3] ;
  assign MUX_bus_moreFlits$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_1[1] ;
  assign MUX_bus_moreFlits$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     MUX_bus_toDfltOutput$wset_1__VAL_1[1] ;
  assign MUX_bus_moreFlits$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_2[1] ;
  assign MUX_bus_moreFlits$write_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     MUX_bus_toDfltOutput$wset_1__VAL_2[1] ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_3_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_3_putOther &&
	     bus_split_3_doPut$wget[173] ;
  assign MUX_bus_split_3_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_3_putFirst &&
	     !bus_split_3_doPut$wget[173] ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign MUX_bus_toOutput_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[0] ;
  assign MUX_bus_toOutput_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ;
  assign MUX_bus_toOutput_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ;
  assign MUX_bus_toOutput_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[0] ;
  assign MUX_bus_toOutput_0_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[0] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[1] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ;
  assign MUX_bus_toOutput_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_9 =
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[1] ;
  assign MUX_bus_toOutput_1_1$wset_1__SEL_10 =
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[1] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[2] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ;
  assign MUX_bus_toOutput_2$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[2] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[3] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ;
  assign MUX_bus_toOutput_3$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[3] ;
  assign MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_2 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_rg_state$write_1__SEL_1 =
	     mem0_controller$RDY_server_reset_request_put &&
	     uart0$RDY_server_reset_request_put &&
	     core$RDY_cpu_reset_server_request_put &&
	     rg_state == 2'd0 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     mem0_controller$RDY_set_addr_map &&
	     mem0_controller$RDY_server_reset_response_get &&
	     uart0$RDY_server_reset_response_get &&
	     core$RDY_cpu_reset_server_response_get &&
	     rg_state == 2'd1 ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_1 =
	     { 6'd33, bus_1_inputDest_0_1$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_3 =
	     { 6'd34, bus_1_inputDest_1_1$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_5 =
	     { 6'd36, bus_1_inputDest_2$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_7 =
	     { 6'd40, bus_1_inputDest_3$wget } ;
  assign MUX_bus_1_moreFlits_1$write_1__VAL_9 =
	     { 6'd48, bus_1_inputDest_4$wget } ;
  assign MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_1 =
	     { 1'd0, bus_1_toDfltOutput$wget[29:22] } + 9'd1 ;
  assign MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_2 =
	     bus_1_noRouteSlv_flitCount - 9'd1 ;
  assign MUX_bus_1_toDfltOutput$wset_1__VAL_1 =
	     { 1'd0, core$cpu_imem_master_ar_peek, 1'd0 } ;
  assign MUX_bus_1_toDfltOutput$wset_1__VAL_2 =
	     { core$core_mem_master_ar_peek, 1'd1 } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_1 =
	     { bus_1_noRouteSlv_currentReq[98:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       bus_1_noRouteSlv_flitCount == 9'd1,
	       bus_1_noRouteSlv_currentReq[99] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_2 =
	     { boot_rom_axi4_deburster_inShim_rff$D_OUT[72:0],
	       boot_rom_axi4_deburster_inShim_rff$D_OUT[73] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_3 =
	     { mem0_controller_axi4_deburster_inShim_rff$D_OUT[72:0],
	       mem0_controller_axi4_deburster_inShim_rff$D_OUT[73] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_4 =
	     { uart0$slave_r_peek[72:0], uart0$slave_r_peek[73] } ;
  assign MUX_bus_1_toDfltOutput_1$wset_1__VAL_5 =
	     { s_otherPeripheralsPortShim_rff$D_OUT[72:0],
	       s_otherPeripheralsPortShim_rff$D_OUT[73] } ;
  assign MUX_bus_merged_0_flitLeft$write_1__VAL_2 =
	     bus_merged_0_flitLeft - 8'd1 ;
  assign MUX_bus_merged_1_flitLeft$write_1__VAL_2 =
	     bus_merged_1_flitLeft - 8'd1 ;
  assign MUX_bus_moreFlits$write_1__VAL_1 = { 3'd5, bus_inputDest_0$wget } ;
  assign MUX_bus_moreFlits$write_1__VAL_3 = { 3'd6, bus_inputDest_1$wget } ;
  assign MUX_bus_split_0_flitLeft$write_1__VAL_1 =
	     bus_split_0_flitLeft - 8'd1 ;
  assign MUX_bus_split_1_flitLeft$write_1__VAL_1 =
	     bus_split_1_flitLeft - 8'd1 ;
  assign MUX_bus_split_2_flitLeft$write_1__VAL_1 =
	     bus_split_2_flitLeft - 8'd1 ;
  assign MUX_bus_split_3_flitLeft$write_1__VAL_1 =
	     bus_split_3_flitLeft - 8'd1 ;
  assign MUX_bus_toDfltOutput$wset_1__VAL_1 =
	     { !CAN_FIRE_RL_bus_merged_0_passFlit ||
	       bus_merged_0_outflit$wget[172],
	       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1277,
	       1'd0 } ;
  assign MUX_bus_toDfltOutput$wset_1__VAL_2 =
	     { !CAN_FIRE_RL_bus_merged_1_passFlit ||
	       bus_merged_1_outflit$wget[172],
	       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1346,
	       1'd1 } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_1 =
	     { bus_noRouteSlv_rspFF$D_OUT[7:0],
	       bus_noRouteSlv_rspFF$D_OUT[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_2 =
	     { boot_rom_axi4_deburster_inShim_bff$D_OUT[7:0],
	       boot_rom_axi4_deburster_inShim_bff$D_OUT[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_3 =
	     { mem0_controller_axi4_deburster_inShim_bff$D_OUT[7:0],
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_4 =
	     { uart0$slave_b_peek[7:0], uart0$slave_b_peek[8] } ;
  assign MUX_bus_toDfltOutput_1$wset_1__VAL_5 =
	     { s_otherPeripheralsPortShim_bff$D_OUT[7:0],
	       s_otherPeripheralsPortShim_bff$D_OUT[8] } ;
  assign MUX_m_otherPeripheralsPortShim_bff$enq_1__VAL_2 =
	     { core_dmem_post_fabric_bid, core_dmem_post_fabric_bresp } ;
  assign MUX_m_otherPeripheralsPortShim_rff$enq_1__VAL_2 =
	     { core_dmem_post_fabric_rid,
	       core_dmem_post_fabric_rdata,
	       core_dmem_post_fabric_rresp,
	       core_dmem_post_fabric_rlast } ;
  assign MUX_s_otherPeripheralsPortShim_arff$enq_1__VAL_4 =
	     { bus_1_toOutput_3$wget[0], bus_1_toOutput_3$wget[99:1] } ;

  // inlined wires
  assign core_mem_master_sig_bSig_snk_putWire$wget =
	     { core_dmem_pre_fabric_bid, core_dmem_pre_fabric_bresp } ;
  assign core_mem_master_sig_bSig_snk_putWire$whas =
	     core_dmem_pre_fabric_bvalid && core$core_mem_master_b_canPut ;
  assign core_mem_master_sig_rSig_snk_putWire$wget =
	     { core_dmem_pre_fabric_rid,
	       core_dmem_pre_fabric_rdata,
	       core_dmem_pre_fabric_rresp,
	       core_dmem_pre_fabric_rlast } ;
  assign core_mem_master_sig_rSig_snk_putWire$whas =
	     core_dmem_pre_fabric_rvalid && core$core_mem_master_r_canPut ;
  assign m_otherPeripheralsPortShim_sig_bSig_snk_putWire$whas =
	     core_dmem_post_fabric_bvalid &&
	     m_otherPeripheralsPortShim_bff$FULL_N ;
  assign m_otherPeripheralsPortShim_sig_rSig_snk_putWire$whas =
	     core_dmem_post_fabric_rvalid &&
	     m_otherPeripheralsPortShim_rff$FULL_N ;
  assign bus_merged_0_awug_peekWire$wget =
	     { 1'd0, core$cpu_imem_master_aw_peek } ;
  assign bus_merged_0_outflit$wget =
	     { 1'd0, bus_merged_0_awff$D_OUT, bus_merged_0_wff$D_OUT } ;
  assign bus_merged_1_outflit$wget =
	     { 1'd0, bus_merged_1_awff$D_OUT, bus_merged_1_wff$D_OUT } ;
  assign bus_split_0_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign bus_split_0_doPut$wget =
	     { bus_toOutput_0$wget[173],
	       bus_toOutput_0$wget[173] ?
		 bus_toOutput_0$wget[173:1] :
		 { bus_toOutput_0$wget[0], bus_toOutput_0$wget[172:1] } } ;
  assign bus_split_1_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign bus_split_1_doPut$wget =
	     { bus_toOutput_1$wget[173],
	       bus_toOutput_1$wget[173] ?
		 bus_toOutput_1$wget[173:1] :
		 { bus_toOutput_1$wget[0], bus_toOutput_1$wget[172:1] } } ;
  assign bus_split_2_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign bus_split_2_doPut$wget =
	     { bus_toOutput_2$wget[173],
	       bus_toOutput_2$wget[173] ?
		 bus_toOutput_2$wget[173:1] :
		 { bus_toOutput_2$wget[0], bus_toOutput_2$wget[172:1] } } ;
  assign bus_split_3_wug_putWire$whas =
	     WILL_FIRE_RL_bus_split_3_putOther &&
	     bus_split_3_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_3_putFirst &&
	     !bus_split_3_doPut$wget[173] ;
  assign bus_split_3_doPut$wget =
	     { bus_toOutput_3$wget[173],
	       bus_toOutput_3$wget[173] ?
		 bus_toOutput_3$wget[173:1] :
		 { bus_toOutput_3$wget[0], bus_toOutput_3$wget[172:1] } } ;
  assign bus_inputDest_0$wget =
	     { addr__h53721 >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h54418 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1316,
	       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1320,
	       !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1301 &&
	       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1304 &&
	       (IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1293 ||
		!IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1296),
	       !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1293 &&
	       IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1296 } ;
  assign bus_inputDest_1$wget =
	     { addr__h55507 >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h56103 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1373,
	       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1377,
	       !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1362 &&
	       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1364 &&
	       (IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1357 ||
		!IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1359),
	       !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1357 &&
	       IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1359 } ;
  always@(MUX_bus_toOutput_0$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_0$wset_1__SEL_2 or
	  MUX_bus_toOutput_0$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_0$wset_1__SEL_1:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_0$wset_1__SEL_2:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_0$wset_1__SEL_3:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_0$wset_1__SEL_4:
	  bus_toOutput_0$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_0$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_0$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[0] ;
  always@(MUX_bus_toOutput_1$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_1$wset_1__SEL_2 or
	  MUX_bus_toOutput_1$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_1$wset_1__SEL_1:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_1$wset_1__SEL_2:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_1$wset_1__SEL_3:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_1$wset_1__SEL_4:
	  bus_toOutput_1$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_1$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_1$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[1] ;
  always@(MUX_bus_toOutput_2$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_2$wset_1__SEL_2 or
	  MUX_bus_toOutput_2$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_2$wset_1__SEL_1:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_2$wset_1__SEL_2:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_2$wset_1__SEL_3:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_2$wset_1__SEL_4:
	  bus_toOutput_2$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_2$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_2$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[2] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[2] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[2] ;
  always@(MUX_bus_toOutput_3$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toOutput_3$wset_1__SEL_2 or
	  MUX_bus_toOutput_3$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toOutput_3$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_3$wset_1__SEL_1:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_3$wset_1__SEL_2:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toOutput_3$wset_1__SEL_3:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toOutput_3$wset_1__SEL_4:
	  bus_toOutput_3$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toOutput_3$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_3$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_0$wget[3] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_moreFlits[3] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_inputDest_1$wget[3] ;
  always@(MUX_bus_toDfltOutput$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_toDfltOutput$wset_1__SEL_2 or
	  MUX_bus_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_toDfltOutput$wset_1__SEL_3 or
	  MUX_bus_toDfltOutput$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toDfltOutput$wset_1__SEL_1:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toDfltOutput$wset_1__SEL_2:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      MUX_bus_toDfltOutput$wset_1__SEL_3:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_1;
      MUX_bus_toDfltOutput$wset_1__SEL_4:
	  bus_toDfltOutput$wget = MUX_bus_toDfltOutput$wset_1__VAL_2;
      default: bus_toDfltOutput$wget =
		   174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_toDfltOutput$whas =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign bus_selectInput_0$wget =
	     (IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1534 ||
	      IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1535) ?
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1538 :
	       bus_arbiter_lastSelect ;
  assign bus_selectInput_1$wget =
	     (IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1534 ||
	      IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1535) ?
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1540 :
	       bus_arbiter_firstHot ;
  assign bus_inputDest_0_1$wget = 2'd1 << bus_noRouteSlv_rspFF$D_OUT[8] ;
  assign bus_inputDest_1_1$wget =
	     2'd1 << boot_rom_axi4_deburster_inShim_bff$D_OUT[8] ;
  assign bus_inputDest_2$wget =
	     2'd1 << mem0_controller_axi4_deburster_inShim_bff$D_OUT[8] ;
  assign bus_inputDest_3$wget = 2'd1 << uart0$slave_b_peek[8] ;
  assign bus_inputDest_4$wget =
	     2'd1 << s_otherPeripheralsPortShim_bff$D_OUT[8] ;
  always@(MUX_bus_toOutput_0_1$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_2 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_3 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_4 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_5 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_6 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_7 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_8 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_9 or
	  MUX_bus_toOutput_0_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_0_1$wset_1__SEL_1:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_0_1$wset_1__SEL_2:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_toOutput_0_1$wset_1__SEL_3:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_0_1$wset_1__SEL_4:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_0_1$wset_1__SEL_5:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_0_1$wset_1__SEL_6:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_0_1$wset_1__SEL_7:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_0_1$wset_1__SEL_8:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_0_1$wset_1__SEL_9:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_0_1$wset_1__SEL_10:
	  bus_toOutput_0_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      default: bus_toOutput_0_1$wget = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_0_1$whas =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[0] ||
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[0] ;
  always@(MUX_bus_toOutput_1_1$wset_1__SEL_1 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_2 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_3 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_4 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_5 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_6 or
	  MUX_bus_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_7 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_8 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_9 or
	  MUX_bus_toOutput_1_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_toOutput_1_1$wset_1__SEL_1:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_1_1$wset_1__SEL_2:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_toOutput_1_1$wset_1__SEL_3:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_toOutput_1_1$wset_1__SEL_4:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_1_1$wset_1__SEL_5:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_1_1$wset_1__SEL_6:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_1_1$wset_1__SEL_7:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_toOutput_1_1$wset_1__SEL_8:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_toOutput_1_1$wset_1__SEL_9:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_toOutput_1_1$wset_1__SEL_10:
	  bus_toOutput_1_1$wget = MUX_bus_toDfltOutput_1$wset_1__VAL_5;
      default: bus_toOutput_1_1$wget = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign bus_toOutput_1_1$whas =
	     WILL_FIRE_RL_bus_input_first_flit_2 &&
	     (bus_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_0_1$wget[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_6 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_2 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_3 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_4 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_5 &&
	     (bus_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_3 &&
	     (bus_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_1_1$wget[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_4 &&
	     (bus_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_2$wget[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_5 &&
	     (bus_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_3$wget[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_6 &&
	     (bus_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_inputDest_4$wget[1] ;
  assign bus_selectInput_0_1$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ||
	      IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1925 :
	       bus_arbiter_lastSelect_1 ;
  assign bus_selectInput_1_1$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ||
	      IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1930 :
	       bus_arbiter_lastSelect_1_1 ;
  assign bus_selectInput_2$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ||
	      IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1935 :
	       bus_arbiter_lastSelect_2 ;
  assign bus_selectInput_3$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ||
	      IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1940 :
	       bus_arbiter_lastSelect_3 ;
  assign bus_selectInput_4$wget =
	     (IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ||
	      IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1945 :
	       bus_arbiter_firstHot_1 ;
  assign bus_1_inputDest_0$wget =
	     { core$cpu_imem_master_ar_peek[92:29] >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h114193 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2164,
	       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2168,
	       !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2153 &&
	       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2155 &&
	       (core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2148 ||
		!core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2150),
	       !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2148 &&
	       core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2150 } ;
  assign bus_1_inputDest_1$wget =
	     { core$core_mem_master_ar_peek[92:29] >=
	       soc_map$m_other_peripherals_addr_range[127:64] &&
	       x__h115740 < soc_map$m_other_peripherals_addr_range[63:0] &&
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2202,
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2206,
	       !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2191 &&
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2193 &&
	       (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2186 ||
		!core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2188),
	       !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2186 &&
	       core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2188 } ;
  always@(MUX_bus_1_toOutput_0$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_0$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_0$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_0$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_0$wset_1__SEL_1:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_0$wset_1__SEL_2:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_0$wset_1__SEL_3:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_0$wset_1__SEL_4:
	  bus_1_toOutput_0$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_0$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_0$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[0] ;
  always@(MUX_bus_1_toOutput_1$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_1$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_1$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_1$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_1$wset_1__SEL_1:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_1$wset_1__SEL_2:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_1$wset_1__SEL_3:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_1$wset_1__SEL_4:
	  bus_1_toOutput_1$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_1$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_1$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[1] ;
  always@(MUX_bus_1_toOutput_2$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_2$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_2$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_2$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_2$wset_1__SEL_1:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_2$wset_1__SEL_2:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_2$wset_1__SEL_3:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_2$wset_1__SEL_4:
	  bus_1_toOutput_2$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_2$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_2$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[2] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[2] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[2] ;
  always@(MUX_bus_1_toOutput_3$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_3$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_3$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_3$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_3$wset_1__SEL_1:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_3$wset_1__SEL_2:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toOutput_3$wset_1__SEL_3:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toOutput_3$wset_1__SEL_4:
	  bus_1_toOutput_3$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toOutput_3$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_3$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_0$wget[3] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_moreFlits[3] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 &&
	     bus_1_inputDest_1$wget[3] ;
  always@(MUX_bus_1_toDfltOutput$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_1 or
	  MUX_bus_1_toDfltOutput$wset_1__SEL_2 or
	  MUX_bus_1_toDfltOutput$wset_1__VAL_2 or
	  MUX_bus_1_toDfltOutput$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput$wset_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toDfltOutput$wset_1__SEL_1:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toDfltOutput$wset_1__SEL_2:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      MUX_bus_1_toDfltOutput$wset_1__SEL_3:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_1;
      MUX_bus_1_toDfltOutput$wset_1__SEL_4:
	  bus_1_toDfltOutput$wget = MUX_bus_1_toDfltOutput$wset_1__VAL_2;
      default: bus_1_toDfltOutput$wget =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toDfltOutput$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit &&
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_1_input_follow_flit &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 &&
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 ;
  assign bus_1_selectInput_0$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2359 ||
	      IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2360) ?
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2363 :
	       bus_1_arbiter_lastSelect ;
  assign bus_1_selectInput_1$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2359 ||
	      IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2360) ?
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2365 :
	       bus_1_arbiter_firstHot ;
  assign bus_1_inputDest_0_1$wget = 2'd1 << bus_1_noRouteSlv_currentReq[99] ;
  assign bus_1_inputDest_1_1$wget =
	     2'd1 << boot_rom_axi4_deburster_inShim_rff$D_OUT[73] ;
  assign bus_1_inputDest_2$wget =
	     2'd1 << mem0_controller_axi4_deburster_inShim_rff$D_OUT[73] ;
  assign bus_1_inputDest_3$wget = 2'd1 << uart0$slave_r_peek[73] ;
  assign bus_1_inputDest_4$wget =
	     2'd1 << s_otherPeripheralsPortShim_rff$D_OUT[73] ;
  always@(MUX_bus_1_toOutput_0_1$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_4 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_5 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_6 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_7 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_8 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_9 or
	  MUX_bus_1_toOutput_0_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_0_1$wset_1__SEL_1:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_2:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_3:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_4:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_5:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_6:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_7:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_8:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_9:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_0_1$wset_1__SEL_10:
	  bus_1_toOutput_0_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      default: bus_1_toOutput_0_1$wget =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_0_1$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[0] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[0] ;
  always@(MUX_bus_1_toOutput_1_1$wset_1__SEL_1 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_1 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_2 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_3 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_2 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_4 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_3 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_5 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_4 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_6 or
	  MUX_bus_1_toDfltOutput_1$wset_1__VAL_5 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_7 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_8 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_9 or
	  MUX_bus_1_toOutput_1_1$wset_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_toOutput_1_1$wset_1__SEL_1:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_2:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_1;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_3:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_4:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_5:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_6:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_7:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_2;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_8:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_3;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_9:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_4;
      MUX_bus_1_toOutput_1_1$wset_1__SEL_10:
	  bus_1_toOutput_1_1$wget = MUX_bus_1_toDfltOutput_1$wset_1__VAL_5;
      default: bus_1_toOutput_1_1$wget =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bus_1_toOutput_1_1$whas =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     (bus_1_inputDest_0_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_0_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_0_1$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     (bus_1_moreFlits_1[0] ? 2'd1 : 2'd0) +
	     (bus_1_moreFlits_1[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_moreFlits_1[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     (bus_1_inputDest_1_1$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_1_1$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_1_1$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     (bus_1_inputDest_2$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_2$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_2$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     (bus_1_inputDest_3$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_3$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_3$wget[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     (bus_1_inputDest_4$wget[0] ? 2'd1 : 2'd0) +
	     (bus_1_inputDest_4$wget[1] ? 2'd1 : 2'd0) ==
	     2'd1 &&
	     bus_1_inputDest_4$wget[1] ;
  assign bus_1_selectInput_0_1$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2720 :
	       bus_1_arbiter_lastSelect_1 ;
  assign bus_1_selectInput_1_1$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2725 :
	       bus_1_arbiter_lastSelect_1_1 ;
  assign bus_1_selectInput_2$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2730 :
	       bus_1_arbiter_lastSelect_2 ;
  assign bus_1_selectInput_3$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2735 :
	       bus_1_arbiter_lastSelect_3 ;
  assign bus_1_selectInput_4$wget =
	     (IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ||
	      IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2740 :
	       bus_1_arbiter_firstHot_1 ;
  assign core_mem_master_sig_awSig_src_dropWire$whas =
	     core$core_mem_master_aw_canPeek && core_dmem_pre_fabric_awready ;
  assign core_mem_master_sig_wSig_src_dropWire$whas =
	     core$core_mem_master_w_canPeek && core_dmem_pre_fabric_wready ;
  assign core_mem_master_sig_arSig_src_dropWire$whas =
	     core$core_mem_master_ar_canPeek && core_dmem_pre_fabric_arready ;
  assign m_otherPeripheralsPortShim_sig_awSig_src_dropWire$whas =
	     m_otherPeripheralsPortShim_awff$EMPTY_N &&
	     core_dmem_post_fabric_awready ;
  assign m_otherPeripheralsPortShim_sig_wSig_src_dropWire$whas =
	     m_otherPeripheralsPortShim_wff$EMPTY_N &&
	     core_dmem_post_fabric_wready ;
  assign m_otherPeripheralsPortShim_sig_arSig_src_dropWire$whas =
	     m_otherPeripheralsPortShim_arff$EMPTY_N &&
	     core_dmem_post_fabric_arready ;
  assign bus_merged_0_doDrop$whas =
	     WILL_FIRE_RL_bus_input_follow_flit ||
	     WILL_FIRE_RL_bus_input_first_flit ;
  assign bus_merged_1_doDrop$whas =
	     WILL_FIRE_RL_bus_input_follow_flit_1 ||
	     WILL_FIRE_RL_bus_input_first_flit_1 ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_awff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_wff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ?
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_flitReceived$port1__read[8:0] } ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ?
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_arff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req &&
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       boot_rom_axi4_deburster_outShim_rff$D_OUT[73:1],
	       boot_rom_axi4_deburster_lastReadRspFF$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ?
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port0__write ?
	       boot_rom_axi4_deburster_inSerial_state$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_state ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW &&
	     boot_rom_axi4_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_2 ||
	      WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port2__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port1__write ?
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1 :
	       boot_rom_axi4_deburster_inSerial_state$port1__read ;
  assign boot_rom_axi4_deburster_writesSent$port0__write_1 =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h6324 ;
  assign boot_rom_axi4_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       boot_rom_axi4_deburster_writesSent$port0__write_1 :
	       boot_rom_axi4_deburster_writesSent ;
  assign boot_rom_axi4_deburster_writesSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_writesSent$port1__read ;
  assign boot_rom_axi4_deburster_readsSent$port0__write_1 =
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 ?
	       8'd0 :
	       x1__h7043 ;
  assign boot_rom_axi4_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ?
	       boot_rom_axi4_deburster_readsSent$port0__write_1 :
	       boot_rom_axi4_deburster_readsSent ;
  assign boot_rom_axi4_deburster_readsSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_readsSent$port1__read ;
  assign boot_rom_axi4_deburster_flitReceived$port0__write_1 =
	     { x__h6420,
	       boot_rom_axi4_deburster_outShim_bff$D_OUT[8:2],
	       (boot_rom_axi4_deburster_flitReceived[1:0] == 2'd1 ||
		boot_rom_axi4_deburster_flitReceived[1:0] == 2'd0 &&
		boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] != 2'd1 ||
		boot_rom_axi4_deburster_flitReceived[1:0] == 2'd3 &&
		boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] != 2'd1 &&
		boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] != 2'd0) ?
		 boot_rom_axi4_deburster_outShim_bff$D_OUT[1:0] :
		 boot_rom_axi4_deburster_flitReceived[1:0] } ;
  assign boot_rom_axi4_deburster_flitReceived$port1__read =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ?
	       boot_rom_axi4_deburster_flitReceived$port0__write_1 :
	       boot_rom_axi4_deburster_flitReceived ;
  assign boot_rom_axi4_deburster_flitReceived$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ?
	       18'd169 :
	       boot_rom_axi4_deburster_flitReceived$port1__read ;
  assign boot_rom_axi4_deburster_flitReceived$port3__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       18'd169 :
	       boot_rom_axi4_deburster_flitReceived$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_awff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_wff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ?
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1,
	       mem0_controller_axi4_deburster_flitReceived$port1__read[8:0] } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ?
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_arff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req &&
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       mem0_controller_axi4_deburster_outShim_rff$D_OUT[73:1],
	       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ?
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port0__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW &&
	     mem0_controller_axi4_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_2 ||
	      WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port2__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port1__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state$port1__read ;
  assign mem0_controller_axi4_deburster_writesSent$port0__write_1 =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h12788 ;
  assign mem0_controller_axi4_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       mem0_controller_axi4_deburster_writesSent$port0__write_1 :
	       mem0_controller_axi4_deburster_writesSent ;
  assign mem0_controller_axi4_deburster_writesSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_writesSent$port1__read ;
  assign mem0_controller_axi4_deburster_readsSent$port0__write_1 =
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 ?
	       8'd0 :
	       x1__h13504 ;
  assign mem0_controller_axi4_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ?
	       mem0_controller_axi4_deburster_readsSent$port0__write_1 :
	       mem0_controller_axi4_deburster_readsSent ;
  assign mem0_controller_axi4_deburster_readsSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_readsSent$port1__read ;
  assign mem0_controller_axi4_deburster_flitReceived$port0__write_1 =
	     { x__h12884,
	       mem0_controller_axi4_deburster_outShim_bff$D_OUT[8:2],
	       (mem0_controller_axi4_deburster_flitReceived[1:0] == 2'd1 ||
		mem0_controller_axi4_deburster_flitReceived[1:0] == 2'd0 &&
		mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] !=
		2'd1 ||
		mem0_controller_axi4_deburster_flitReceived[1:0] == 2'd3 &&
		mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] !=
		2'd1 &&
		mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] !=
		2'd0) ?
		 mem0_controller_axi4_deburster_outShim_bff$D_OUT[1:0] :
		 mem0_controller_axi4_deburster_flitReceived[1:0] } ;
  assign mem0_controller_axi4_deburster_flitReceived$port1__read =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ?
	       mem0_controller_axi4_deburster_flitReceived$port0__write_1 :
	       mem0_controller_axi4_deburster_flitReceived ;
  assign mem0_controller_axi4_deburster_flitReceived$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ?
	       18'd169 :
	       mem0_controller_axi4_deburster_flitReceived$port1__read ;
  assign mem0_controller_axi4_deburster_flitReceived$port3__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       18'd169 :
	       mem0_controller_axi4_deburster_flitReceived$port2__read ;

  // register boot_rom_axi4_deburster_flitReceived
  assign boot_rom_axi4_deburster_flitReceived$D_IN =
	     boot_rom_axi4_deburster_flitReceived$port3__read ;
  assign boot_rom_axi4_deburster_flitReceived$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_state
  assign boot_rom_axi4_deburster_inSerial_state$D_IN =
	     boot_rom_axi4_deburster_inSerial_state$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_readsSent
  assign boot_rom_axi4_deburster_readsSent$D_IN =
	     boot_rom_axi4_deburster_readsSent$port2__read ;
  assign boot_rom_axi4_deburster_readsSent$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_writesSent
  assign boot_rom_axi4_deburster_writesSent$D_IN =
	     boot_rom_axi4_deburster_writesSent$port2__read ;
  assign boot_rom_axi4_deburster_writesSent$EN = 1'b1 ;

  // register bus_1_arbiter_firstHot
  assign bus_1_arbiter_firstHot$D_IN = bus_1_selectInput_1$wget ;
  assign bus_1_arbiter_firstHot$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_firstHot_1
  assign bus_1_arbiter_firstHot_1$D_IN = bus_1_selectInput_4$wget ;
  assign bus_1_arbiter_firstHot_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect
  assign bus_1_arbiter_lastSelect$D_IN = bus_1_selectInput_0$wget ;
  assign bus_1_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_1
  assign bus_1_arbiter_lastSelect_1$D_IN = bus_1_selectInput_0_1$wget ;
  assign bus_1_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect_1_1
  assign bus_1_arbiter_lastSelect_1_1$D_IN = bus_1_selectInput_1_1$wget ;
  assign bus_1_arbiter_lastSelect_1_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect_2
  assign bus_1_arbiter_lastSelect_2$D_IN = bus_1_selectInput_2$wget ;
  assign bus_1_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect_3
  assign bus_1_arbiter_lastSelect_3$D_IN = bus_1_selectInput_3$wget ;
  assign bus_1_arbiter_lastSelect_3$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_moreFlits
  assign bus_1_moreFlits$D_IN = 7'd42 ;
  assign bus_1_moreFlits$EN =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 ||
	     WILL_FIRE_RL_bus_1_input_follow_flit ;

  // register bus_1_moreFlits_1
  always@(MUX_bus_1_moreFlits_1$write_1__SEL_1 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_1 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_3 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_3 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_5 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_5 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_7 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_7 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_9 or
	  MUX_bus_1_moreFlits_1$write_1__VAL_9 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_2 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_4 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_6 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_8 or
	  MUX_bus_1_moreFlits_1$write_1__SEL_10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_moreFlits_1$write_1__SEL_1:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_1;
      MUX_bus_1_moreFlits_1$write_1__SEL_3:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_3;
      MUX_bus_1_moreFlits_1$write_1__SEL_5:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_5;
      MUX_bus_1_moreFlits_1$write_1__SEL_7:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_7;
      MUX_bus_1_moreFlits_1$write_1__SEL_9:
	  bus_1_moreFlits_1$D_IN = MUX_bus_1_moreFlits_1$write_1__VAL_9;
      MUX_bus_1_moreFlits_1$write_1__SEL_2 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_4 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_6 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_8 ||
      MUX_bus_1_moreFlits_1$write_1__SEL_10:
	  bus_1_moreFlits_1$D_IN = 8'd42;
      default: bus_1_moreFlits_1$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign bus_1_moreFlits_1$EN =
	     WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_2[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_3[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_4[1] ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	     !MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 &&
	     MUX_bus_1_toDfltOutput_1$wset_1__VAL_5[1] ;

  // register bus_1_noRouteSlv_currentReq
  assign bus_1_noRouteSlv_currentReq$D_IN =
	     { bus_1_toDfltOutput$wget[0], bus_1_toDfltOutput$wget[99:1] } ;
  assign bus_1_noRouteSlv_currentReq$EN =
	     CAN_FIRE_RL_bus_1_dflt_output_selected ;

  // register bus_1_noRouteSlv_flitCount
  assign bus_1_noRouteSlv_flitCount$D_IN =
	     WILL_FIRE_RL_bus_1_dflt_output_selected ?
	       MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_1 :
	       MUX_bus_1_noRouteSlv_flitCount$write_1__VAL_2 ;
  assign bus_1_noRouteSlv_flitCount$EN =
	     WILL_FIRE_RL_bus_1_dflt_output_selected ||
	     WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_2 ;

  // register bus_arbiter_firstHot
  assign bus_arbiter_firstHot$D_IN = bus_selectInput_1$wget ;
  assign bus_arbiter_firstHot$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_arbiter_firstHot_1
  assign bus_arbiter_firstHot_1$D_IN = bus_selectInput_4$wget ;
  assign bus_arbiter_firstHot_1$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect
  assign bus_arbiter_lastSelect$D_IN = bus_selectInput_0$wget ;
  assign bus_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_arbiter_lastSelect_1
  assign bus_arbiter_lastSelect_1$D_IN = bus_selectInput_0_1$wget ;
  assign bus_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect_1_1
  assign bus_arbiter_lastSelect_1_1$D_IN = bus_selectInput_1_1$wget ;
  assign bus_arbiter_lastSelect_1_1$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect_2
  assign bus_arbiter_lastSelect_2$D_IN = bus_selectInput_2$wget ;
  assign bus_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_arbiter_lastSelect_3
  assign bus_arbiter_lastSelect_3$D_IN = bus_selectInput_3$wget ;
  assign bus_arbiter_lastSelect_3$EN = CAN_FIRE_RL_bus_arbitrate_1 ;

  // register bus_merged_0_flitLeft
  assign bus_merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_0_genFirst ?
	       bus_merged_0_awff$D_OUT[28:21] :
	       MUX_bus_merged_0_flitLeft$write_1__VAL_2 ;
  assign bus_merged_0_flitLeft$EN =
	     WILL_FIRE_RL_bus_merged_0_genFirst ||
	     WILL_FIRE_RL_bus_merged_0_genOther ;

  // register bus_merged_1_flitLeft
  assign bus_merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_1_genFirst ?
	       bus_merged_1_awff$D_OUT[28:21] :
	       MUX_bus_merged_1_flitLeft$write_1__VAL_2 ;
  assign bus_merged_1_flitLeft$EN =
	     WILL_FIRE_RL_bus_merged_1_genFirst ||
	     WILL_FIRE_RL_bus_merged_1_genOther ;

  // register bus_moreFlits
  always@(MUX_bus_moreFlits$write_1__SEL_1 or
	  MUX_bus_moreFlits$write_1__VAL_1 or
	  MUX_bus_moreFlits$write_1__SEL_3 or
	  MUX_bus_moreFlits$write_1__VAL_3 or
	  MUX_bus_moreFlits$write_1__SEL_2 or
	  MUX_bus_moreFlits$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_moreFlits$write_1__SEL_1:
	  bus_moreFlits$D_IN = MUX_bus_moreFlits$write_1__VAL_1;
      MUX_bus_moreFlits$write_1__SEL_3:
	  bus_moreFlits$D_IN = MUX_bus_moreFlits$write_1__VAL_3;
      MUX_bus_moreFlits$write_1__SEL_2 || MUX_bus_moreFlits$write_1__SEL_4:
	  bus_moreFlits$D_IN = 7'd42;
      default: bus_moreFlits$D_IN = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign bus_moreFlits$EN =
	     WILL_FIRE_RL_bus_input_first_flit &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit &&
	     MUX_bus_toDfltOutput$wset_1__VAL_1[1] ||
	     WILL_FIRE_RL_bus_input_first_flit_1 &&
	     !MUX_bus_toDfltOutput$wset_1__VAL_2[1] ||
	     WILL_FIRE_RL_bus_input_follow_flit_1 &&
	     MUX_bus_toDfltOutput$wset_1__VAL_2[1] ;

  // register bus_moreFlits_1
  assign bus_moreFlits_1$D_IN = 8'd42 ;
  assign bus_moreFlits_1$EN =
	     WILL_FIRE_RL_bus_input_follow_flit_6 ||
	     WILL_FIRE_RL_bus_input_follow_flit_5 ||
	     WILL_FIRE_RL_bus_input_follow_flit_4 ||
	     WILL_FIRE_RL_bus_input_follow_flit_3 ||
	     WILL_FIRE_RL_bus_input_follow_flit_2 ;

  // register bus_noRouteSlv_awidReg
  assign bus_noRouteSlv_awidReg$D_IN = _theResult____h85519 ;
  assign bus_noRouteSlv_awidReg$EN = CAN_FIRE_RL_bus_dflt_output_selected ;

  // register bus_split_0_flitLeft
  assign bus_split_0_flitLeft$D_IN =
	     MUX_bus_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_0_flitLeft$write_1__VAL_1 :
	       bus_split_0_doPut$wget[101:94] ;
  assign bus_split_0_flitLeft$EN = bus_split_0_wug_putWire$whas ;

  // register bus_split_1_flitLeft
  assign bus_split_1_flitLeft$D_IN =
	     MUX_bus_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_1_flitLeft$write_1__VAL_1 :
	       bus_split_1_doPut$wget[101:94] ;
  assign bus_split_1_flitLeft$EN = bus_split_1_wug_putWire$whas ;

  // register bus_split_2_flitLeft
  assign bus_split_2_flitLeft$D_IN =
	     MUX_bus_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_2_flitLeft$write_1__VAL_1 :
	       bus_split_2_doPut$wget[101:94] ;
  assign bus_split_2_flitLeft$EN = bus_split_2_wug_putWire$whas ;

  // register bus_split_3_flitLeft
  assign bus_split_3_flitLeft$D_IN =
	     MUX_bus_split_3_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_3_flitLeft$write_1__VAL_1 :
	       bus_split_3_doPut$wget[101:94] ;
  assign bus_split_3_flitLeft$EN = bus_split_3_wug_putWire$whas ;

  // register mem0_controller_axi4_deburster_flitReceived
  assign mem0_controller_axi4_deburster_flitReceived$D_IN =
	     mem0_controller_axi4_deburster_flitReceived$port3__read ;
  assign mem0_controller_axi4_deburster_flitReceived$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_state
  assign mem0_controller_axi4_deburster_inSerial_state$D_IN =
	     mem0_controller_axi4_deburster_inSerial_state$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_readsSent
  assign mem0_controller_axi4_deburster_readsSent$D_IN =
	     mem0_controller_axi4_deburster_readsSent$port2__read ;
  assign mem0_controller_axi4_deburster_readsSent$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_writesSent
  assign mem0_controller_axi4_deburster_writesSent$D_IN =
	     mem0_controller_axi4_deburster_writesSent$port2__read ;
  assign mem0_controller_axi4_deburster_writesSent$EN = 1'b1 ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_reset_start_initial ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_start_initial ||
	     WILL_FIRE_RL_rl_reset_complete_initial ;

  // submodule boot_rom
  assign boot_rom$set_addr_map_addr_base =
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign boot_rom$set_addr_map_addr_lim = addr_lim__h165316 ;
  assign boot_rom$slave_ar_put_val =
	     boot_rom_axi4_deburster_outShim_arff$D_OUT ;
  assign boot_rom$slave_aw_put_val =
	     boot_rom_axi4_deburster_outShim_awff$D_OUT ;
  assign boot_rom$slave_w_put_val =
	     boot_rom_axi4_deburster_outShim_wff$D_OUT ;
  assign boot_rom$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign boot_rom$EN_slave_aw_put = CAN_FIRE_RL_ug_snk_2_doPut_1 ;
  assign boot_rom$EN_slave_w_put = CAN_FIRE_RL_ug_snk_2_1_doPut ;
  assign boot_rom$EN_slave_b_drop = CAN_FIRE_RL_ug_src_2_2_doDrop ;
  assign boot_rom$EN_slave_ar_put = CAN_FIRE_RL_ug_snk_2_3_doPut ;
  assign boot_rom$EN_slave_r_drop = CAN_FIRE_RL_ug_src_2_4_doDrop ;

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  assign boot_rom_axi4_deburster_countWriteRspFF$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_produce_bresp ;
  assign boot_rom_axi4_deburster_countWriteRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_arff
  assign boot_rom_axi4_deburster_inShim_arff$D_IN =
	     { bus_1_toOutput_0$wget[0], bus_1_toOutput_0$wget[99:1] } ;
  assign boot_rom_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_bus_1_output_selected ;
  assign boot_rom_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_awff
  assign boot_rom_axi4_deburster_inShim_awff$D_IN =
	     bus_split_0_doPut$wget[172:73] ;
  assign boot_rom_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_bus_split_0_awug_doPut ;
  assign boot_rom_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_bff
  assign boot_rom_axi4_deburster_inShim_bff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign boot_rom_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inShim_bff$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_3 ||
	     WILL_FIRE_RL_bus_input_first_flit_3 ;
  assign boot_rom_axi4_deburster_inShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_rff
  assign boot_rom_axi4_deburster_inShim_rff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[73:0] ;
  assign boot_rom_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;
  assign boot_rom_axi4_deburster_inShim_rff$DEQ =
	     WILL_FIRE_RL_bus_1_input_follow_flit_3 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_3 ;
  assign boot_rom_axi4_deburster_inShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_wff
  assign boot_rom_axi4_deburster_inShim_wff$D_IN =
	     bus_split_0_doPut$wget[72:0] ;
  assign boot_rom_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_bus_split_0_wug_doPut ;
  assign boot_rom_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;
  assign boot_rom_axi4_deburster_inShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  assign boot_rom_axi4_deburster_lastReadRspFF$D_IN =
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 ;
  assign boot_rom_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_lastReadRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_arff
  assign boot_rom_axi4_deburster_outShim_arff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h6717,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_ug_src_2_3_doDrop ;
  assign boot_rom_axi4_deburster_outShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_awff
  assign boot_rom_axi4_deburster_outShim_awff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h5955,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_ug_src_2_doDrop_1 ;
  assign boot_rom_axi4_deburster_outShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_bff
  assign boot_rom_axi4_deburster_outShim_bff$D_IN = boot_rom$slave_b_peek ;
  assign boot_rom_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_ug_snk_2_2_doPut ;
  assign boot_rom_axi4_deburster_outShim_bff$DEQ =
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N ;
  assign boot_rom_axi4_deburster_outShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_rff
  assign boot_rom_axi4_deburster_outShim_rff$D_IN = boot_rom$slave_r_peek ;
  assign boot_rom_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_ug_snk_2_4_doPut ;
  assign boot_rom_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_outShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_wff
  assign boot_rom_axi4_deburster_outShim_wff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[72:1],
	       1'd1 } ;
  assign boot_rom_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_ug_src_2_1_doDrop ;
  assign boot_rom_axi4_deburster_outShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule bus_merged_0_awff
  assign bus_merged_0_awff$D_IN = bus_merged_0_awug_peekWire$wget ;
  assign bus_merged_0_awff$ENQ = CAN_FIRE_RL_bus_merged_0_awFlit ;
  assign bus_merged_0_awff$DEQ = CAN_FIRE_RL_bus_merged_0_genFirst ;
  assign bus_merged_0_awff$CLR = 1'b0 ;

  // submodule bus_merged_0_wff
  assign bus_merged_0_wff$D_IN = core$cpu_imem_master_w_peek ;
  assign bus_merged_0_wff$ENQ = CAN_FIRE_RL_bus_merged_0_wFlit ;
  assign bus_merged_0_wff$DEQ =
	     WILL_FIRE_RL_bus_merged_0_genOther ||
	     WILL_FIRE_RL_bus_merged_0_genFirst ;
  assign bus_merged_0_wff$CLR = 1'b0 ;

  // submodule bus_merged_1_awff
  assign bus_merged_1_awff$D_IN = core$core_mem_master_aw_peek ;
  assign bus_merged_1_awff$ENQ = CAN_FIRE_RL_bus_merged_1_awFlit ;
  assign bus_merged_1_awff$DEQ = CAN_FIRE_RL_bus_merged_1_genFirst ;
  assign bus_merged_1_awff$CLR = 1'b0 ;

  // submodule bus_merged_1_wff
  assign bus_merged_1_wff$D_IN = core$core_mem_master_w_peek ;
  assign bus_merged_1_wff$ENQ = CAN_FIRE_RL_bus_merged_1_wFlit ;
  assign bus_merged_1_wff$DEQ =
	     WILL_FIRE_RL_bus_merged_1_genOther ||
	     WILL_FIRE_RL_bus_merged_1_genFirst ;
  assign bus_merged_1_wff$CLR = 1'b0 ;

  // submodule bus_noRouteSlv_rspFF
  assign bus_noRouteSlv_rspFF$D_IN = { _theResult____h85519, 2'd3 } ;
  assign bus_noRouteSlv_rspFF$ENQ =
	     WILL_FIRE_RL_bus_dflt_output_selected &&
	     bus_toDfltOutput$wget[1] ;
  assign bus_noRouteSlv_rspFF$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_2 ||
	     WILL_FIRE_RL_bus_input_first_flit_2 ;
  assign bus_noRouteSlv_rspFF$CLR = 1'b0 ;

  // submodule core
  assign core$cms_ifc_halt_cpu_state = cms_ifc_halt_cpu_state ;
  assign core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear =
	     uart0$intr ;
  assign core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_mem_master_b_put_val =
	     WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ?
	       core_mem_master_sig_bSig_snk_putWire$wget :
	       bus_toOutput_1_1$wget[8:1] ;
  assign core$core_mem_master_r_put_val =
	     WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ?
	       core_mem_master_sig_rSig_snk_putWire$wget :
	       bus_1_toOutput_1_1$wget[73:1] ;
  assign core$cpu_imem_master_b_put_val =
	     { bus_toOutput_0_1wget_BITS_8_TO_3__q1[4:0],
	       bus_toOutput_0_1$wget[2:1] } ;
  assign core$cpu_imem_master_r_put_val =
	     { bus_1_toOutput_0_1wget_BITS_73_TO_68__q2[4:0],
	       bus_1_toOutput_0_1$wget[67:1] } ;
  assign core$cpu_reset_server_request_put = 1'd1 ;
  assign core$dma_server_ar_put_val = 99'h0 ;
  assign core$dma_server_aw_put_val = 99'h0 ;
  assign core$dma_server_w_put_val = 577'h0 ;
  assign core$nmi_req_set_not_clear = 1'd0 ;
  assign core$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign core$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign core$set_watch_tohost_tohost_addr = set_watch_tohost_tohost_addr ;
  assign core$set_watch_tohost_watch_tohost = set_watch_tohost_watch_tohost ;
  assign core$EN_cpu_reset_server_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign core$EN_cpu_reset_server_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign core$EN_cpu_imem_master_aw_drop =
	     core$RDY_cpu_imem_master_aw_drop &&
	     CAN_FIRE_RL_bus_merged_0_awFlit &&
	     core$cpu_imem_master_aw_canPeek ;
  assign core$EN_cpu_imem_master_w_drop =
	     core$RDY_cpu_imem_master_w_drop &&
	     CAN_FIRE_RL_bus_merged_0_wFlit &&
	     core$cpu_imem_master_w_canPeek ;
  assign core$EN_cpu_imem_master_b_put =
	     core$RDY_cpu_imem_master_b_put && bus_toOutput_0_1$whas &&
	     core$cpu_imem_master_b_canPut ;
  assign core$EN_cpu_imem_master_ar_drop =
	     WILL_FIRE_RL_bus_1_input_follow_flit ||
	     WILL_FIRE_RL_bus_1_input_first_flit ;
  assign core$EN_cpu_imem_master_r_put =
	     core$RDY_cpu_imem_master_r_put && bus_1_toOutput_0_1$whas &&
	     core$cpu_imem_master_r_canPut ;
  assign core$EN_core_mem_master_aw_drop =
	     WILL_FIRE_RL_bus_merged_1_awug_doDrop ||
	     WILL_FIRE_RL_core_mem_master_sig_awSig_src_doDrop ;
  assign core$EN_core_mem_master_w_drop =
	     WILL_FIRE_RL_bus_merged_1_wug_doDrop ||
	     WILL_FIRE_RL_core_mem_master_sig_wSig_src_doDrop ;
  assign core$EN_core_mem_master_b_put =
	     WILL_FIRE_RL_core_mem_master_sig_bSig_snk_doPut ||
	     WILL_FIRE_RL_bus_output_selected_5 ;
  assign core$EN_core_mem_master_ar_drop =
	     WILL_FIRE_RL_bus_1_input_follow_flit_1 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_1 ||
	     WILL_FIRE_RL_core_mem_master_sig_arSig_src_doDrop ;
  assign core$EN_core_mem_master_r_put =
	     WILL_FIRE_RL_core_mem_master_sig_rSig_snk_doPut ||
	     WILL_FIRE_RL_bus_1_output_selected_5 ;
  assign core$EN_dma_server_aw_put = 1'b0 ;
  assign core$EN_dma_server_w_put = 1'b0 ;
  assign core$EN_dma_server_b_drop =
	     core$RDY_dma_server_b_drop && core$dma_server_b_canPeek ;
  assign core$EN_dma_server_ar_put = 1'b0 ;
  assign core$EN_dma_server_r_drop =
	     core$RDY_dma_server_r_drop && core$dma_server_r_canPeek ;
  assign core$EN_set_verbosity = EN_set_verbosity ;
  assign core$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign core$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;
  assign core$EN_cms_ifc_halt_cpu = EN_cms_ifc_halt_cpu ;

  // submodule m_otherPeripheralsPortShim_arff
  assign m_otherPeripheralsPortShim_arff$D_IN = 100'h0 ;
  assign m_otherPeripheralsPortShim_arff$ENQ = 1'b0 ;
  assign m_otherPeripheralsPortShim_arff$DEQ =
	     WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_doDrop ||
	     WILL_FIRE_RL_ug_src_3_doDrop ;
  assign m_otherPeripheralsPortShim_arff$CLR = 1'b0 ;

  // submodule m_otherPeripheralsPortShim_awff
  assign m_otherPeripheralsPortShim_awff$D_IN = 100'h0 ;
  assign m_otherPeripheralsPortShim_awff$ENQ = 1'b0 ;
  assign m_otherPeripheralsPortShim_awff$DEQ =
	     WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_doDrop ||
	     WILL_FIRE_RL_ug_src_doDrop ;
  assign m_otherPeripheralsPortShim_awff$CLR = 1'b0 ;

  // submodule m_otherPeripheralsPortShim_bff
  assign m_otherPeripheralsPortShim_bff$D_IN =
	     WILL_FIRE_RL_ug_snk_2_doPut ?
	       s_otherPeripheralsPortShim_bff$D_OUT :
	       MUX_m_otherPeripheralsPortShim_bff$enq_1__VAL_2 ;
  assign m_otherPeripheralsPortShim_bff$ENQ =
	     WILL_FIRE_RL_ug_snk_2_doPut ||
	     WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_doPut ;
  assign m_otherPeripheralsPortShim_bff$DEQ = 1'b0 ;
  assign m_otherPeripheralsPortShim_bff$CLR = 1'b0 ;

  // submodule m_otherPeripheralsPortShim_rff
  assign m_otherPeripheralsPortShim_rff$D_IN =
	     WILL_FIRE_RL_ug_snk_4_doPut ?
	       s_otherPeripheralsPortShim_rff$D_OUT :
	       MUX_m_otherPeripheralsPortShim_rff$enq_1__VAL_2 ;
  assign m_otherPeripheralsPortShim_rff$ENQ =
	     WILL_FIRE_RL_ug_snk_4_doPut ||
	     WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_doPut ;
  assign m_otherPeripheralsPortShim_rff$DEQ = 1'b0 ;
  assign m_otherPeripheralsPortShim_rff$CLR = 1'b0 ;

  // submodule m_otherPeripheralsPortShim_wff
  assign m_otherPeripheralsPortShim_wff$D_IN = 73'h0 ;
  assign m_otherPeripheralsPortShim_wff$ENQ = 1'b0 ;
  assign m_otherPeripheralsPortShim_wff$DEQ =
	     WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_doDrop ||
	     WILL_FIRE_RL_ug_src_1_doDrop ;
  assign m_otherPeripheralsPortShim_wff$CLR = 1'b0 ;

  // submodule mem0_controller
  assign mem0_controller$set_addr_map_addr_base =
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign mem0_controller$set_addr_map_addr_lim = addr_lim__h165344 ;
  assign mem0_controller$set_watch_tohost_tohost_addr = 64'h0 ;
  assign mem0_controller$set_watch_tohost_watch_tohost = 1'b0 ;
  assign mem0_controller$slave_ar_put_val =
	     mem0_controller_axi4_deburster_outShim_arff$D_OUT ;
  assign mem0_controller$slave_aw_put_val =
	     mem0_controller_axi4_deburster_outShim_awff$D_OUT ;
  assign mem0_controller$slave_w_put_val =
	     mem0_controller_axi4_deburster_outShim_wff$D_OUT ;
  assign mem0_controller$to_raw_mem_response_put = to_raw_mem_response_put ;
  assign mem0_controller$EN_server_reset_request_put =
	     MUX_rg_state$write_1__SEL_1 ;
  assign mem0_controller$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_slave_aw_put = CAN_FIRE_RL_ug_snk_3_doPut_1 ;
  assign mem0_controller$EN_slave_w_put = CAN_FIRE_RL_ug_snk_3_1_doPut ;
  assign mem0_controller$EN_slave_b_drop = CAN_FIRE_RL_ug_src_3_2_doDrop ;
  assign mem0_controller$EN_slave_ar_put = CAN_FIRE_RL_ug_snk_3_3_doPut ;
  assign mem0_controller$EN_slave_r_drop = CAN_FIRE_RL_ug_src_3_4_doDrop ;
  assign mem0_controller$EN_to_raw_mem_request_get =
	     EN_to_raw_mem_request_get ;
  assign mem0_controller$EN_to_raw_mem_response_put =
	     EN_to_raw_mem_response_put ;
  assign mem0_controller$EN_set_watch_tohost = 1'b0 ;

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  assign mem0_controller_axi4_deburster_countWriteRspFF$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_produce_bresp ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_arff
  assign mem0_controller_axi4_deburster_inShim_arff$D_IN =
	     { bus_1_toOutput_1$wget[0], bus_1_toOutput_1$wget[99:1] } ;
  assign mem0_controller_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_bus_1_output_selected_1 ;
  assign mem0_controller_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_awff
  assign mem0_controller_axi4_deburster_inShim_awff$D_IN =
	     bus_split_1_doPut$wget[172:73] ;
  assign mem0_controller_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_bus_split_1_awug_doPut ;
  assign mem0_controller_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_bff
  assign mem0_controller_axi4_deburster_inShim_bff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign mem0_controller_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inShim_bff$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_4 ||
	     WILL_FIRE_RL_bus_input_first_flit_4 ;
  assign mem0_controller_axi4_deburster_inShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_rff
  assign mem0_controller_axi4_deburster_inShim_rff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[73:0] ;
  assign mem0_controller_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;
  assign mem0_controller_axi4_deburster_inShim_rff$DEQ =
	     WILL_FIRE_RL_bus_1_input_follow_flit_4 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_4 ;
  assign mem0_controller_axi4_deburster_inShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_wff
  assign mem0_controller_axi4_deburster_inShim_wff$D_IN =
	     bus_split_1_doPut$wget[72:0] ;
  assign mem0_controller_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_bus_split_1_wug_doPut ;
  assign mem0_controller_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;
  assign mem0_controller_axi4_deburster_inShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  assign mem0_controller_axi4_deburster_lastReadRspFF$D_IN =
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_arff
  assign mem0_controller_axi4_deburster_outShim_arff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h13178,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_ug_src_3_3_doDrop ;
  assign mem0_controller_axi4_deburster_outShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_awff
  assign mem0_controller_axi4_deburster_outShim_awff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h12425,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_ug_src_3_doDrop_1 ;
  assign mem0_controller_axi4_deburster_outShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_bff
  assign mem0_controller_axi4_deburster_outShim_bff$D_IN =
	     mem0_controller$slave_b_peek ;
  assign mem0_controller_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_ug_snk_3_2_doPut ;
  assign mem0_controller_axi4_deburster_outShim_bff$DEQ =
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N ;
  assign mem0_controller_axi4_deburster_outShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_rff
  assign mem0_controller_axi4_deburster_outShim_rff$D_IN =
	     mem0_controller$slave_r_peek ;
  assign mem0_controller_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_ug_snk_3_4_doPut ;
  assign mem0_controller_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_outShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_wff
  assign mem0_controller_axi4_deburster_outShim_wff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[72:1],
	       1'd1 } ;
  assign mem0_controller_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_ug_src_3_1_doDrop ;
  assign mem0_controller_axi4_deburster_outShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule s_otherPeripheralsPortShim_arff
  always@(EN_other_peripherals_ar_put or
	  other_peripherals_ar_put_val or
	  WILL_FIRE_RL_ug_snk_3_doPut or
	  m_otherPeripheralsPortShim_arff$D_OUT or
	  WILL_FIRE_RL_bus_1_output_selected_3 or
	  MUX_s_otherPeripheralsPortShim_arff$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      EN_other_peripherals_ar_put:
	  s_otherPeripheralsPortShim_arff$D_IN = other_peripherals_ar_put_val;
      WILL_FIRE_RL_ug_snk_3_doPut:
	  s_otherPeripheralsPortShim_arff$D_IN =
	      m_otherPeripheralsPortShim_arff$D_OUT;
      WILL_FIRE_RL_bus_1_output_selected_3:
	  s_otherPeripheralsPortShim_arff$D_IN =
	      MUX_s_otherPeripheralsPortShim_arff$enq_1__VAL_4;
      default: s_otherPeripheralsPortShim_arff$D_IN =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign s_otherPeripheralsPortShim_arff$ENQ =
	     EN_other_peripherals_ar_put || WILL_FIRE_RL_ug_snk_3_doPut ||
	     WILL_FIRE_RL_bus_1_output_selected_3 ;
  assign s_otherPeripheralsPortShim_arff$DEQ = 1'b0 ;
  assign s_otherPeripheralsPortShim_arff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_awff
  always@(EN_other_peripherals_aw_put or
	  other_peripherals_aw_put_val or
	  WILL_FIRE_RL_ug_snk_doPut or
	  m_otherPeripheralsPortShim_awff$D_OUT or
	  WILL_FIRE_RL_bus_split_3_awug_doPut or bus_split_3_doPut$wget)
  begin
    case (1'b1) // synopsys parallel_case
      EN_other_peripherals_aw_put:
	  s_otherPeripheralsPortShim_awff$D_IN = other_peripherals_aw_put_val;
      WILL_FIRE_RL_ug_snk_doPut:
	  s_otherPeripheralsPortShim_awff$D_IN =
	      m_otherPeripheralsPortShim_awff$D_OUT;
      WILL_FIRE_RL_bus_split_3_awug_doPut:
	  s_otherPeripheralsPortShim_awff$D_IN =
	      bus_split_3_doPut$wget[172:73];
      default: s_otherPeripheralsPortShim_awff$D_IN =
		   100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign s_otherPeripheralsPortShim_awff$ENQ =
	     EN_other_peripherals_aw_put || WILL_FIRE_RL_ug_snk_doPut ||
	     WILL_FIRE_RL_bus_split_3_awug_doPut ;
  assign s_otherPeripheralsPortShim_awff$DEQ = 1'b0 ;
  assign s_otherPeripheralsPortShim_awff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_bff
  assign s_otherPeripheralsPortShim_bff$D_IN = 9'h0 ;
  assign s_otherPeripheralsPortShim_bff$ENQ = 1'b0 ;
  assign s_otherPeripheralsPortShim_bff$DEQ =
	     WILL_FIRE_RL_bus_input_follow_flit_6 ||
	     WILL_FIRE_RL_bus_input_first_flit_6 ||
	     EN_other_peripherals_b_drop ||
	     WILL_FIRE_RL_ug_src_2_doDrop ;
  assign s_otherPeripheralsPortShim_bff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_rff
  assign s_otherPeripheralsPortShim_rff$D_IN = 74'h0 ;
  assign s_otherPeripheralsPortShim_rff$ENQ = 1'b0 ;
  assign s_otherPeripheralsPortShim_rff$DEQ =
	     WILL_FIRE_RL_bus_1_input_follow_flit_6 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_6 ||
	     EN_other_peripherals_r_drop ||
	     WILL_FIRE_RL_ug_src_4_doDrop ;
  assign s_otherPeripheralsPortShim_rff$CLR = 1'b0 ;

  // submodule s_otherPeripheralsPortShim_wff
  always@(EN_other_peripherals_w_put or
	  other_peripherals_w_put_val or
	  WILL_FIRE_RL_ug_snk_1_doPut or
	  m_otherPeripheralsPortShim_wff$D_OUT or
	  WILL_FIRE_RL_bus_split_3_wug_doPut or bus_split_3_doPut$wget)
  begin
    case (1'b1) // synopsys parallel_case
      EN_other_peripherals_w_put:
	  s_otherPeripheralsPortShim_wff$D_IN = other_peripherals_w_put_val;
      WILL_FIRE_RL_ug_snk_1_doPut:
	  s_otherPeripheralsPortShim_wff$D_IN =
	      m_otherPeripheralsPortShim_wff$D_OUT;
      WILL_FIRE_RL_bus_split_3_wug_doPut:
	  s_otherPeripheralsPortShim_wff$D_IN = bus_split_3_doPut$wget[72:0];
      default: s_otherPeripheralsPortShim_wff$D_IN =
		   73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign s_otherPeripheralsPortShim_wff$ENQ =
	     EN_other_peripherals_w_put || WILL_FIRE_RL_ug_snk_1_doPut ||
	     WILL_FIRE_RL_bus_split_3_wug_doPut ;
  assign s_otherPeripheralsPortShim_wff$DEQ = 1'b0 ;
  assign s_otherPeripheralsPortShim_wff$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule uart0
  assign uart0$put_from_console_put = put_from_console_put ;
  assign uart0$set_addr_map_addr_base = soc_map$m_uart0_addr_range[127:64] ;
  assign uart0$set_addr_map_addr_lim = addr_lim__h165370 ;
  assign uart0$slave_ar_put_val =
	     { bus_1_toOutput_2$wget[0], bus_1_toOutput_2$wget[99:1] } ;
  assign uart0$slave_aw_put_val = bus_split_2_doPut$wget[172:73] ;
  assign uart0$slave_w_put_val = bus_split_2_doPut$wget[72:0] ;
  assign uart0$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign uart0$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_slave_aw_put = CAN_FIRE_RL_bus_split_2_awug_doPut ;
  assign uart0$EN_slave_w_put = CAN_FIRE_RL_bus_split_2_wug_doPut ;
  assign uart0$EN_slave_b_drop =
	     WILL_FIRE_RL_bus_input_follow_flit_5 ||
	     WILL_FIRE_RL_bus_input_first_flit_5 ;
  assign uart0$EN_slave_ar_put = CAN_FIRE_RL_bus_1_output_selected_2 ;
  assign uart0$EN_slave_r_drop =
	     WILL_FIRE_RL_bus_1_input_follow_flit_5 ||
	     WILL_FIRE_RL_bus_1_input_first_flit_5 ;
  assign uart0$EN_get_to_console_get = EN_get_to_console_get ;
  assign uart0$EN_put_from_console_put = EN_put_from_console_put ;

  // remaining internal signals
  assign IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 =
	     (!bus_1_inputDest_0_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_0_1$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_0_1$wget[0] ;
  assign IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2275 =
	     (!bus_1_inputDest_0$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) ?
	       ((!bus_1_inputDest_0$wget[2] || !uart0$slave_ar_canPut) ?
		  bus_1_inputDest_0$wget[3] &&
		  s_otherPeripheralsPortShim_arff$FULL_N :
		  bus_1_inputDest_0$wget[2]) :
	       bus_1_inputDest_0$wget[1] ;
  assign IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2276 =
	     (!bus_1_inputDest_0$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) ?
	       IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2275 :
	       bus_1_inputDest_0$wget[0] ;
  assign IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_1_i_ETC___d2332 =
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 =
	     (!bus_1_inputDest_1_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_1_1$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_1_1$wget[0] ;
  assign IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2313 =
	     (!bus_1_inputDest_1$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) ?
	       ((!bus_1_inputDest_1$wget[2] || !uart0$slave_ar_canPut) ?
		  bus_1_inputDest_1$wget[3] &&
		  s_otherPeripheralsPortShim_arff$FULL_N :
		  bus_1_inputDest_1$wget[2]) :
	       bus_1_inputDest_1$wget[1] ;
  assign IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2314 =
	     (!bus_1_inputDest_1$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) ?
	       IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2313 :
	       bus_1_inputDest_1$wget[0] ;
  assign IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_1_i_ETC___d2347 =
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     bus_1_noRouteSlv_flitCount != 9'd0 ;
  assign IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 =
	     (!bus_1_inputDest_2$wget[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_2$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_2$wget[0] ;
  assign IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 =
	     (!bus_1_inputDest_3$wget[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_3$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_3$wget[0] ;
  assign IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 =
	     (!bus_1_inputDest_4$wget[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_inputDest_4$wget[1] && core$core_mem_master_r_canPut :
	       bus_1_inputDest_4$wget[0] ;
  assign IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 =
	     (!bus_inputDest_0_1$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_0_1$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_0_1$wget[0] ;
  assign IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1450 =
	     (!bus_inputDest_0$wget[1] ||
	      !IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389) ?
	       ((!bus_inputDest_0$wget[2] ||
		 !IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391) ?
		  bus_inputDest_0$wget[3] &&
		  IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393 :
		  bus_inputDest_0$wget[2]) :
	       bus_inputDest_0$wget[1] ;
  assign IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1451 =
	     (!bus_inputDest_0$wget[0] ||
	      !IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387) ?
	       IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1450 :
	       bus_inputDest_0$wget[0] ;
  assign IF_IF_bus_inputDest_0_whas__398_THEN_bus_input_ETC___d1507 =
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     !bus_noRouteSlv_rspFF$FULL_N ;
  assign IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 =
	     (!bus_inputDest_1_1$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_1_1$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_1_1$wget[0] ;
  assign IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1488 =
	     (!bus_inputDest_1$wget[1] ||
	      !IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389) ?
	       ((!bus_inputDest_1$wget[2] ||
		 !IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391) ?
		  bus_inputDest_1$wget[3] &&
		  IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393 :
		  bus_inputDest_1$wget[2]) :
	       bus_inputDest_1$wget[1] ;
  assign IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1489 =
	     (!bus_inputDest_1$wget[0] ||
	      !IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387) ?
	       IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1488 :
	       bus_inputDest_1$wget[0] ;
  assign IF_IF_bus_inputDest_1_whas__457_THEN_bus_input_ETC___d1522 =
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) ==
	     3'd1 ||
	     !bus_noRouteSlv_rspFF$FULL_N ;
  assign IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 =
	     (!bus_inputDest_2$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_2$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_2$wget[0] ;
  assign IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 =
	     (!bus_inputDest_3$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_3$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_3$wget[0] ;
  assign IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 =
	     (!bus_inputDest_4$wget[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_inputDest_4$wget[1] && core$core_mem_master_b_canPut :
	       bus_inputDest_4$wget[0] ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2668 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2659 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2672 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2671 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2676 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2675 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2679 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2683 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687 =
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2672 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2676 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2691 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2696 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2695 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2699 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2703 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2707 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2711 =
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2696 ||
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 ||
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 ||
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716 =
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2676 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	     IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2696 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2720 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2719 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2725 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       (NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
		  IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2723 :
		  IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708) :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2730 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2729 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2735 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2734 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716 ;
  assign IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2740 =
	     (!bus_1_arbiter_firstHot_1 &&
	      bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614) ?
	       (NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
		  IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2738 :
		  IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716) :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ;
  assign IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2356 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       !core$cpu_imem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_1_i_ETC___d2332 &&
	       IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2341 :
	       !core$core_mem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_1_i_ETC___d2347 &&
	       IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2353 ;
  assign IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2357 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       !core$core_mem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_1_i_ETC___d2347 &&
	       IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2353 :
	       !core$cpu_imem_master_ar_canPeek ||
	       IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_1_i_ETC___d2332 &&
	       IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2341 ;
  assign IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2359 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       core$cpu_imem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_ETC___d2245 ||
		IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2276) :
	       core$core_mem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_ETC___d2301 ||
		IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2314) ;
  assign IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2360 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       core$core_mem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_ETC___d2301 ||
		IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2314) :
	       core$cpu_imem_master_ar_canPeek &&
	       (NOT_IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_ETC___d2245 ||
		IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2276) ;
  assign IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2363 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2357 &&
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2359 :
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2360 ;
  assign IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2365 =
	     (!bus_1_arbiter_firstHot && bus_1_arbiter_lastSelect) ?
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2360 :
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2357 &&
	       IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2359 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2641 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2669 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2673 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2677 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2681 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2689 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2693 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2697 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2701 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2705 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2715 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2722 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2727 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2732 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2737 =
	     (!bus_1_arbiter_lastSelect_1_1 && bus_1_arbiter_lastSelect_1) ?
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2650 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2641 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2670 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2669 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2674 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2673 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2678 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2677 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2682 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2681 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2690 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2689 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2694 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2693 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2698 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2697 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2702 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2701 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2706 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2705 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2717 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2715 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2716 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2723 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2722 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2728 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2727 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2708 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2733 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2732 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2738 =
	     (!bus_1_arbiter_lastSelect_2 &&
	      (bus_1_arbiter_lastSelect_1_1 || bus_1_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_1_arbiter_lastSelect_1_1_610_620_AN_ETC___d2737 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2659 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2650 :
	       !(bus_1_noRouteSlv_flitCount != 9'd0) ||
	       IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2671 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2670 :
	       !s_otherPeripheralsPortShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2675 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2674 :
	       !uart0$slave_r_canPeek ||
	       IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2679 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2678 :
	       !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2683 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2682 :
	       !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	       IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2691 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2690 :
	       bus_1_noRouteSlv_flitCount != 9'd0 &&
	       IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2695 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2694 :
	       s_otherPeripheralsPortShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2699 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2698 :
	       uart0$slave_r_canPeek &&
	       IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2703 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2702 :
	       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2707 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2706 :
	       boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	       IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2719 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2717 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2692 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2729 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2728 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2704 ;
  assign IF_NOT_bus_1_arbiter_lastSelect_3_608_616_AND__ETC___d2734 =
	     NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 ?
	       IF_NOT_bus_1_arbiter_lastSelect_2_609_618_AND__ETC___d2733 :
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2680 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2684 &&
	       IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2700 ;
  assign IF_NOT_bus_1_moreFlits_1_602_BIT_0_848_849_OR__ETC___d2853 =
	     (!bus_1_moreFlits_1[0] || !core$cpu_imem_master_r_canPut) ?
	       bus_1_moreFlits_1[1] && core$core_mem_master_r_canPut :
	       bus_1_moreFlits_1[0] ;
  assign IF_NOT_bus_1_moreFlits_318_BIT_0_391_405_OR_NO_ETC___d2414 =
	     (!bus_1_moreFlits[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) ?
	       IF_NOT_bus_1_moreFlits_318_BIT_1_393_407_OR_NO_ETC___d2413 :
	       bus_1_moreFlits[0] ;
  assign IF_NOT_bus_1_moreFlits_318_BIT_1_393_407_OR_NO_ETC___d2413 =
	     (!bus_1_moreFlits[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) ?
	       ((!bus_1_moreFlits[2] || !uart0$slave_ar_canPut) ?
		  bus_1_moreFlits[3] &&
		  s_otherPeripheralsPortShim_arff$FULL_N :
		  bus_1_moreFlits[2]) :
	       bus_1_moreFlits[1] ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1873 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1864 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1877 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1876 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1881 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1880 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1884 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1888 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892 =
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1877 &&
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1881 &&
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1896 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1901 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1900 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1904 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1908 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1912 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1916 =
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1901 ||
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 ||
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 ||
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921 =
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1881 &&
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	     IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1901 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1925 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1924 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1930 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       (NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
		  IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1928 :
		  IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913) :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1935 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1934 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1940 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1939 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921 ;
  assign IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1945 =
	     (!bus_arbiter_firstHot_1 &&
	      bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819) ?
	       (NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
		  IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1943 :
		  IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921) :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ;
  assign IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1531 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       !IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 ||
	       IF_IF_bus_inputDest_0_whas__398_THEN_bus_input_ETC___d1507 &&
	       IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1516 :
	       !IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 ||
	       IF_IF_bus_inputDest_1_whas__457_THEN_bus_input_ETC___d1522 &&
	       IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1528 ;
  assign IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1532 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       !IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 ||
	       IF_IF_bus_inputDest_1_whas__457_THEN_bus_input_ETC___d1522 &&
	       IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1528 :
	       !IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 ||
	       IF_IF_bus_inputDest_0_whas__398_THEN_bus_input_ETC___d1507 &&
	       IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1516 ;
  assign IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1534 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	       (NOT_IF_IF_bus_inputDest_0_whas__398_THEN_bus_i_ETC___d1420 ||
		IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1451) :
	       IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	       (NOT_IF_IF_bus_inputDest_1_whas__457_THEN_bus_i_ETC___d1476 ||
		IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1489) ;
  assign IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1535 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	       (NOT_IF_IF_bus_inputDest_1_whas__457_THEN_bus_i_ETC___d1476 ||
		IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1489) :
	       IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	       (NOT_IF_IF_bus_inputDest_0_whas__398_THEN_bus_i_ETC___d1420 ||
		IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1451) ;
  assign IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1538 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1532 &&
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1534 :
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1535 ;
  assign IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1540 =
	     (!bus_arbiter_firstHot && bus_arbiter_lastSelect) ?
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1535 :
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1532 &&
	       IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1534 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1846 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1874 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1878 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1882 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1886 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1894 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1898 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1902 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1906 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1910 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1920 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1927 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1932 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1937 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913 ;
  assign IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1942 =
	     (!bus_arbiter_lastSelect_1_1 && bus_arbiter_lastSelect_1) ?
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1855 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1846 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1875 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1874 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1879 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1878 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1883 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1882 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1887 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1886 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1895 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1894 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1899 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1898 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1903 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1902 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1907 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1906 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1911 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1910 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1922 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1920 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1921 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1928 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1927 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1933 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1932 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1913 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1938 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1937 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 ;
  assign IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1943 =
	     (!bus_arbiter_lastSelect_2 &&
	      (bus_arbiter_lastSelect_1_1 || bus_arbiter_lastSelect_1)) ?
	       IF_NOT_bus_arbiter_lastSelect_1_1_815_825_AND__ETC___d1942 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1864 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1855 :
	       !bus_noRouteSlv_rspFF$EMPTY_N ||
	       IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1876 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1875 :
	       !s_otherPeripheralsPortShim_bff$EMPTY_N ||
	       IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1880 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1879 :
	       !uart0$slave_b_canPeek ||
	       IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1884 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1883 :
	       !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1888 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1887 :
	       !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	       IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1896 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1895 :
	       bus_noRouteSlv_rspFF$EMPTY_N &&
	       IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1900 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1899 :
	       s_otherPeripheralsPortShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1904 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1903 :
	       uart0$slave_b_canPeek &&
	       IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1908 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1907 :
	       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1912 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1911 :
	       boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	       IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1924 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1922 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1897 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1934 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1933 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1909 ;
  assign IF_NOT_bus_arbiter_lastSelect_3_813_821_AND_bu_ETC___d1939 =
	     NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 ?
	       IF_NOT_bus_arbiter_lastSelect_2_814_823_AND_bu_ETC___d1938 :
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1885 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1889 &&
	       IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1905 ;
  assign IF_NOT_bus_moreFlits_1_807_BIT_0_051_052_OR_NO_ETC___d2056 =
	     (!bus_moreFlits_1[0] || !core$cpu_imem_master_b_canPut) ?
	       bus_moreFlits_1[1] && core$core_mem_master_b_canPut :
	       bus_moreFlits_1[0] ;
  assign IF_NOT_bus_moreFlits_493_BIT_0_571_585_OR_NOT__ETC___d1594 =
	     (!bus_moreFlits[0] ||
	      !IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387) ?
	       IF_NOT_bus_moreFlits_493_BIT_1_573_587_OR_NOT__ETC___d1593 :
	       bus_moreFlits[0] ;
  assign IF_NOT_bus_moreFlits_493_BIT_1_573_587_OR_NOT__ETC___d1593 =
	     (!bus_moreFlits[1] ||
	      !IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389) ?
	       ((!bus_moreFlits[2] ||
		 !IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391) ?
		  bus_moreFlits[3] &&
		  IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393 :
		  bus_moreFlits[2]) :
	       bus_moreFlits[1] ;
  assign IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_bus__ETC___d2657 =
	     (!bus_1_inputDest_0_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_0_1$wget[1] ||
	      !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2340 =
	     (!bus_1_inputDest_0$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) &&
	     (!bus_1_inputDest_0$wget[2] || !uart0$slave_ar_canPut) &&
	     (!bus_1_inputDest_0$wget[3] ||
	      !s_otherPeripheralsPortShim_arff$FULL_N) ;
  assign IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2341 =
	     (!bus_1_inputDest_0$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) &&
	     IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_1__ETC___d2340 ;
  assign IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_bus__ETC___d2648 =
	     (!bus_1_inputDest_1_1$wget[0] ||
	      !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_1_1$wget[1] ||
	      !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2352 =
	     (!bus_1_inputDest_1$wget[1] ||
	      !mem0_controller_axi4_deburster_inShim_arff$FULL_N) &&
	     (!bus_1_inputDest_1$wget[2] || !uart0$slave_ar_canPut) &&
	     (!bus_1_inputDest_1$wget[3] ||
	      !s_otherPeripheralsPortShim_arff$FULL_N) ;
  assign IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2353 =
	     (!bus_1_inputDest_1$wget[0] ||
	      !boot_rom_axi4_deburster_inShim_arff$FULL_N) &&
	     IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_1__ETC___d2352 ;
  assign IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_1__ETC___d2639 =
	     (!bus_1_inputDest_2$wget[0] || !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_2$wget[1] || !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_1__ETC___d2631 =
	     (!bus_1_inputDest_3$wget[0] || !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_3$wget[1] || !core$core_mem_master_r_canPut) ;
  assign IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_1__ETC___d2666 =
	     (!bus_1_inputDest_4$wget[0] || !core$cpu_imem_master_r_canPut) &&
	     (!bus_1_inputDest_4$wget[1] || !core$core_mem_master_r_canPut) ;
  assign IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_in_ETC___d1862 =
	     (!bus_inputDest_0_1$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_0_1$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1515 =
	     (!bus_inputDest_0$wget[1] ||
	      !IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389) &&
	     (!bus_inputDest_0$wget[2] ||
	      !IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391) &&
	     (!bus_inputDest_0$wget[3] ||
	      !IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393) ;
  assign IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1516 =
	     (!bus_inputDest_0$wget[0] ||
	      !IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387) &&
	     IF_bus_inputDest_0_whas__398_THEN_NOT_bus_inpu_ETC___d1515 ;
  assign IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_in_ETC___d1853 =
	     (!bus_inputDest_1_1$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_1_1$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1527 =
	     (!bus_inputDest_1$wget[1] ||
	      !IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389) &&
	     (!bus_inputDest_1$wget[2] ||
	      !IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391) &&
	     (!bus_inputDest_1$wget[3] ||
	      !IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393) ;
  assign IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1528 =
	     (!bus_inputDest_1$wget[0] ||
	      !IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387) &&
	     IF_bus_inputDest_1_whas__457_THEN_NOT_bus_inpu_ETC___d1527 ;
  assign IF_bus_inputDest_2_whas__762_THEN_NOT_bus_inpu_ETC___d1844 =
	     (!bus_inputDest_2$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_2$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_3_whas__777_THEN_NOT_bus_inpu_ETC___d1836 =
	     (!bus_inputDest_3$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_3$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_inputDest_4_whas__794_THEN_NOT_bus_inpu_ETC___d1871 =
	     (!bus_inputDest_4$wget[0] || !core$cpu_imem_master_b_canPut) &&
	     (!bus_inputDest_4$wget[1] || !core$core_mem_master_b_canPut) ;
  assign IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 =
	     (bus_merged_0_flitLeft == 8'd0) ?
	       bus_merged_0_awff$EMPTY_N && bus_merged_0_wff$EMPTY_N :
	       bus_merged_0_wff$EMPTY_N ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1277 =
	     (CAN_FIRE_RL_bus_merged_0_passFlit &&
	      !bus_merged_0_outflit$wget[172]) ?
	       bus_merged_0_outflit$wget[171:0] :
	       { 99'h2AAAAAAAAAAAAAAAAAAAAAAAA,
		 CAN_FIRE_RL_bus_merged_0_passFlit ?
		   bus_merged_0_outflit$wget[72:0] :
		   bus_merged_0_wff$D_OUT } ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1293 =
	     addr__h53721 < soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1296 =
	     x__h54188 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1301 =
	     addr__h53721 < soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1304 =
	     x__h54261 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1310 =
	     addr__h53721 < soc_map$m_uart0_addr_range[127:64] ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1313 =
	     x__h54345 < soc_map$m_uart0_addr_range[63:0] ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1316 =
	     (IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1293 ||
	      !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1296) &&
	     (IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1301 ||
	      !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1304) &&
	     (IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1310 ||
	      !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1313) ;
  assign IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1320 =
	     (IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1293 ||
	      !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1296) &&
	     (IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1301 ||
	      !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1304) &&
	     !IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1310 &&
	     IF_bus_merged_0_outflit_whas__264_AND_NOT_bus__ETC___d1313 ;
  assign IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 =
	     (bus_merged_1_flitLeft == 8'd0) ?
	       bus_merged_1_awff$EMPTY_N && bus_merged_1_wff$EMPTY_N :
	       bus_merged_1_wff$EMPTY_N ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1346 =
	     (CAN_FIRE_RL_bus_merged_1_passFlit &&
	      !bus_merged_1_outflit$wget[172]) ?
	       bus_merged_1_outflit$wget[171:0] :
	       { 99'h2AAAAAAAAAAAAAAAAAAAAAAAA,
		 CAN_FIRE_RL_bus_merged_1_passFlit ?
		   bus_merged_1_outflit$wget[72:0] :
		   bus_merged_1_wff$D_OUT } ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1357 =
	     addr__h55507 < soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1359 =
	     x__h55903 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1362 =
	     addr__h55507 < soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1364 =
	     x__h55966 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1368 =
	     addr__h55507 < soc_map$m_uart0_addr_range[127:64] ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1370 =
	     x__h56040 < soc_map$m_uart0_addr_range[63:0] ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1373 =
	     (IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1357 ||
	      !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1359) &&
	     (IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1362 ||
	      !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1364) &&
	     (IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1368 ||
	      !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1370) ;
  assign IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1377 =
	     (IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1357 ||
	      !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1359) &&
	     (IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1362 ||
	      !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1364) &&
	     !IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1368 &&
	     IF_bus_merged_1_outflit_whas__333_AND_NOT_bus__ETC___d1370 ;
  assign IF_bus_split_0_flitLeft_101_EQ_0_102_THEN_bus__ETC___d1387 =
	     (bus_split_0_flitLeft == 8'd0) ?
	       boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	       boot_rom_axi4_deburster_inShim_wff$FULL_N :
	       boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign IF_bus_split_1_flitLeft_146_EQ_0_147_THEN_bus__ETC___d1389 =
	     (bus_split_1_flitLeft == 8'd0) ?
	       mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	       mem0_controller_axi4_deburster_inShim_wff$FULL_N :
	       mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign IF_bus_split_2_flitLeft_191_EQ_0_192_THEN_bus__ETC___d1391 =
	     (bus_split_2_flitLeft == 8'd0) ?
	       uart0$slave_aw_canPut && uart0$slave_w_canPut :
	       uart0$slave_w_canPut ;
  assign IF_bus_split_3_flitLeft_230_EQ_0_231_THEN_bus__ETC___d1393 =
	     (bus_split_3_flitLeft == 8'd0) ?
	       s_otherPeripheralsPortShim_awff$FULL_N &&
	       s_otherPeripheralsPortShim_wff$FULL_N :
	       s_otherPeripheralsPortShim_wff$FULL_N ;
  assign NOT_IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_ETC___d2245 =
	     (bus_1_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign NOT_IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_ETC___d2301 =
	     (bus_1_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_1_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign NOT_IF_IF_bus_inputDest_0_whas__398_THEN_bus_i_ETC___d1420 =
	     (bus_inputDest_0$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_0$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_noRouteSlv_rspFF$FULL_N ;
  assign NOT_IF_IF_bus_inputDest_1_whas__457_THEN_bus_i_ETC___d1476 =
	     (bus_inputDest_1$wget[0] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[1] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[2] ? 3'd1 : 3'd0) +
	     (bus_inputDest_1$wget[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_noRouteSlv_rspFF$FULL_N ;
  assign NOT_IF_bus_1_moreFlits_318_BIT_0_391_THEN_1_EL_ETC___d2404 =
	     (bus_1_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_1_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_1_noRouteSlv_flitCount == 9'd0 ;
  assign NOT_IF_bus_moreFlits_493_BIT_0_571_THEN_1_ELSE_ETC___d1584 =
	     (bus_moreFlits[0] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[1] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[2] ? 3'd1 : 3'd0) +
	     (bus_moreFlits[3] ? 3'd1 : 3'd0) !=
	     3'd1 &&
	     bus_noRouteSlv_rspFF$FULL_N ;
  assign NOT_bus_1_arbiter_lastSelect_3_608_616_AND_bus_ETC___d2617 =
	     !bus_1_arbiter_lastSelect_3 &&
	     (bus_1_arbiter_lastSelect_2 || bus_1_arbiter_lastSelect_1_1 ||
	      bus_1_arbiter_lastSelect_1) ;
  assign NOT_bus_arbiter_lastSelect_3_813_821_AND_bus_a_ETC___d1822 =
	     !bus_arbiter_lastSelect_3 &&
	     (bus_arbiter_lastSelect_2 || bus_arbiter_lastSelect_1_1 ||
	      bus_arbiter_lastSelect_1) ;
  assign _theResult____h85519 =
	     bus_toDfltOutput$wget[173] ?
	       bus_noRouteSlv_awidReg :
	       currentAwid__h85704 ;
  assign addr__h53721 =
	     (CAN_FIRE_RL_bus_merged_0_passFlit &&
	      !bus_merged_0_outflit$wget[172]) ?
	       bus_merged_0_outflit$wget[165:102] :
	       64'd0 ;
  assign addr__h55507 =
	     (CAN_FIRE_RL_bus_merged_1_passFlit &&
	      !bus_merged_1_outflit$wget[172]) ?
	       bus_merged_1_outflit$wget[165:102] :
	       64'd0 ;
  assign addr_lim__h165316 =
	     soc_map$m_boot_rom_addr_range[127:64] +
	     soc_map$m_boot_rom_addr_range[63:0] ;
  assign addr_lim__h165344 =
	     soc_map$m_mem0_controller_addr_range[127:64] +
	     soc_map$m_mem0_controller_addr_range[63:0] ;
  assign addr_lim__h165370 =
	     soc_map$m_uart0_addr_range[127:64] +
	     soc_map$m_uart0_addr_range[63:0] ;
  assign boot_rom_axi4_deburster_readsSent_port0__read__ETC___d155 =
	     boot_rom_axi4_deburster_readsSent ==
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign bus_1_arbiter_lastSelect_3_608_OR_bus_1_arbite_ETC___d2614 =
	     bus_1_arbiter_lastSelect_3 || bus_1_arbiter_lastSelect_2 ||
	     bus_1_arbiter_lastSelect_1_1 ||
	     bus_1_arbiter_lastSelect_1 ;
  assign bus_1_inputCanPeek_0_1_whas__515_AND_bus_1_inp_ETC___d2601 =
	     bus_1_noRouteSlv_flitCount != 9'd0 &&
	     IF_IF_bus_1_inputDest_0_1_whas__518_THEN_NOT_b_ETC___d2536 ||
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_IF_bus_1_inputDest_1_1_whas__541_THEN_NOT_b_ETC___d2551 ||
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     IF_IF_bus_1_inputDest_2_whas__557_THEN_NOT_bus_ETC___d2567 ||
	     uart0$slave_r_canPeek &&
	     IF_IF_bus_1_inputDest_3_whas__572_THEN_NOT_bus_ETC___d2582 ||
	     s_otherPeripheralsPortShim_rff$EMPTY_N &&
	     IF_IF_bus_1_inputDest_4_whas__589_THEN_NOT_bus_ETC___d2599 ;
  assign bus_1_inputCanPeek_0_whas__220_AND_bus_1_input_ETC___d2317 =
	     core$cpu_imem_master_ar_canPeek &&
	     (NOT_IF_IF_bus_1_inputDest_0_whas__223_THEN_bus_ETC___d2245 ||
	      IF_IF_bus_1_inputDest_0_whas__223_THEN_NOT_bus_ETC___d2276) ||
	     core$core_mem_master_ar_canPeek &&
	     (NOT_IF_IF_bus_1_inputDest_1_whas__282_THEN_bus_ETC___d2301 ||
	      IF_IF_bus_1_inputDest_1_whas__282_THEN_NOT_bus_ETC___d2314) ;
  assign bus_1_toOutput_0_1wget_BITS_73_TO_68__q2 =
	     bus_1_toOutput_0_1$wget[73:68] ;
  assign bus_arbiter_lastSelect_3_813_OR_bus_arbiter_la_ETC___d1819 =
	     bus_arbiter_lastSelect_3 || bus_arbiter_lastSelect_2 ||
	     bus_arbiter_lastSelect_1_1 ||
	     bus_arbiter_lastSelect_1 ;
  assign bus_inputCanPeek_0_1_whas__720_AND_bus_inputCa_ETC___d1806 =
	     bus_noRouteSlv_rspFF$EMPTY_N &&
	     IF_IF_bus_inputDest_0_1_whas__723_THEN_NOT_bus_ETC___d1741 ||
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_IF_bus_inputDest_1_1_whas__746_THEN_NOT_bus_ETC___d1756 ||
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     IF_IF_bus_inputDest_2_whas__762_THEN_NOT_bus_i_ETC___d1772 ||
	     uart0$slave_b_canPeek &&
	     IF_IF_bus_inputDest_3_whas__777_THEN_NOT_bus_i_ETC___d1787 ||
	     s_otherPeripheralsPortShim_bff$EMPTY_N &&
	     IF_IF_bus_inputDest_4_whas__794_THEN_NOT_bus_i_ETC___d1804 ;
  assign bus_inputCanPeek_0_whas__395_AND_bus_inputCanP_ETC___d1492 =
	     IF_bus_merged_0_flitLeft_011_EQ_0_012_THEN_bus_ETC___d1263 &&
	     (NOT_IF_IF_bus_inputDest_0_whas__398_THEN_bus_i_ETC___d1420 ||
	      IF_IF_bus_inputDest_0_whas__398_THEN_NOT_bus_i_ETC___d1451) ||
	     IF_bus_merged_1_flitLeft_065_EQ_0_066_THEN_bus_ETC___d1332 &&
	     (NOT_IF_IF_bus_inputDest_1_whas__457_THEN_bus_i_ETC___d1476 ||
	      IF_IF_bus_inputDest_1_whas__457_THEN_NOT_bus_i_ETC___d1489) ;
  assign bus_toOutput_0_1wget_BITS_8_TO_3__q1 = bus_toOutput_0_1$wget[8:3] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2186 =
	     core$core_mem_master_ar_peek[92:29] <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2188 =
	     x__h115540 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2191 =
	     core$core_mem_master_ar_peek[92:29] <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2193 =
	     x__h115603 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2197 =
	     core$core_mem_master_ar_peek[92:29] <
	     soc_map$m_uart0_addr_range[127:64] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2199 =
	     x__h115677 < soc_map$m_uart0_addr_range[63:0] ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2202 =
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2186 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2188) &&
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2191 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2193) &&
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2197 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2199) ;
  assign core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2206 =
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2186 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2188) &&
	     (core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2191 ||
	      !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2193) &&
	     !core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2197 &&
	     core_core_mem_master_ar_peek__69_BITS_92_TO_29_ETC___d2199 ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2148 =
	     core$cpu_imem_master_ar_peek[92:29] <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2150 =
	     x__h113993 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2153 =
	     core$cpu_imem_master_ar_peek[92:29] <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2155 =
	     x__h114056 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2159 =
	     core$cpu_imem_master_ar_peek[92:29] <
	     soc_map$m_uart0_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2161 =
	     x__h114130 < soc_map$m_uart0_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2164 =
	     (core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2148 ||
	      !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2150) &&
	     (core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2153 ||
	      !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2155) &&
	     (core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2159 ||
	      !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2161) ;
  assign core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2168 =
	     (core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2148 ||
	      !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2150) &&
	     (core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2153 ||
	      !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2155) &&
	     !core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2159 &&
	     core_cpu_imem_master_ar_peek__138_BITS_92_TO_2_ETC___d2161 ;
  assign currentAwid__h85704 =
	     { bus_toDfltOutput$wget[0], bus_toDfltOutput$wget[172:167] } ;
  assign mem0_controller_axi4_deburster_readsSent_port0_ETC___d318 =
	     mem0_controller_axi4_deburster_readsSent ==
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign x1__h12788 = mem0_controller_axi4_deburster_writesSent + 8'd1 ;
  assign x1__h13504 = mem0_controller_axi4_deburster_readsSent + 8'd1 ;
  assign x1__h6324 = boot_rom_axi4_deburster_writesSent + 8'd1 ;
  assign x1__h7043 = boot_rom_axi4_deburster_readsSent + 8'd1 ;
  assign x__h113993 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h114056 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h114130 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h114193 =
	     core$cpu_imem_master_ar_peek[92:29] -
	     soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h115540 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h115603 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h115677 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_uart0_addr_range[127:64] ;
  assign x__h115740 =
	     core$core_mem_master_ar_peek[92:29] -
	     soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h12545 = { 56'd0, mem0_controller_axi4_deburster_writesSent } ;
  assign x__h12884 =
	     mem0_controller_axi4_deburster_flitReceived[17:9] + 9'd1 ;
  assign x__h13298 = { 56'd0, mem0_controller_axi4_deburster_readsSent } ;
  assign x__h54188 = addr__h53721 - soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h54261 =
	     addr__h53721 - soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h54345 = addr__h53721 - soc_map$m_uart0_addr_range[127:64] ;
  assign x__h54418 =
	     addr__h53721 - soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h55903 = addr__h55507 - soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h55966 =
	     addr__h55507 - soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h56040 = addr__h55507 - soc_map$m_uart0_addr_range[127:64] ;
  assign x__h56103 =
	     addr__h55507 - soc_map$m_other_peripherals_addr_range[127:64] ;
  assign x__h6079 = { 56'd0, boot_rom_axi4_deburster_writesSent } ;
  assign x__h6420 = boot_rom_axi4_deburster_flitReceived[17:9] + 9'd1 ;
  assign x__h6837 = { 56'd0, boot_rom_axi4_deburster_readsSent } ;
  assign x_araddr__h13178 =
	     (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h13286 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h6717 =
	     (boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h6825 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_awaddr__h12425 =
	     (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h12533 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h5955 =
	     (boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h6067 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign y__h12533 =
	     x__h12545 <<
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h13286 =
	     x__h13298 <<
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h6067 =
	     x__h6079 <<
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h6825 =
	     x__h6837 <<
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 18'd169;
	boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_moreFlits <= `BSV_ASSIGNMENT_DELAY 7'd42;
	bus_1_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY 8'd42;
	bus_1_noRouteSlv_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_moreFlits <= `BSV_ASSIGNMENT_DELAY 7'd42;
	bus_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY 8'd42;
	bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	    18'd169;
	mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (boot_rom_axi4_deburster_flitReceived$EN)
	  boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_flitReceived$D_IN;
	if (boot_rom_axi4_deburster_inSerial_lastWasRead$EN)
	  boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_state$EN)
	  boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_state$D_IN;
	if (boot_rom_axi4_deburster_readsSent$EN)
	  boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_readsSent$D_IN;
	if (boot_rom_axi4_deburster_writesSent$EN)
	  boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_writesSent$D_IN;
	if (bus_1_arbiter_firstHot$EN)
	  bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot$D_IN;
	if (bus_1_arbiter_firstHot_1$EN)
	  bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot_1$D_IN;
	if (bus_1_arbiter_lastSelect$EN)
	  bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect$D_IN;
	if (bus_1_arbiter_lastSelect_1$EN)
	  bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_1$D_IN;
	if (bus_1_arbiter_lastSelect_1_1$EN)
	  bus_1_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_1_1$D_IN;
	if (bus_1_arbiter_lastSelect_2$EN)
	  bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_2$D_IN;
	if (bus_1_arbiter_lastSelect_3$EN)
	  bus_1_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_3$D_IN;
	if (bus_1_moreFlits$EN)
	  bus_1_moreFlits <= `BSV_ASSIGNMENT_DELAY bus_1_moreFlits$D_IN;
	if (bus_1_moreFlits_1$EN)
	  bus_1_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY bus_1_moreFlits_1$D_IN;
	if (bus_1_noRouteSlv_flitCount$EN)
	  bus_1_noRouteSlv_flitCount <= `BSV_ASSIGNMENT_DELAY
	      bus_1_noRouteSlv_flitCount$D_IN;
	if (bus_arbiter_firstHot$EN)
	  bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_firstHot$D_IN;
	if (bus_arbiter_firstHot_1$EN)
	  bus_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_firstHot_1$D_IN;
	if (bus_arbiter_lastSelect$EN)
	  bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect$D_IN;
	if (bus_arbiter_lastSelect_1$EN)
	  bus_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_1$D_IN;
	if (bus_arbiter_lastSelect_1_1$EN)
	  bus_arbiter_lastSelect_1_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_1_1$D_IN;
	if (bus_arbiter_lastSelect_2$EN)
	  bus_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_2$D_IN;
	if (bus_arbiter_lastSelect_3$EN)
	  bus_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect_3$D_IN;
	if (bus_merged_0_flitLeft$EN)
	  bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_0_flitLeft$D_IN;
	if (bus_merged_1_flitLeft$EN)
	  bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_1_flitLeft$D_IN;
	if (bus_moreFlits$EN)
	  bus_moreFlits <= `BSV_ASSIGNMENT_DELAY bus_moreFlits$D_IN;
	if (bus_moreFlits_1$EN)
	  bus_moreFlits_1 <= `BSV_ASSIGNMENT_DELAY bus_moreFlits_1$D_IN;
	if (bus_split_0_flitLeft$EN)
	  bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_0_flitLeft$D_IN;
	if (bus_split_1_flitLeft$EN)
	  bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_1_flitLeft$D_IN;
	if (bus_split_2_flitLeft$EN)
	  bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_2_flitLeft$D_IN;
	if (bus_split_3_flitLeft$EN)
	  bus_split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_3_flitLeft$D_IN;
	if (mem0_controller_axi4_deburster_flitReceived$EN)
	  mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_flitReceived$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_lastWasRead$EN)
	  mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_state$EN)
	  mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_state$D_IN;
	if (mem0_controller_axi4_deburster_readsSent$EN)
	  mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_readsSent$D_IN;
	if (mem0_controller_axi4_deburster_writesSent$EN)
	  mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_writesSent$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (bus_1_noRouteSlv_currentReq$EN)
      bus_1_noRouteSlv_currentReq <= `BSV_ASSIGNMENT_DELAY
	  bus_1_noRouteSlv_currentReq$D_IN;
    if (bus_noRouteSlv_awidReg$EN)
      bus_noRouteSlv_awidReg <= `BSV_ASSIGNMENT_DELAY
	  bus_noRouteSlv_awidReg$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    boot_rom_axi4_deburster_flitReceived = 18'h2AAAA;
    boot_rom_axi4_deburster_inSerial_lastWasRead = 1'h0;
    boot_rom_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    boot_rom_axi4_deburster_inSerial_shim_rff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_state = 2'h2;
    boot_rom_axi4_deburster_readsSent = 8'hAA;
    boot_rom_axi4_deburster_writesSent = 8'hAA;
    bus_1_arbiter_firstHot = 1'h0;
    bus_1_arbiter_firstHot_1 = 1'h0;
    bus_1_arbiter_lastSelect = 1'h0;
    bus_1_arbiter_lastSelect_1 = 1'h0;
    bus_1_arbiter_lastSelect_1_1 = 1'h0;
    bus_1_arbiter_lastSelect_2 = 1'h0;
    bus_1_arbiter_lastSelect_3 = 1'h0;
    bus_1_moreFlits = 7'h2A;
    bus_1_moreFlits_1 = 8'hAA;
    bus_1_noRouteSlv_currentReq = 100'hAAAAAAAAAAAAAAAAAAAAAAAAA;
    bus_1_noRouteSlv_flitCount = 9'h0AA;
    bus_arbiter_firstHot = 1'h0;
    bus_arbiter_firstHot_1 = 1'h0;
    bus_arbiter_lastSelect = 1'h0;
    bus_arbiter_lastSelect_1 = 1'h0;
    bus_arbiter_lastSelect_1_1 = 1'h0;
    bus_arbiter_lastSelect_2 = 1'h0;
    bus_arbiter_lastSelect_3 = 1'h0;
    bus_merged_0_flitLeft = 8'hAA;
    bus_merged_1_flitLeft = 8'hAA;
    bus_moreFlits = 7'h2A;
    bus_moreFlits_1 = 8'hAA;
    bus_noRouteSlv_awidReg = 7'h2A;
    bus_split_0_flitLeft = 8'hAA;
    bus_split_1_flitLeft = 8'hAA;
    bus_split_2_flitLeft = 8'hAA;
    bus_split_3_flitLeft = 8'hAA;
    mem0_controller_axi4_deburster_flitReceived = 18'h2AAAA;
    mem0_controller_axi4_deburster_inSerial_lastWasRead = 1'h0;
    mem0_controller_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    mem0_controller_axi4_deburster_inSerial_shim_rff_rv =
	75'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_wff_rv =
	74'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_state = 2'h2;
    mem0_controller_axi4_deburster_readsSent = 8'hAA;
    mem0_controller_axi4_deburster_writesSent = 8'hAA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_awSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_wSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_bSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_arSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_core_mem_master_sig_rSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_awSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_wSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_bSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_arSig_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_otherPeripheralsPortShim_sig_rSig_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_warnDoDrop_1)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_warnDoPut_1)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_2_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_2_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_warnDoDrop_1)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_warnDoPut_1)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_1_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_1_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_2_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_2_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_3_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_3_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_src_3_4_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_snk_3_4_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate_1 &&
	  IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1873 &&
	  IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate_1 &&
	  IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1873 &&
	  IF_NOT_bus_arbiter_firstHot_1_811_812_AND_bus__ETC___d1892)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_2)
	begin
	  v__h97282 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_2)
	$display("%0t -- %m error: input#%0d ",
		 v__h97282,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2)
	begin
	  v__h97544 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2)
	$write("%0t -- %m error: input#%0d ",
	       v__h97544,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  bus_noRouteSlv_rspFF$EMPTY_N &&
	  !bus_inputDest_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  (!bus_noRouteSlv_rspFF$EMPTY_N || bus_inputDest_0_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  bus_noRouteSlv_rspFF$EMPTY_N &&
	  !bus_inputDest_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2 &&
	  (!bus_noRouteSlv_rspFF$EMPTY_N || bus_inputDest_0_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_3)
	begin
	  v__h97828 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_3)
	$display("%0t -- %m error: input#%0d ",
		 v__h97828,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3)
	begin
	  v__h98090 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3)
	$write("%0t -- %m error: input#%0d ",
	       v__h98090,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_1_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_1_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_1_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_1_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_4)
	begin
	  v__h98374 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_4)
	$display("%0t -- %m error: input#%0d ",
		 v__h98374,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4)
	begin
	  v__h98636 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4)
	$write("%0t -- %m error: input#%0d ",
	       v__h98636,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	  !bus_inputDest_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ||
	   bus_inputDest_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_5)
	begin
	  v__h98920 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_5)
	$display("%0t -- %m error: input#%0d ",
		 v__h98920,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5)
	begin
	  v__h99182 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5)
	$write("%0t -- %m error: input#%0d ",
	       v__h99182,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  uart0$RDY_slave_b_peek &&
	  !bus_inputDest_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_b_peek || bus_inputDest_3$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  uart0$RDY_slave_b_peek &&
	  !bus_inputDest_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_b_peek || bus_inputDest_3$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_6)
	begin
	  v__h99466 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_6)
	$display("%0t -- %m error: input#%0d ",
		 v__h99466,
		 $signed(32'd4),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6)
	begin
	  v__h99728 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6)
	$write("%0t -- %m error: input#%0d ",
	       v__h99728,
	       $signed(32'd4),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_bff$EMPTY_N &&
	  !bus_inputDest_4$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_bff$EMPTY_N ||
	   bus_inputDest_4$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_bff$EMPTY_N &&
	  !bus_inputDest_4$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_bff$EMPTY_N ||
	   bus_inputDest_4$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_legal_destination_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_3 &&
	  WILL_FIRE_RL_bus_input_follow_flit_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_3] and\n  [RL_bus_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_4 &&
	  WILL_FIRE_RL_bus_input_follow_flit_4)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_4] and\n  [RL_bus_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_5 &&
	  WILL_FIRE_RL_bus_input_follow_flit_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_5] and\n  [RL_bus_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_6 &&
	  WILL_FIRE_RL_bus_input_follow_flit_6)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_6] and\n  [RL_bus_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1531 &&
	  IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1532)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1531 &&
	  IF_NOT_bus_arbiter_firstHot_497_498_AND_bus_ar_ETC___d1532)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail)
	begin
	  v__h62467 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail)
	$display("%0t -- %m error: input#%0d ",
		 v__h62467,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_1)
	begin
	  v__h62931 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_1)
	$display("%0t -- %m error: input#%0d ",
		 v__h62931,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitration_fail_1) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit &&
	  WILL_FIRE_RL_bus_input_follow_flit)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 262, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit] and\n  [RL_bus_input_follow_flit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit ||
	   WILL_FIRE_RL_bus_input_follow_flit) &&
	  (WILL_FIRE_RL_bus_input_first_flit_1 ||
	   WILL_FIRE_RL_bus_input_follow_flit_1))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit,\n  RL_bus_input_follow_flit] and [RL_bus_input_first_flit_1,\n  RL_bus_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_1 &&
	  WILL_FIRE_RL_bus_input_follow_flit_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_1] and\n  [RL_bus_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_output_selected &&
	  WILL_FIRE_RL_bus_output_selected_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected] and\n  [RL_bus_output_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_output_selected ||
	   WILL_FIRE_RL_bus_output_selected_1) &&
	  WILL_FIRE_RL_bus_output_selected_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected,\n  RL_bus_output_selected_1] and [RL_bus_output_selected_2] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_output_selected ||
	   WILL_FIRE_RL_bus_output_selected_1 ||
	   WILL_FIRE_RL_bus_output_selected_2) &&
	  WILL_FIRE_RL_bus_output_selected_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected,\n  RL_bus_output_selected_1, RL_bus_output_selected_2] and\n  [RL_bus_output_selected_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_output_selected ||
	   WILL_FIRE_RL_bus_output_selected_1 ||
	   WILL_FIRE_RL_bus_output_selected_2 ||
	   WILL_FIRE_RL_bus_output_selected_3) &&
	  WILL_FIRE_RL_bus_dflt_output_selected)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected,\n  RL_bus_output_selected_1, RL_bus_output_selected_2,\n  RL_bus_output_selected_3] and [RL_bus_dflt_output_selected] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_input_first_flit_2 &&
	  WILL_FIRE_RL_bus_input_follow_flit_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2] and\n  [RL_bus_input_follow_flit_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2) &&
	  (WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2] and [RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3) &&
	  (WILL_FIRE_RL_bus_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_input_follow_flit_4))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2, RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3] and [RL_bus_input_first_flit_4,\n  RL_bus_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_input_follow_flit_4) &&
	  (WILL_FIRE_RL_bus_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_input_follow_flit_5))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2, RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3, RL_bus_input_first_flit_4,\n  RL_bus_input_follow_flit_4] and [RL_bus_input_first_flit_5,\n  RL_bus_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_input_follow_flit_4 ||
	   WILL_FIRE_RL_bus_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_input_follow_flit_5) &&
	  (WILL_FIRE_RL_bus_input_first_flit_6 ||
	   WILL_FIRE_RL_bus_input_follow_flit_6))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_input_first_flit_2,\n  RL_bus_input_follow_flit_2, RL_bus_input_first_flit_3,\n  RL_bus_input_follow_flit_3, RL_bus_input_first_flit_4,\n  RL_bus_input_follow_flit_4, RL_bus_input_first_flit_5,\n  RL_bus_input_follow_flit_5] and [RL_bus_input_first_flit_6,\n  RL_bus_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_output_selected_4 &&
	  WILL_FIRE_RL_bus_output_selected_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_output_selected_4] and\n  [RL_bus_output_selected_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && !bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && !bus_merged_0_wff$D_OUT[0] &&
	  bus_merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_awug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_wug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft > 8'd1)
	$display("%m - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && !bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft == 8'd1)
	$display("%m - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && !bus_merged_1_wff$D_OUT[0] &&
	  bus_merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_awug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_wug_warnDoDrop)
	$display("WARNING: %m - dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putFirst && bus_split_3_doPut$wget[173])
	$display("splitWrite - Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putFirst && bus_split_3_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft > 8'd1)
	$display("splitWrite - Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  !bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft == 8'd1)
	$display("splitWrite - Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  !bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && !bus_split_3_doPut$wget[173])
	$display("splitWrite - Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && !bus_split_3_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_awug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_wug_warnDoPut)
	$display("WARNING: %m - putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2356 &&
	  IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2357)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2356 &&
	  IF_NOT_bus_1_arbiter_firstHot_322_323_AND_bus__ETC___d2357)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail)
	begin
	  v__h122166 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail)
	$display("%0t -- %m error: input#%0d ",
		 v__h122166,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_1)
	begin
	  v__h122628 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_1)
	$display("%0t -- %m error: input#%0d ",
		 v__h122628,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_1) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit &&
	  WILL_FIRE_RL_bus_1_input_follow_flit)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 262, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit] and\n  [RL_bus_1_input_follow_flit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit ||
	   WILL_FIRE_RL_bus_1_input_follow_flit) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_1 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_1))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit,\n  RL_bus_1_input_follow_flit] and [RL_bus_1_input_first_flit_1,\n  RL_bus_1_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_1 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_1] and\n  [RL_bus_1_input_follow_flit_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB)
	$display("Error: \"../..//libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 480, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_boot_rom_axi4_deburster_inSerial_takeR] and\n  [RL_boot_rom_axi4_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB)
	$display("Error: \"../..//libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 480, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mem0_controller_axi4_deburster_inSerial_takeR] and\n  [RL_mem0_controller_axi4_deburster_inSerial_takeB] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  SoC address map:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  Boot ROM:        0x%0h .. 0x%0h",
		 soc_map$m_boot_rom_addr_range[127:64],
		 addr_lim__h165316);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  Mem0 Controller: 0x%0h .. 0x%0h",
		 soc_map$m_mem0_controller_addr_range[127:64],
		 addr_lim__h165344);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("  UART0:           0x%0h .. 0x%0h",
		 soc_map$m_uart0_addr_range[127:64],
		 addr_lim__h165370);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	begin
	  v__h165548 = $stime;
	  #0;
	end
    v__h165542 = v__h165548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("%0d:%m.rl_reset_complete_initial", v__h165542);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_output_selected &&
	  WILL_FIRE_RL_bus_1_output_selected_1)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected] and\n  [RL_bus_1_output_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_output_selected ||
	   WILL_FIRE_RL_bus_1_output_selected_1) &&
	  WILL_FIRE_RL_bus_1_output_selected_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected,\n  RL_bus_1_output_selected_1] and [RL_bus_1_output_selected_2] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_output_selected ||
	   WILL_FIRE_RL_bus_1_output_selected_1 ||
	   WILL_FIRE_RL_bus_1_output_selected_2) &&
	  WILL_FIRE_RL_bus_1_output_selected_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected,\n  RL_bus_1_output_selected_1, RL_bus_1_output_selected_2] and\n  [RL_bus_1_output_selected_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_output_selected ||
	   WILL_FIRE_RL_bus_1_output_selected_1 ||
	   WILL_FIRE_RL_bus_1_output_selected_2 ||
	   WILL_FIRE_RL_bus_1_output_selected_3) &&
	  WILL_FIRE_RL_bus_1_dflt_output_selected)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected,\n  RL_bus_1_output_selected_1, RL_bus_1_output_selected_2,\n  RL_bus_1_output_selected_3] and [RL_bus_1_dflt_output_selected] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2668 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687)
	$display("mkFairOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2668 &&
	  IF_NOT_bus_1_arbiter_firstHot_1_606_607_AND_bu_ETC___d2687)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_2)
	begin
	  v__h144476 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_2)
	$display("%0t -- %m error: input#%0d ",
		 v__h144476,
		 $signed(32'd0),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2)
	begin
	  v__h144738 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2)
	$write("%0t -- %m error: input#%0d ",
	       v__h144738,
	       $signed(32'd0),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  bus_1_noRouteSlv_flitCount != 9'd0 &&
	  !bus_1_inputDest_0_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  (!(bus_1_noRouteSlv_flitCount != 9'd0) ||
	   bus_1_inputDest_0_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  bus_1_noRouteSlv_flitCount != 9'd0 &&
	  !bus_1_inputDest_0_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2 &&
	  (!(bus_1_noRouteSlv_flitCount != 9'd0) ||
	   bus_1_inputDest_0_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_2) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_3)
	begin
	  v__h145022 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_3)
	$display("%0t -- %m error: input#%0d ",
		 v__h145022,
		 $signed(32'd1),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3)
	begin
	  v__h145284 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3)
	$write("%0t -- %m error: input#%0d ",
	       v__h145284,
	       $signed(32'd1),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_1_1$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_1_1$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_1_1$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3 &&
	  (!boot_rom_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_1_1$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_3) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_4)
	begin
	  v__h145568 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_4)
	$display("%0t -- %m error: input#%0d ",
		 v__h145568,
		 $signed(32'd2),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4)
	begin
	  v__h145830 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4)
	$write("%0t -- %m error: input#%0d ",
	       v__h145830,
	       $signed(32'd2),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_2$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_2$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	  !bus_1_inputDest_2$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4 &&
	  (!mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ||
	   bus_1_inputDest_2$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_4) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_5)
	begin
	  v__h146114 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_5)
	$display("%0t -- %m error: input#%0d ",
		 v__h146114,
		 $signed(32'd3),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5)
	begin
	  v__h146376 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5)
	$write("%0t -- %m error: input#%0d ",
	       v__h146376,
	       $signed(32'd3),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  uart0$RDY_slave_r_peek &&
	  !bus_1_inputDest_3$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_r_peek || bus_1_inputDest_3$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  uart0$RDY_slave_r_peek &&
	  !bus_1_inputDest_3$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5 &&
	  (!uart0$RDY_slave_r_peek || bus_1_inputDest_3$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_5) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_6)
	begin
	  v__h146660 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_6)
	$display("%0t -- %m error: input#%0d ",
		 v__h146660,
		 $signed(32'd4),
		 "was selected but did not emit a request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitration_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6)
	begin
	  v__h146922 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6)
	$write("%0t -- %m error: input#%0d ",
	       v__h146922,
	       $signed(32'd4),
	       "requested an invalid destination: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_rff$EMPTY_N &&
	  !bus_1_inputDest_4$wget[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_rff$EMPTY_N ||
	   bus_1_inputDest_4$wget[0]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  s_otherPeripheralsPortShim_rff$EMPTY_N &&
	  !bus_1_inputDest_4$wget[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6 &&
	  (!s_otherPeripheralsPortShim_rff$EMPTY_N ||
	   bus_1_inputDest_4$wget[1]))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6)
	$write(" (not a valid one-hot destination)", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_legal_destination_fail_6) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_3 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_3)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_3] and\n  [RL_bus_1_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_4 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_4)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_4] and\n  [RL_bus_1_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	begin
	  v__h165194 = $stime;
	  #0;
	end
    v__h165188 = v__h165194 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	$display("%0d:%m.rl_reset_start_initial ...", v__h165188);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_5 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_5] and\n  [RL_bus_1_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_2 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_2)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2] and\n  [RL_bus_1_input_follow_flit_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2] and [RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_4))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2, RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3] and [RL_bus_1_input_first_flit_4,\n  RL_bus_1_input_follow_flit_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_4) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_5))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2, RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3, RL_bus_1_input_first_flit_4,\n  RL_bus_1_input_follow_flit_4] and [RL_bus_1_input_first_flit_5,\n  RL_bus_1_input_follow_flit_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_input_first_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_2 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_3 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_4 ||
	   WILL_FIRE_RL_bus_1_input_first_flit_5 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_5) &&
	  (WILL_FIRE_RL_bus_1_input_first_flit_6 ||
	   WILL_FIRE_RL_bus_1_input_follow_flit_6))
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_2,\n  RL_bus_1_input_follow_flit_2, RL_bus_1_input_first_flit_3,\n  RL_bus_1_input_follow_flit_3, RL_bus_1_input_first_flit_4,\n  RL_bus_1_input_follow_flit_4, RL_bus_1_input_first_flit_5,\n  RL_bus_1_input_follow_flit_5] and [RL_bus_1_input_first_flit_6,\n  RL_bus_1_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_input_first_flit_6 &&
	  WILL_FIRE_RL_bus_1_input_follow_flit_6)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 263, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_input_first_flit_6] and\n  [RL_bus_1_input_follow_flit_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_output_selected_4 &&
	  WILL_FIRE_RL_bus_1_output_selected_5)
	$display("Error: \"../..//libs/BlueStuff/OneWayBus.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_output_selected_4] and\n  [RL_bus_1_output_selected_5] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkSoC_Top

